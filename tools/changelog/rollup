#!/usr/bin/env bash

# for information on all this bullshit:
# https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash

set -o errexit -o pipefail -o nounset

# ignore errexit with `&& true`
getopt --test > /dev/null && true
if [[ $? -ne 4 ]]; then
    echo "I'm sorry, \`getopt --test\` failed in this environment."
    exit 1
fi

# option --output/-o requires 1 argument
LONGOPTS=debug,major:,minor:
OPTIONS=dM:m:

# -temporarily store output to be able to check for errors
# -activate quoting/enhanced mode (e.g. by writing out “--options”)
# -pass arguments only via   -- "$@"   to separate them correctly
# -if getopt fails, it complains itself to stdout
PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@") || exit 2
# read getopt’s output this way to handle the quoting right:
eval set -- "$PARSED"

major=-
minor=-
# now enjoy the options in order and nicely split until we see --
while true; do
    case "$1" in
        -d|--debug)
            set -x
            shift
            ;;
        -M|--major)
            major="$2"
            shift 2
            ;;
        -m|--minor)
            minor="$2"
            shift 2
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal error"
            exit 3
            ;;
    esac
done

# handle non-option arguments
if [[ $# -ne 0 ]]; then
    echo "$0: Extra arguments are not supported"
    exit 6
fi

if [ "$major" = "-" ] && [ "$minor" = "-" ]; then
    echo "$0: You must supply either --major=X.Y or --minor=X.Y.Z"
    exit 4
fi

if [ "$major" != "-" ] && [ "$minor" != "-" ]; then
    echo "$0: --major and --minor are mutually exclusive"
    exit 5
fi


if [ "$major" != "-" ]; then
newver="$major"
TEMPLATE=$(cat <<-EOM
## $major (FIXME)
This is a major version update. This release replaces all previous versions.

Any prior version will stop working on FIXME. Node administrators must
upgrade to this version before that date. The $major feature upgrade will
occur at block height FIXME which is estimated to be mined at FIXME.

EOM
)
else
newver="$minor"
TEMPLATE=$(cat <<-EOM
## $minor (FIXME)
This is a minor point release. Upgrading is **strongly recommended**.

To upgrade, pull the latest docker image, or download the binary and
restart the node with the same configuration file as before.
EOM
)
fi

ROOT=$(git rev-parse --show-toplevel)

# before going any further, ensure the version is in chainweb.cabal
if ! grep -qP "version:\s+$newver" "$ROOT/chainweb.cabal"; then
    echo "$0: error: the version '$newver' is not in chainweb.cabal"
    echo "Please update the version in chainweb.cabal before running this script."
    exit 7
fi

# first, get all the high-level changelog entries
CHANGES="### Changes\n\n"
SHORT_COMMITS_MENTIONED=()
for file in $(find "$ROOT/changes" -type f -iname '*.txt' | sort); do
    full_commit="$(git log -1 --pretty=format:"%H" -- "$file")"
    short_commit=${full_commit:0:8}
    SHORT_COMMITS_MENTIONED+=("$short_commit")
    CHANGES+=$(printf -- "- %s [\`%s\`](https://github.com/kadena-io/chainweb-node/commit/%s)\\\\n" "$(cat "$file")" "$short_commit" "$full_commit")
done

# gather all commits made since the previous release, to compare with what's
# mentioned in the changelog
SHORT_COMMITS_ALL=()
while IFS= read -r line; do
    cid="${line%% *}"
    SHORT_COMMITS_ALL+=("$cid")
done < <(git log "$(git describe --tags --abbrev=0)..HEAD" --oneline)

contents=$(printf -- "%s\n\n%s\n" "$TEMPLATE" "$CHANGES" | cat - "$ROOT/CHANGELOG.md")

# delete the old changelog and write the new one, and delete the changes.txt files
rm -f "$ROOT/changes/"*.txt
echo -e "$contents" > "$ROOT/CHANGELOG.md"
echo "Wrote new changelog to $ROOT/CHANGELOG.md; please review the changes before committing."

diff="$(echo "${SHORT_COMMITS_ALL[@]}" "${SHORT_COMMITS_MENTIONED[@]}" | tr ' ' '\n' | sort | uniq -u)"
MISSING_COMMIT_MESSAGES=""
COMMIT_SEP="--------------------------------------------------------------------------------"
for commit in $diff; do
    # replace tabs with 4 spaces, replace leading spaces that precede only a
    # newline with just a newline
    MISSING_COMMIT_MESSAGES+="$(git show -s "$commit" | tr '\t' '    ' | sed 's/^[[:blank:]]*$//')\n\n$COMMIT_SEP\n\n"
done

# Test if the string is empty
if [[ -n "$MISSING_COMMIT_MESSAGES" ]]; then
    printf -- "\n%s\n%s\n%s\n" "Note: There were commits made since the previous release, but not mentioned in the changelog. I've written" "these commits and their messages to $ROOT/changes/missing.txt. Please verify that" "each of these is acceptable to omit from the changelog. Manual intervention may be required to include any missing entries."
    echo -e "$MISSING_COMMIT_MESSAGES" > "$ROOT/changes/missing.txt"
fi
