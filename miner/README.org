#+TITLE: Mining for the Kadena Public Blockchain
#+AUTHOR: Colin

* Table of Contents :TOC_4_gh:noexport:
- [[#what-is-mining][What is Mining?]]
- [[#mining-via-official-kadena-software][Mining via Official Kadena Software]]
  - [[#obtaining-a-key-pair][Obtaining a Key Pair]]
  - [[#mining-with-chainweb-node][Mining with chainweb-node]]
    - [[#basics][Basics]]
    - [[#disabling-the-in-process-miner][Disabling the In-Process Miner]]
    - [[#accepting-external-work-requests][Accepting External Work Requests]]
  - [[#mining-with-chainweb-miner][Mining with chainweb-miner]]
    - [[#basics-1][Basics]]
    - [[#chain-focusing][Chain Focusing]]
    - [[#log-suppression][Log Suppression]]
  - [[#troubleshooting][Troubleshooting]]
    - [[#i-mined-using-the-wrong-account-name-andor-public-key][I mined using the wrong account name and/or public key!]]
    - [[#chainweb-miner-says-that-i-mined-but-i-didnt-receive-the-reward][chainweb-miner says that I mined, but I didn't receive the reward.]]
    - [[#i-specify---chain-but-am-getting-work-for-other-chains-why][I specify ~--chain=...~ but am getting work for other chains. Why?]]
    - [[#why-am-i-being-preempted-so-much][Why am I being "preempted" so much?]]
- [[#remote-api-details][Remote API Details]]
  - [[#work-requests][Work Requests]]
  - [[#solution-submission][Solution Submission]]
  - [[#update-subscription][Update Subscription]]

* What is Mining?

A blockchain is a series of /blocks/. Blocks contain /transactions/ that
represent coin transfers or other Smart Contract interactions. Mining is the
process of mathematically "solving" a block. Unless solved, a block cannot be
included in the chain. Without mining, a blockchain cannot progress and
transactions will never finalize.

Economically, mining is the principal way to obtain currency on the Kadena
network. Since we use Proof-of-Work, computational effort is rewarded with coins
associated with each block you solve. The more computational power you have, the
more likely you are to be successful at mining.

Unlike blockchains that have a single chain, ours has many /parallel chains/.
Everyone who chooses to mine can spread their effort across these multiple
chains, advancing each one equally, thereby reducing competition and wasted
effort.

* Mining via Official Kadena Software

There are two official ways to mine for the Kadena network. The first is to use
~chainweb-node~ (a "full" Node) and perform in-process CPU mining alongside
other Node components. *This has the advantage of low-latency for getting new
work* since all databases are available on the same machine.

The second way is to use ~chainweb-miner~, our dedicated Mining Client. Work
requests are sent to known Nodes, which construct blocks for the client. Once
solved, the client returns the block to the Node for submission to the wider
network. This client boasts *much higher mining performance* and a *much simpler
setup*, since a ~chainweb-miner~ has no database connections and thus no storage
footprint.

For beginners, we recommend ~chainweb-miner~. Either way, you will need a Key
Pair before beginning.

** Obtaining a Key Pair

The easiest way to obtain a Key Pair is via the [[https://pact.kadena.io/][Pact Web]] application. Keys can
be generated by the /Wallet/ widget in the bottom right. Once generated, take
note of the /Public Key/.

** Mining with chainweb-node

This assumes you have obtained a ~chainweb-node~ binary, the full setup
instructions for which will not be repeated here.

*** Basics

~chainweb-node~ has many configuration options. The following displays them all:

#+begin_src bash
  chainweb-node --print-config
#+end_src

In fact, a common pattern is to pipe this output to a file, and then immediately
reuse it:

#+begin_src bash
  chainweb-node --print-config > config.yaml
#+end_src

Doing so, we'll see the following configuration of your "mining identity":

#+begin_src yaml
  minerInfo:
    account: <your-account-name-here>  # This must be unowned, or already claimed by you!
    public-keys: [<your-public-key-here>]
    predicate: keys-all
#+end_src

With values specific to you replaced above (and the rest of your ~chainweb-node~
configured correctly!) we're ready to mine:

#+begin_src bash
chainweb-node --config-file=config.yaml
#+end_src

By default, in-process mining is turned on. This means that while your Node is
participating in the overall network, it will also be mining in the background.

*Note:* If your designated account did not previously exist, it will be created
the first time you successfully mine on the same chain as the mined block. If
you specify an account name that you do not own, *your rewards will likely be
lost!*

*** Disabling the In-Process Miner

If you want to run a Node without in-process mining:

#+begin_src bash
  chainweb-node --disable-mining ...  # other flags
#+end_src

*** Accepting External Work Requests

By default, a Node does *not* accept external requests for new mining work, say
from a ~chainweb-miner~ or other third-party client. To turn this on:

#+begin_src bash
  chainweb-node --mining-coordination ... # other flags
#+end_src

This will open several endpoints that clients can call, which are described in
detail below. *Note:* Keep this option off if you aren't willing to have
anonymous clients connect to you for work generation calls. You won't be
rewarded for assembling blocks for them!

** Mining with chainweb-miner

Mining via ~chainweb-miner~ is much simpler and generally promises better
results.

*** Basics

#+begin_src bash
  chainweb-miner cpu --cores=4 --node=<trusted-node>:443 --miner-account=<you> --miner-key=<your-public-key>
#+end_src

Things to note:

- You can dedicate as many cores to parallel mining as you want with ~--cores~.
- If specifying the number of cores, the ~--cores~ flag must follow directly after the ~cpu~ flag.
- When ~--cores~ is omitted during CPU mining, then the number of cores used will default to 1. 
- You can only communicate with one Node at a time.
- As stated above, your declared account must be owned by you, or your rewards
  will likely be lost.

*** Chain Focusing

You might have a reason to prioritize one chain over the rest. To request that
the Node attempt to give you work for a specific chain first, pass ~--chain~:

#+begin_src bash
  chainweb-miner cpu --chain=9 ... # other flags
#+end_src

*** Log Suppression

You may only be interested in warning or error messages. If so, use the
~--log-level~ flag:

#+begin_src bash
  chainweb-miner cpu --log-level=warn ... # other flags
#+end_src

#+begin_example
  2019-09-16 16:57:56.755636: [warn] Couldn't connect to update stream. Trying again...
  2019-09-16 16:58:23.646547: [error] Failed to fetch work! Is the Node down?
#+end_example

** Troubleshooting

*** I mined using the wrong account name and/or public key!

Your coins are likely gone.

|                      | Your Key               | Not Your Key            |
|----------------------+------------------------+-------------------------|
| Your Account         | Hurray!                | Work rejected by Node.  |
|----------------------+------------------------+-------------------------|
| Not Your Account     | Work rejected by Node. | Work rejected by Node.  |
|----------------------+------------------------+-------------------------|
| Non-existant Account | You own a new account! | *Coins locked forever.* |

*** chainweb-miner says that I mined, but I didn't receive the reward.

This?

#+begin_example
  2019-09-16 16:58:37.289252: [info] Chain 6: Mined block at Height 12440.
#+end_example

And yet your balance on Chain 6 remains unchanged?

Mining is a big race. Even if you succeeded on Chain 6, by the time your block
returned to the Node, the Node may have already registered a faster block.

#+begin_quote
But if it knew about a better block on my chain, why didn't it preempt me?
#+end_quote

Race conditions. There's a small time window between the Node processing the
faster block, telling you about it, and you submitting your own block. Consider
it bad luck.

*** I specify ~--chain=...~ but am getting work for other chains. Why?

It is fundamental to the design of a Chainweb network that chains cannot
progress much further than their neighbor chains. It may be that by asking for
~--chain=9~, the Node couldn't find work to do! In this case, it falls back to
picking a random chain. This balances the needs of the Miner, who may want a
specific Chain to progress efficiently, with the needs of the network, which
requires all chains to grow evenly.

*** Why am I being "preempted" so much?

This?

#+begin_example
  2019-09-16 17:30:11.791641: [debug] Chain 7: Current work was preempted.
  2019-09-16 17:30:15.759249: [debug] Chain 8: Current work was preempted.
  2019-09-16 17:30:27.340109: [debug] Chain 9: Current work was preempted.
  2019-09-16 17:30:57.343577: [debug] Chain 6: Current work was preempted.
  2019-09-16 17:31:04.998382: [debug] Chain 9: Current work was preempted.
  2019-09-16 17:31:14.649440: [debug] Chain 1: Current work was preempted.
  2019-09-16 17:31:25.503355: [debug] Chain 4: Current work was preempted.
  2019-09-16 17:31:45.471371: [debug] Chain 9: Current work was preempted.
  2019-09-16 17:31:56.940698: [debug] Chain 2: Current work was preempted.
  2019-09-16 17:32:16.807348: [debug] Chain 9: Current work was preempted.
  2019-09-16 17:32:21.721842: [debug] Chain 8: Current work was preempted.
#+end_example

This is normal. This means that other miners are beating you, and that you
probably don't hold much of the overall network hash power.

* Remote API Details

A ~chainweb-miner~ communicates with a ~chainweb-node~ via the following
endpoints.

** Work Requests

#+begin_quote
Intent: I want a new BlockHeader to mine on.
#+end_quote

#+begin_example
  GET /chainweb/0.0/testnet/mining/work?chain=...
#+end_example

Clients can optionally specify a Chain to "focus" on.

Request Body (JSON):

#+begin_src js
  {
      "account": "miner",
      "predicate": "keys-all",
      "public-keys": [
          "f880a433d6e2a13a32b6169030f56245efdd8c1b8a5027e9ce98a88e886bef27"
      ]
  }
#+end_src

Response (Octet Stream):

#+begin_example
  Work Bytes - 338 bytes

  ChainBytes(4) + TargetBytes(32) + HeaderBytes(302)

  The minimum information required to perform Proof-of-Work. No knowledge of
  Chainweb internals is necessary.
#+end_example

| Piece       | Description                                 |
|-------------+---------------------------------------------|
| ChainBytes  | The final chain selection made by the Node. |
| TargetBytes | Encoded form of the current Hash Target.    |
| HeaderBytes | Encoded form of the Block Header.           |

** Solution Submission

#+begin_quote
Intent: I solved a block - here it is.
#+end_quote

#+begin_example
  POST /chainweb/0.0/testnet/mining/solved
#+end_example

Request Body (Octet Stream):

#+begin_example
  Header Bytes - 302 bytes

  The original work received, updated internally with the Nonce that satisfies the
  Proof-of-Work.
#+end_example

** Update Subscription

#+begin_quote
Intent: I am currently mining. Is the work I'm doing still worth it?
#+end_quote

#+begin_example
  GET /chainweb/0.0/testnet/mining/updates
#+end_example

Request Body (Octet Stream):

#+begin_example
  Chain Bytes - 4 bytes

  The first 4 bytes received from a call to /mining/work. This tells the Node to
  only inform the Miner of a new Cut when the specific chain in question has
  updated.
#+end_example

Response (Server-Sent Event):

#+begin_example
  A stream of Server-Sent Events with a single line:

  event:New Cut
#+end_example
