blockInProgress:
  blockGasLimit: 100000
  parentHeader: AAAAAAAAAAAAAAAAAAAAAIIzXn73OyOIp0jfSxHxAexuPSKF_tqZQwXk5WaUltwOAwACAAAA8vz8YnfG17F0Frzq7ZJzGnDHsJpOIP7qsrOF_qhM2zADAAAAAjlpGm9PgrNDif_JRlBUWhz_Glq7d6xsPXmHzWEWaTkFAAAAf5M620NHvX7CUIAR0TymFj-zeCo3Kb1YcgrNPi3UuCT__________________________________________-U1kxeUelXPOb1h6nJJU2PdZY5FepidcGHwyUoaKEwsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAACAAAAAAAAAAAAAAAAAAAAAAJC9BF5JNsHXTFq9kADAlg-rAe4tJTUle8VYF8Noz9xz
  pendingData:
    pendingSuccessfulTxs: []
    pendingTableCreation: []
    pendingWrites:
      SYS:Modules:
        coin:
          '9': '{"module":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","blessed":[],"interfaces":[{"namespace":null,"name":"fungible-v2"}],"imports":[],"name":{"namespace":null,"name":"coin"},"code":"(module
            coin GOVERNANCE\n\n  @doc \"''coin'' represents the Kadena Coin Contract.
            This contract provides both the \\\n  \\buy/redeem gas support in the
            form of ''fund-tx'', as well as transfer,       \\\n  \\credit, debit,
            coinbase, account creation and query, as well as SPV burn    \\\n  \\create.
            To access the coin contract, you may use its fully-qualified name,  \\\n  \\or
            issue the ''(use coin)'' command in the body of a module declaration.\"\n\n  @model\n    [
            (defproperty conserves-mass\n        (= (column-delta coin-table ''balance)
            0.0))\n\n      (defproperty valid-account (account:string)\n        (and\n          (>=
            (length account) 3)\n          (<= (length account) 256)))\n    ]\n\n  (implements
            fungible-v2)\n\n  ; --------------------------------------------------------------------------\n  ;
            Schemas and Tables\n\n  (defschema coin-schema\n    @doc \"The coin contract
            token schema\"\n    @model [ (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  (deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  (defcap GOVERNANCE ()\n    (enforce false \"Enforce
            non-upgradeability\"))\n\n  (defcap GAS ()\n    \"Magic capability to
            protect gas buy and redeem\"\n    true)\n\n  (defcap COINBASE ()\n    \"Magic
            capability to protect miner reward\"\n    true)\n\n  (defcap GENESIS ()\n    \"Magic
            capability constraining genesis transactions\"\n    true)\n\n  (defcap
            REMEDIATE ()\n    \"Magic capability for remediation transactions\"\n    true)\n\n  (defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  (defcap CREDIT (receiver:string)\n    \"Capability
            for managing crediting operations\"\n    (enforce (!= receiver \"\") \"valid
            receiver\"))\n\n  (defcap ROTATE (account:string)\n    @doc \"Autonomously
            managed capability for guard rotation\"\n    @managed\n    true)\n\n  (defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  (defun TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  (defconst COIN_CHARSET CHARSET_LATIN1\n    \"The default
            coin contract character set\")\n\n  (defconst MINIMUM_PRECISION 12\n    \"Minimum
            allowed precision for coin transactions\")\n\n  (defconst MINIMUM_ACCOUNT_LENGTH
            3\n    \"Minimum account length admissible for coin accounts\")\n\n  (defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  (defun enforce-unit:bool (amount:decimal)\n    @doc \"Enforce
            minimum precision allowed for coin transactions\"\n\n    (enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    )\n\n  (defun validate-account
            (account:string)\n    @doc \"Enforce that an account name conforms to
            the coin contract \\\n         \\minimum and maximum length requirements,
            as well as the    \\\n         \\latin-1 character set.\"\n\n    (enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    (let ((account-length
            (length account)))\n\n      (enforce\n        (>= account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  (defun gas-only ()\n    \"Predicate for gas-only user
            guards.\"\n    (require-capability (GAS)))\n\n  (defun gas-guard (guard:guard)\n    \"Predicate
            for gas + single key user guards\"\n    (enforce-one\n      \"Enforce
            either the presence of a GAS cap or keyset\"\n      [ (gas-only)\n        (enforce-guard
            guard)\n      ]))\n\n  (defun buy-gas:string (sender:string total:decimal)\n    @doc
            \"This function describes the main ''gas buy'' operation. At this point
            \\\n    \\MINER has been chosen from the pool, and will be validated.
            The SENDER   \\\n    \\of this transaction has specified a gas limit LIMIT
            (maximum gas) for    \\\n    \\the transaction, and the price is the spot
            price of gas at that time.    \\\n    \\The gas buy will be executed prior
            to executing SENDER''s code.\"\n\n    @model [ (property (> total 0.0))\n             (property
            (valid-account sender))\n           ]\n\n    (validate-account sender)\n\n    (enforce-unit
            total)\n    (enforce (> total 0.0) \"gas supply must be a positive quantity\")\n\n    (require-capability
            (GAS))\n    (with-capability (DEBIT sender)\n      (debit sender total))\n    )\n\n  (defun
            redeem-gas:string (miner:string miner-guard:guard sender:string total:decimal)\n    @doc
            \"This function describes the main ''redeem gas'' operation. At this    \\\n    \\point,
            the SENDER''s transaction has been executed, and the gas that      \\\n    \\was
            charged has been calculated. MINER will be credited the gas cost,    \\\n    \\and
            SENDER will receive the remainder up to the limit\"\n\n    @model [ (property
            (> total 0.0))\n             (property (valid-account sender))\n             (property
            (valid-account miner))\n           ]\n\n    (validate-account sender)\n    (validate-account
            miner)\n    (enforce-unit total)\n\n    (require-capability (GAS))\n    (let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    )\n\n  (defun create-account:string
            (account:string guard:guard)\n    @model [ (property (valid-account account))
            ]\n\n    (validate-account account)\n\n    (insert coin-table account\n      {
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  (defun
            get-balance:decimal (account:string)\n    (with-read coin-table account\n      {
            \"balance\" := balance }\n      balance\n      )\n    )\n\n  (defun details:object{fungible-v2.account-details}\n    (
            account:string )\n    (with-read coin-table account\n      { \"balance\"
            := bal\n      , \"guard\" := g }\n      { \"account\" : account\n      ,
            \"balance\" : bal\n      , \"guard\": g })\n    )\n\n  (defun rotate:string
            (account:string new-guard:guard)\n    (with-capability (ROTATE account)\n      (with-read
            coin-table account\n        { \"guard\" := old-guard }\n\n        (enforce-guard
            old-guard)\n\n        (update coin-table account\n          { \"guard\"
            : new-guard }\n          )))\n    )\n\n\n  (defun precision:integer\n    ()\n    MINIMUM_PRECISION)\n\n  (defun
            transfer:string (sender:string receiver:string amount:decimal)\n    @model
            [ (property conserves-mass)\n             (property (> amount 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account receiver))\n             (property
            (!= sender receiver)) ]\n\n    (enforce (!= sender receiver)\n      \"sender
            cannot be the receiver of a transfer\")\n\n    (validate-account sender)\n    (validate-account
            receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer amount must
            be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability (TRANSFER
            sender receiver amount)\n      (debit sender amount)\n      (with-read
            coin-table receiver\n        { \"guard\" := g }\n\n        (credit receiver
            g amount))\n      )\n    )\n\n  (defun transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal
            )\n\n    @model [ (property conserves-mass) ]\n\n    (enforce (!= sender
            receiver)\n      \"sender cannot be the receiver of a transfer\")\n\n    (validate-account
            sender)\n    (validate-account receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer
            amount must be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability
            (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit
            receiver receiver-guard amount))\n    )\n\n  (defun coinbase:string (account:string
            account-guard:guard amount:decimal)\n    @doc \"Internal function for
            the initial creation of coins.  This function \\\n    \\cannot be used
            outside of the coin contract.\"\n\n    @model [ (property (valid-account
            account))\n             (property (> amount 0.0))\n           ]\n\n    (validate-account
            account)\n    (enforce-unit amount)\n\n    (require-capability (COINBASE))\n    (with-capability
            (CREDIT account)\n      (credit account account-guard amount))\n    )\n\n  (defun
            remediate:string (account:string amount:decimal)\n    @doc \"Allows for
            remediation transactions. This function \\\n         \\is protected by
            the REMEDIATE capability\"\n    @model [ (property (valid-account account))\n             (property
            (> amount 0.0))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"Remediation amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (REMEDIATE))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n  (defpact fund-tx
            (sender:string miner:string miner-guard:guard total:decimal)\n    @doc
            \"''fund-tx'' is a special pact to fund a transaction in two steps,     \\\n    \\with
            the actual transaction transpiring in the middle:                   \\\n    \\                                                                         \\\n    \\  1)
            A buying phase, debiting the sender for total gas and fee, yielding \\\n    \\     TX_MAX_CHARGE.                                                      \\\n    \\  2)
            A settlement phase, resuming TX_MAX_CHARGE, and allocating to the   \\\n    \\     coinbase
            account for used gas and fee, and sender account for bal-  \\\n    \\     ance
            (unused gas, if any).\"\n\n    @model [ (property (> total 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account miner))\n             ;(property
            conserves-mass) not supported yet\n           ]\n\n    (step (buy-gas
            sender total))\n    (step (redeem-gas miner miner-guard sender total))\n    )\n\n  (defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  (defun credit:string
            (account:string guard:guard amount:decimal)\n    @doc \"Credit AMOUNT
            to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  (defschema crosschain-schema\n    @doc
            \"Schema for yielded value in cross-chain transfers\"\n    receiver:string\n    receiver-guard:guard\n    amount:decimal)\n\n  (defpact
            transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal
            )\n\n    @model [ (property (> amount 0.0))\n             (property (valid-account
            sender))\n             (property (valid-account receiver))\n           ]\n\n    (step\n      (with-capability
            (DEBIT sender)\n\n        (validate-account sender)\n        (validate-account
            receiver)\n\n        (enforce (!= \"\" target-chain) \"empty target-chain\")\n        (enforce
            (!= (at ''chain-id (chain-data)) target-chain)\n          \"cannot run
            cross-chain transfers to the same chain\")\n\n        (enforce (> amount
            0.0)\n          \"transfer quantity must be positive\")\n\n        (enforce-unit
            amount)\n\n        ;; step 1 - debit delete-account on current chain\n        (debit
            sender amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )))\n\n    (step\n      (resume\n        { \"receiver\"
            := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        ))\n    )\n\n\n  ; --------------------------------------------------------------------------\n  ;
            Coin allocations\n\n  (defschema allocation-schema\n    @doc \"Genesis
            allocation registry\"\n    ;@model [ (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  (deftable
            allocation-table:{allocation-schema})\n\n  (defun create-allocation-account\n    (
            account:string\n      date:time\n      keyset-ref:string\n      amount:decimal\n    )\n\n    @doc
            \"Add an entry to the coin allocation table. This function \\\n         \\also
            creates a corresponding empty coin contract account \\\n         \\of
            the same name and guard. Requires GENESIS capability. \"\n\n    @model
            [ (property (valid-account account)) ]\n\n    (require-capability (GENESIS))\n\n    (validate-account
            account)\n    (enforce (>= amount 0.0)\n      \"allocation amount must
            be non-negative\")\n\n    (enforce-unit amount)\n\n    (let\n      ((guard:guard
            (keyset-ref-guard keyset-ref)))\n\n      (create-account account guard)\n\n      (insert
            allocation-table account\n        { \"balance\" : amount\n        , \"date\"
            : date\n        , \"guard\" : guard\n        , \"redeemed\" : false\n        })))\n\n  (defun
            release-allocation\n    ( account:string )\n\n    @doc \"Release funds
            associated with allocation ACCOUNT into main ledger.   \\\n         \\ACCOUNT
            must already exist in main ledger. Allocation is deactivated \\\n         \\after
            release.\"\n    @model [ (property (valid-account account)) ]\n\n    (validate-account
            account)\n\n    (with-read allocation-table account\n      { \"balance\"
            := balance\n      , \"date\" := release-time\n      , \"redeemed\" :=
            redeemed\n      , \"guard\" := guard\n      }\n\n      (let ((curr-time:time
            (at ''block-time (chain-data))))\n\n        (enforce (not redeemed)\n          \"allocation
            funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    )))\n\n)\n","meta":{"model":[{"list":[{"atom":"defproperty","q":[],"i":{"d":[12,446,446],"c":"defproperty
            "}},{"atom":"conserves-mass","q":[],"i":{"d":[23,458,458],"c":"conserves-mass\n        "}},{"list":[{"atom":"=","q":[],"i":{"d":[2,482,482],"c":"=
            "}},{"list":[{"atom":"column-delta","q":[],"i":{"d":[13,485,485],"c":"column-delta
            "}},{"atom":"coin-table","q":[],"i":{"d":[11,498,498],"c":"coin-table
            "}},{"i":{"d":[8,509,509],"c":"''balance"},"lit":"balance"}],"d":"()","i":{"d":[35,484,484],"c":"(column-delta
            coin-table ''balance) "}},{"i":{"d":[3,519,519],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[42,481,481],"c":"(=
            (column-delta coin-table ''balance) 0.0)"}}],"d":"()","i":{"d":[87,445,445],"c":"(defproperty
            conserves-mass\n        (= (column-delta coin-table ''balance) 0.0))\n\n      "}},{"list":[{"atom":"defproperty","q":[],"i":{"d":[12,533,533],"c":"defproperty
            "}},{"atom":"valid-account","q":[],"i":{"d":[14,545,545],"c":"valid-account
            "}},{"list":[{"atom":"account","q":[],"i":{"d":[7,560,560],"c":"account"}},{"sep":":","i":{"d":[1,567,567],"c":":"}},{"atom":"string","q":[],"i":{"d":[6,568,568],"c":"string"}}],"d":"()","i":{"d":[25,559,559],"c":"(account:string)\n        "}},{"list":[{"atom":"and","q":[],"i":{"d":[14,585,585],"c":"and\n          "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,600,600],"c":">=
            "}},{"list":[{"atom":"length","q":[],"i":{"d":[7,604,604],"c":"length
            "}},{"atom":"account","q":[],"i":{"d":[7,611,611],"c":"account"}}],"d":"()","i":{"d":[17,603,603],"c":"(length
            account) "}},{"i":{"d":[1,620,620],"c":"3"},"lit":{"int":3}}],"d":"()","i":{"d":[34,599,599],"c":"(>=
            (length account) 3)\n          "}},{"list":[{"atom":"<=","q":[],"i":{"d":[3,634,634],"c":"<=
            "}},{"list":[{"atom":"length","q":[],"i":{"d":[7,638,638],"c":"length
            "}},{"atom":"account","q":[],"i":{"d":[7,645,645],"c":"account"}}],"d":"()","i":{"d":[17,637,637],"c":"(length
            account) "}},{"i":{"d":[3,654,654],"c":"256"},"lit":{"int":256}}],"d":"()","i":{"d":[25,633,633],"c":"(<=
            (length account) 256)"}}],"d":"()","i":{"d":[75,584,584],"c":"(and\n          (>=
            (length account) 3)\n          (<= (length account) 256))"}}],"d":"()","i":{"d":[133,532,532],"c":"(defproperty
            valid-account (account:string)\n        (and\n          (>= (length account)
            3)\n          (<= (length account) 256)))\n    "}}],"docs":"''coin'' represents
            the Kadena Coin Contract. This contract provides both the buy/redeem gas
            support in the form of ''fund-tx'', as well as transfer,       credit,
            debit, coinbase, account creation and query, as well as SPV burn    create.
            To access the coin contract, you may use its fully-qualified name,  or
            issue the ''(use coin)'' command in the body of a module declaration.
            Standard for fungible coins and tokens as specified in KIP-0002. "},"governance":{"capability":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"a","constraint":[]}},"defName":"GOVERNANCE","defBody":{"scope":{"list":[{"args":[{"i":{"d":[6,1122,1122],"c":"false
            "},"lit":false},{"i":{"d":[28,1128,1128],"c":"\"Enforce non-upgradeability\""},"lit":"Enforce
            non-upgradeability"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1114,1114],"c":"enforce
            "}},"info":{"d":[44,1113,1113],"c":"(enforce false \"Enforce non-upgradeability\")"}}],"type":"*","i":{"d":[75,1087,1087],"c":"(defcap
            GOVERNANCE ()\n    (enforce false \"Enforce non-upgradeability\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[75,1087,1087],"c":"(defcap
            GOVERNANCE ()\n    (enforce false \"Enforce non-upgradeability\"))\n\n  "}}}},"refMap":{"release-allocation":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,15171,15171],"c":"account"}}],"return":{"tag":"TypeVar","name":"ao","constraint":[]}},"defName":"release-allocation","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,15450,15450],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,15433,15433],"c":"validate-account
            "}},"info":{"d":[32,15432,15432],"c":"(validate-account account)\n\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"allocation-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"allocation-schema","meta":{"model":[],"docs":"Genesis
            allocation registry"},"i":{"d":[186,14086,14086],"c":"(defschema allocation-schema\n    @doc
            \"Genesis allocation registry\"\n    ;@model [ (invariant (>= balance
            0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,14204,14204],"c":"balance"}},{"name":"date","type":"time","info":{"d":[4,14224,14224],"c":"date"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,14238,14238],"c":"guard"}},{"name":"redeemed","type":"bool","info":{"d":[8,14254,14254],"c":"redeemed"}}]}},"i":{"d":[17,14300,14300],"c":"allocation-schema"}},"i":{"d":[51,14272,14272],"c":"(deftable
            allocation-table:{allocation-schema})\n\n  "}}},"i":null}},"i":{"d":[17,15475,15475],"c":"allocation-table
            "}},{"var":{"b":0},"i":{"d":[14,15492,15492],"c":"account\n      "}},{"body":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[8,15708,15708],"c":"redeemed"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"not"}},"i":null}},"i":null}},"i":null}},"i":{"d":[4,15704,15704],"c":"not
            "}},"info":{"d":[25,15703,15703],"c":"(not redeemed)\n          "}},{"i":{"d":[45,15728,15728],"c":"\"allocation
            funds have already been redeemed\""},"lit":"allocation funds have already
            been redeemed"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[8,15695,15695],"c":"enforce
            "}},"info":{"d":[90,15694,15694],"c":"(enforce (not redeemed)\n          \"allocation
            funds have already been redeemed\")\n\n        "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[10,15807,15807],"c":"curr-time
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[12,15817,15817],"c":"release-time"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,15804,15804],"c":">=
            "}},"info":{"d":[38,15803,15803],"c":"(>= curr-time release-time)\n          "}},{"args":[{"i":{"d":[42,15849,15849],"c":"\"funds
            locked until {}. current time: {}\" "},"lit":"funds locked until {}. current
            time: {}"},{"list":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[13,15892,15892],"c":"release-time
            "}},{"var":{"b":0},"i":{"d":[9,15905,15905],"c":"curr-time"}}],"type":{"tag":"TypeVar","name":"at","constraint":[]},"i":{"d":[24,15891,15891],"c":"[release-time
            curr-time]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,15842,15842],"c":"format
            "}},"info":{"d":[75,15841,15841],"c":"(format \"funds locked until {}.
            current time: {}\" [release-time curr-time])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[18,15785,15785],"c":"enforce\n          "}},"info":{"d":[143,15784,15784],"c":"(enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        "}},{"args":[{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[5,15942,15942],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":null}},"i":null}},"i":{"d":[14,15928,15928],"c":"enforce-guard
            "}},"info":{"d":[31,15927,15927],"c":"(enforce-guard guard)\n\n        "}},{"args":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[7,15983,15983],"c":"account"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,15976,15976],"c":"CREDIT
            "}},"info":{"d":[27,15975,15975],"c":"(CREDIT account)\n          "}},{"list":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[8,16010,16010],"c":"account
            "}},{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[6,16018,16018],"c":"guard
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,16024,16024],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,16003,16003],"c":"credit
            "}},"info":{"d":[42,16002,16002],"c":"(credit account guard balance)\n\n          "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"allocation-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"allocation-schema","meta":{"model":[],"docs":"Genesis
            allocation registry"},"i":{"d":[186,14086,14086],"c":"(defschema allocation-schema\n    @doc
            \"Genesis allocation registry\"\n    ;@model [ (invariant (>= balance
            0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,14204,14204],"c":"balance"}},{"name":"date","type":"time","info":{"d":[4,14224,14224],"c":"date"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,14238,14238],"c":"guard"}},{"name":"redeemed","type":"bool","info":{"d":[8,14254,14254],"c":"redeemed"}}]}},"i":{"d":[17,14300,14300],"c":"allocation-schema"}},"i":{"d":[51,14272,14272],"c":"(deftable
            allocation-table:{allocation-schema})\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[17,16052,16052],"c":"allocation-table
            "}},{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[20,16069,16069],"c":"account\n            "}},{"obj":{"balance":{"i":{"d":[16,16135,16135],"c":"0.0\n            "},"lit":0},"redeemed":{"i":{"d":[17,16104,16104],"c":"true\n            "},"lit":true}},"keyorder":["redeemed","balance"],"type":"*","i":{"d":[63,16089,16089],"c":"{
            \"redeemed\" : true\n            , \"balance\" : 0.0\n            }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,16045,16045],"c":"update
            "}},"info":{"d":[121,16044,16044],"c":"(update allocation-table account\n            {
            \"redeemed\" : true\n            , \"balance\" : 0.0\n            })\n\n          "}},{"i":{"d":[49,16165,16165],"c":"\"Allocation
            successfully released to main ledger\""},"lit":"Allocation successfully
            released to main ledger"}],"type":"*","i":{"d":[42,16002,16002],"c":"(credit
            account guard balance)\n\n          "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":null}},"i":{"d":[16,15959,15959],"c":"with-capability
            "}},"info":{"d":[262,15958,15958],"c":"(with-capability (CREDIT account)\n          (credit
            account guard balance)\n\n          (update allocation-table account\n            {
            \"redeemed\" : true\n            , \"balance\" : 0.0\n            })\n\n          \"Allocation
            successfully released to main ledger\")\n    "}}],"type":"*","i":{"d":[590,15631,15631],"c":"(let
            ((curr-time:time (at ''block-time (chain-data))))\n\n        (enforce
            (not redeemed)\n          \"allocation funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    )"}}},"pairs":[{"arg":{"name":"curr-time","type":"time","info":{"d":[9,15638,15638],"c":"curr-time"}},"val":{"args":[{"i":{"d":[12,15657,15657],"c":"''block-time
            "},"lit":"block-time"},{"args":[],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"chain-data"}},"i":null}},"i":null}},"i":{"d":[10,15670,15670],"c":"chain-data"}},"info":{"d":[12,15669,15669],"c":"(chain-data)"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":null}},"i":{"d":[3,15654,15654],"c":"at
            "}},"info":{"d":[29,15653,15653],"c":"(at ''block-time (chain-data))"}}}],"type":"let","i":{"d":[590,15631,15631],"c":"(let
            ((curr-time:time (at ''block-time (chain-data))))\n\n        (enforce
            (not redeemed)\n          \"allocation funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    )"}}],"type":"*","i":{"d":[758,15464,15464],"c":"(with-read
            allocation-table account\n      { \"balance\" := balance\n      , \"date\"
            := release-time\n      , \"redeemed\" := redeemed\n      , \"guard\" :=
            guard\n      }\n\n      (let ((curr-time:time (at ''block-time (chain-data))))\n\n        (enforce
            (not redeemed)\n          \"allocation funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    ))"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ap","constraint":[]},"info":{"d":[14,15521,15521],"c":"balance\n      "}},"val":{"i":{"d":[10,15508,15508],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"release-time","type":{"tag":"TypeVar","name":"aq","constraint":[]},"info":{"d":[19,15547,15547],"c":"release-time\n      "}},"val":{"i":{"d":[7,15537,15537],"c":"\"date\"
            "},"lit":"date"}},{"arg":{"name":"redeemed","type":{"tag":"TypeVar","name":"ar","constraint":[]},"info":{"d":[15,15582,15582],"c":"redeemed\n      "}},"val":{"i":{"d":[11,15568,15568],"c":"\"redeemed\"
            "},"lit":"redeemed"}},{"arg":{"name":"guard","type":{"tag":"TypeVar","name":"as","constraint":[]},"info":{"d":[12,15610,15610],"c":"guard\n      "}},"val":{"i":{"d":[8,15599,15599],"c":"\"guard\"
            "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[125,15506,15506],"c":"{
            \"balance\" := balance\n      , \"date\" := release-time\n      , \"redeemed\"
            := redeemed\n      , \"guard\" := guard\n      }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,15465,15465],"c":"with-read
            "}},"info":{"d":[758,15464,15464],"c":"(with-read allocation-table account\n      {
            \"balance\" := balance\n      , \"date\" := release-time\n      , \"redeemed\"
            := redeemed\n      , \"guard\" := guard\n      }\n\n      (let ((curr-time:time
            (at ''block-time (chain-data))))\n\n        (enforce (not redeemed)\n          \"allocation
            funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    ))"}}],"type":"*","i":{"d":[1086,15139,15139],"c":"(defun
            release-allocation\n    ( account:string )\n\n    @doc \"Release funds
            associated with allocation ACCOUNT into main ledger.   \\\n         \\ACCOUNT
            must already exist in main ledger. Allocation is deactivated \\\n         \\after
            release.\"\n    @model [ (property (valid-account account)) ]\n\n    (validate-account
            account)\n\n    (with-read allocation-table account\n      { \"balance\"
            := balance\n      , \"date\" := release-time\n      , \"redeemed\" :=
            redeemed\n      , \"guard\" := guard\n      }\n\n      (let ((curr-time:time
            (at ''block-time (chain-data))))\n\n        (enforce (not redeemed)\n          \"allocation
            funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    )))\n\n"}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,15391,15391],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,15401,15401],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,15415,15415],"c":"account"}}],"d":"()","i":{"d":[23,15400,15400],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[35,15390,15390],"c":"(property (valid-account
            account)) "}}],"docs":"Release funds associated with allocation ACCOUNT
            into main ledger.   ACCOUNT must already exist in main ledger. Allocation
            is deactivated after release."},"info":{"d":[1086,15139,15139],"c":"(defun
            release-allocation\n    ( account:string )\n\n    @doc \"Release funds
            associated with allocation ACCOUNT into main ledger.   \\\n         \\ACCOUNT
            must already exist in main ledger. Allocation is deactivated \\\n         \\after
            release.\"\n    @model [ (property (valid-account account)) ]\n\n    (validate-account
            account)\n\n    (with-read allocation-table account\n      { \"balance\"
            := balance\n      , \"date\" := release-time\n      , \"redeemed\" :=
            redeemed\n      , \"guard\" := guard\n      }\n\n      (let ((curr-time:time
            (at ''block-time (chain-data))))\n\n        (enforce (not redeemed)\n          \"allocation
            funds have already been redeemed\")\n\n        (enforce\n          (>=
            curr-time release-time)\n          (format \"funds locked until {}. current
            time: {}\" [release-time curr-time]))\n\n        (enforce-guard guard)\n\n        (with-capability
            (CREDIT account)\n          (credit account guard balance)\n\n          (update
            allocation-table account\n            { \"redeemed\" : true\n            ,
            \"balance\" : 0.0\n            })\n\n          \"Allocation successfully
            released to main ledger\")\n    )))\n\n"}}},"MINIMUM_PRECISION":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"crosschain-schema":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"crosschain-schema","meta":{"model":[],"docs":"Schema
            for yielded value in cross-chain transfers"},"i":{"d":[158,12432,12432],"c":"(defschema
            crosschain-schema\n    @doc \"Schema for yielded value in cross-chain
            transfers\"\n    receiver:string\n    receiver-guard:guard\n    amount:decimal)\n\n  "},"fields":[{"name":"receiver","type":"string","info":{"d":[8,12526,12526],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,12546,12546],"c":"receiver-guard"}},{"name":"amount","type":"decimal","info":{"d":[6,12571,12571],"c":"amount"}}]}},"REMEDIATE":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"e","constraint":[]}},"defName":"REMEDIATE","defBody":{"scope":{"list":[{"i":{"d":[4,1489,1489],"c":"true"},"lit":true}],"type":"*","i":{"d":[86,1412,1412],"c":"(defcap
            REMEDIATE ()\n    \"Magic capability for remediation transactions\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability for remediation transactions"},"info":{"d":[86,1412,1412],"c":"(defcap
            REMEDIATE ()\n    \"Magic capability for remediation transactions\"\n    true)\n\n  "}}},"remediate":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,9448,9448],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,9463,9463],"c":"amount"}}],"return":"string"},"defName":"remediate","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,9717,9717],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,9700,9700],"c":"validate-account
            "}},"info":{"d":[32,9699,9699],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,9743,9743],"c":"amount
            "}},{"i":{"d":[3,9750,9750],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,9741,9741],"c":">
            "}},"info":{"d":[21,9740,9740],"c":"(> amount 0.0)\n      "}},{"i":{"d":[37,9761,9761],"c":"\"Remediation
            amount must be positive\""},"lit":"Remediation amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,9732,9732],"c":"enforce
            "}},"info":{"d":[74,9731,9731],"c":"(enforce (> amount 0.0)\n      \"Remediation
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,9819,9819],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,9806,9806],"c":"enforce-unit
            "}},"info":{"d":[27,9805,9805],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"e","constraint":[]}},"defName":"REMEDIATE","defBody":{"scope":{"list":[{"i":{"d":[4,1489,1489],"c":"true"},"lit":true}],"type":"*","i":{"d":[86,1412,1412],"c":"(defcap
            REMEDIATE ()\n    \"Magic capability for remediation transactions\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability for remediation transactions"},"info":{"d":[86,1412,1412],"c":"(defcap
            REMEDIATE ()\n    \"Magic capability for remediation transactions\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[9,9853,9853],"c":"REMEDIATE"}},"info":{"d":[11,9852,9852],"c":"(REMEDIATE)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,9833,9833],"c":"require-capability
            "}},"info":{"d":[37,9832,9832],"c":"(require-capability (REMEDIATE))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,9880,9880],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,9891,9891],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,9950,9950],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,9957,9957],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,9947,9947],"c":"<=
            "}},"info":{"d":[20,9946,9946],"c":"(<= amount balance) "}},{"i":{"d":[20,9966,9966],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,9938,9938],"c":"enforce
            "}},"info":{"d":[58,9937,9937],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,10003,10003],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,10014,10014],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,10047,10047],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,10055,10055],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,10045,10045],"c":"-
            "}},"info":{"d":[19,10044,10044],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,10030,10030],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,9996,9996],"c":"update
            "}},"info":{"d":[79,9995,9995],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,9869,9869],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"af","constraint":[]},"info":{"d":[8,9920,9920],"c":"balance
            "}},"val":{"i":{"d":[10,9907,9907],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,9905,9905],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,9870,9870],"c":"with-read
            "}},"info":{"d":[211,9869,9869],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[662,9423,9423],"c":"(defun
            remediate:string (account:string amount:decimal)\n    @doc \"Allows for
            remediation transactions. This function \\\n         \\is protected by
            the REMEDIATE capability\"\n    @model [ (property (valid-account account))\n             (property
            (> amount 0.0))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"Remediation amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (REMEDIATE))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,9608,9608],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,9618,9618],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,9632,9632],"c":"account"}}],"d":"()","i":{"d":[23,9617,9617],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[48,9607,9607],"c":"(property (valid-account
            account))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,9656,9656],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,9666,9666],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,9668,9668],"c":"amount
            "}},{"i":{"d":[3,9675,9675],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,9665,9665],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[37,9655,9655],"c":"(property (> amount
            0.0))\n           "}}],"docs":"Allows for remediation transactions. This
            function is protected by the REMEDIATE capability"},"info":{"d":[662,9423,9423],"c":"(defun
            remediate:string (account:string amount:decimal)\n    @doc \"Allows for
            remediation transactions. This function \\\n         \\is protected by
            the REMEDIATE capability\"\n    @model [ (property (valid-account account))\n             (property
            (> amount 0.0))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"Remediation amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (REMEDIATE))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n  "}}},"enforce-unit":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions Enforce minimum precision
            allowed for transactions."},"info":{"d":[256,3092,3092],"c":"(defun enforce-unit:bool
            (amount:decimal)\n    @doc \"Enforce minimum precision allowed for coin
            transactions\"\n\n    (enforce\n      (= (floor amount MINIMUM_PRECISION)\n         amount)\n      (format
            \"Amount violates minimum precision: {}\" [amount]))\n    )\n\n  "}}},"GAS":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"fund-tx":{"ref":{"defType":"Defpact","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,10103,10103],"c":"sender"}},{"name":"miner","type":"string","info":{"d":[5,10117,10117],"c":"miner"}},{"name":"miner-guard","type":{"guard":null},"info":{"d":[11,10130,10130],"c":"miner-guard"}},{"name":"total","type":"decimal","info":{"d":[5,10148,10148],"c":"total"}}],"return":{"tag":"TypeVar","name":"ag","constraint":[]}},"defName":"fund-tx","defBody":{"scope":{"list":[{"body":{"exec":{"args":[{"var":{"b":0},"i":{"d":[7,10984,10984],"c":"sender
            "}},{"var":{"b":3},"i":{"d":[5,10991,10991],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,4579,4579],"c":"sender"}},{"name":"total","type":"decimal","info":{"d":[5,4593,4593],"c":"total"}}],"return":"string"},"defName":"buy-gas","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[6,5119,5119],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5102,5102],"c":"validate-account
            "}},"info":{"d":[31,5101,5101],"c":"(validate-account sender)\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[5,5146,5146],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,5133,5133],"c":"enforce-unit
            "}},"info":{"d":[25,5132,5132],"c":"(enforce-unit total)\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[6,5169,5169],"c":"total
            "}},{"i":{"d":[3,5175,5175],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,5167,5167],"c":">
            "}},"info":{"d":[14,5166,5166],"c":"(> total 0.0) "}},{"i":{"d":[40,5180,5180],"c":"\"gas
            supply must be a positive quantity\""},"lit":"gas supply must be a positive
            quantity"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,5158,5158],"c":"enforce
            "}},"info":{"d":[70,5157,5157],"c":"(enforce (> total 0.0) \"gas supply
            must be a positive quantity\")\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,5248,5248],"c":"GAS"}},"info":{"d":[5,5247,5247],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,5228,5228],"c":"require-capability
            "}},"info":{"d":[31,5227,5227],"c":"(require-capability (GAS))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,5282,5282],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,5276,5276],"c":"DEBIT
            "}},"info":{"d":[21,5275,5275],"c":"(DEBIT sender)\n      "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,5303,5303],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[5,5310,5310],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"i":null}},"i":{"d":[6,5297,5297],"c":"debit
            "}},"info":{"d":[20,5296,5296],"c":"(debit sender total)"}}],"type":"*","i":{"d":[20,5296,5296],"c":"(debit
            sender total)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,5259,5259],"c":"with-capability
            "}},"info":{"d":[64,5258,5258],"c":"(with-capability (DEBIT sender)\n      (debit
            sender total))\n    "}}],"type":"*","i":{"d":[771,4556,4556],"c":"(defun
            buy-gas:string (sender:string total:decimal)\n    @doc \"This function
            describes the main ''gas buy'' operation. At this point \\\n    \\MINER
            has been chosen from the pool, and will be validated. The SENDER   \\\n    \\of
            this transaction has specified a gas limit LIMIT (maximum gas) for    \\\n    \\the
            transaction, and the price is the spot price of gas at that time.    \\\n    \\The
            gas buy will be executed prior to executing SENDER''s code.\"\n\n    @model
            [ (property (> total 0.0))\n             (property (valid-account sender))\n           ]\n\n    (validate-account
            sender)\n\n    (enforce-unit total)\n    (enforce (> total 0.0) \"gas
            supply must be a positive quantity\")\n\n    (require-capability (GAS))\n    (with-capability
            (DEBIT sender)\n      (debit sender total))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,5012,5012],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,5022,5022],"c":"> "}},{"atom":"total","q":[],"i":{"d":[6,5024,5024],"c":"total
            "}},{"i":{"d":[3,5030,5030],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,5021,5021],"c":"(>
            total 0.0)"}}],"d":"()","i":{"d":[38,5011,5011],"c":"(property (> total
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5050,5050],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5060,5060],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,5074,5074],"c":"sender"}}],"d":"()","i":{"d":[22,5059,5059],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[45,5049,5049],"c":"(property (valid-account
            sender))\n           "}}],"docs":"This function describes the main ''gas
            buy'' operation. At this point MINER has been chosen from the pool, and
            will be validated. The SENDER   of this transaction has specified a gas
            limit LIMIT (maximum gas) for    the transaction, and the price is the
            spot price of gas at that time.    The gas buy will be executed prior
            to executing SENDER''s code."},"info":{"d":[771,4556,4556],"c":"(defun
            buy-gas:string (sender:string total:decimal)\n    @doc \"This function
            describes the main ''gas buy'' operation. At this point \\\n    \\MINER
            has been chosen from the pool, and will be validated. The SENDER   \\\n    \\of
            this transaction has specified a gas limit LIMIT (maximum gas) for    \\\n    \\the
            transaction, and the price is the spot price of gas at that time.    \\\n    \\The
            gas buy will be executed prior to executing SENDER''s code.\"\n\n    @model
            [ (property (> total 0.0))\n             (property (valid-account sender))\n           ]\n\n    (validate-account
            sender)\n\n    (enforce-unit total)\n    (enforce (> total 0.0) \"gas
            supply must be a positive quantity\")\n\n    (require-capability (GAS))\n    (with-capability
            (DEBIT sender)\n      (debit sender total))\n    )\n\n  "}}},"i":null}},"i":{"d":[8,10976,10976],"c":"buy-gas
            "}},"info":{"d":[22,10975,10975],"c":"(buy-gas sender total)"}},"rollback":null,"entity":null,"info":{"d":[34,10969,10969],"c":"(step
            (buy-gas sender total))\n    "}},"meta":{"model":[],"docs":null},"i":{"d":[34,10969,10969],"c":"(step
            (buy-gas sender total))\n    "}},{"body":{"exec":{"args":[{"var":{"b":1},"i":{"d":[6,11021,11021],"c":"miner
            "}},{"var":{"b":2},"i":{"d":[12,11027,11027],"c":"miner-guard "}},{"var":{"b":0},"i":{"d":[7,11039,11039],"c":"sender
            "}},{"var":{"b":3},"i":{"d":[5,11046,11046],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"miner","type":"string","info":{"d":[5,5353,5353],"c":"miner"}},{"name":"miner-guard","type":{"guard":null},"info":{"d":[11,5366,5366],"c":"miner-guard"}},{"name":"sender","type":"string","info":{"d":[6,5384,5384],"c":"sender"}},{"name":"total","type":"decimal","info":{"d":[5,5398,5398],"c":"total"}}],"return":"string"},"defName":"redeem-gas","defBody":{"scope":{"list":[{"args":[{"var":{"b":2},"i":{"d":[6,5881,5881],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5864,5864],"c":"validate-account
            "}},"info":{"d":[30,5863,5863],"c":"(validate-account sender)\n    "}},{"args":[{"var":{"b":0},"i":{"d":[5,5911,5911],"c":"miner"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5894,5894],"c":"validate-account
            "}},"info":{"d":[29,5893,5893],"c":"(validate-account miner)\n    "}},{"args":[{"var":{"b":3},"i":{"d":[5,5936,5936],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,5923,5923],"c":"enforce-unit
            "}},"info":{"d":[26,5922,5922],"c":"(enforce-unit total)\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,5969,5969],"c":"GAS"}},"info":{"d":[5,5968,5968],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,5949,5949],"c":"require-capability
            "}},"info":{"d":[31,5948,5948],"c":"(require-capability (GAS))\n    "}},{"body":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[3,6071,6071],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[13,6058,6058],"c":"enforce-unit
            "}},"info":{"d":[25,6057,6057],"c":"(enforce-unit fee)\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[4,6095,6095],"c":"fee
            "}},{"i":{"d":[3,6099,6099],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6092,6092],"c":">=
            "}},"info":{"d":[21,6091,6091],"c":"(>= fee 0.0)\n        "}},{"i":{"d":[37,6112,6112],"c":"\"fee
            must be a non-negative quantity\""},"lit":"fee must be a non-negative
            quantity"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[8,6083,6083],"c":"enforce
            "}},"info":{"d":[76,6082,6082],"c":"(enforce (>= fee 0.0)\n        \"fee
            must be a non-negative quantity\")\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,6171,6171],"c":"refund
            "}},{"i":{"d":[3,6178,6178],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6168,6168],"c":">=
            "}},"info":{"d":[24,6167,6167],"c":"(>= refund 0.0)\n        "}},{"i":{"d":[40,6191,6191],"c":"\"refund
            must be a non-negative quantity\""},"lit":"refund must be a non-negative
            quantity"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[8,6159,6159],"c":"enforce
            "}},"info":{"d":[126,6158,6158],"c":"(enforce (>= refund 0.0)\n        \"refund
            must be a non-negative quantity\")\n\n        ; directly update instead
            of credit\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":{"d":[6,6309,6309],"c":"sender"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6302,6302],"c":"CREDIT
            "}},"info":{"d":[24,6301,6301],"c":"(CREDIT sender)\n        "}},{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,6332,6332],"c":"refund
            "}},{"i":{"d":[3,6339,6339],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6330,6330],"c":">
            "}},"info":{"d":[25,6329,6329],"c":"(> refund 0.0)\n          "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[11,6365,6365],"c":"coin-table
            "}},{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":{"d":[19,6376,6376],"c":"sender\n            "}},{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[11,6440,6440],"c":"coin-table
            "}},{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":null}},"i":{"d":[21,6451,6451],"c":"sender\n              "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,6488,6488],"c":"balance
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[6,6496,6496],"c":"refund"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6486,6486],"c":"+
            "}},"info":{"d":[19,6485,6485],"c":"(+ balance refund) "}}},"keyorder":["balance"],"type":"*","i":{"d":[33,6472,6472],"c":"{
            \"balance\": (+ balance refund) }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6433,6433],"c":"update
            "}},"info":{"d":[74,6432,6432],"c":"(update coin-table sender\n              {
            \"balance\": (+ balance refund) })"}}],"type":"*","i":{"d":[165,6354,6354],"c":"(with-read
            coin-table sender\n            { \"balance\" := balance }\n            (update
            coin-table sender\n              { \"balance\": (+ balance refund) }))\n\n          "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"z","constraint":[]},"info":{"d":[8,6410,6410],"c":"balance
            "}},"val":{"i":{"d":[10,6397,6397],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[37,6395,6395],"c":"{
            \"balance\" := balance }\n            "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":null}},"i":null}},"i":{"d":[10,6355,6355],"c":"with-read
            "}},"info":{"d":[165,6354,6354],"c":"(with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          "}},{"i":{"d":[6,6519,6519],"c":"\"noop\""},"lit":"noop"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"if"}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6326,6326],"c":"if
            "}},"info":{"d":[201,6325,6325],"c":"(if (> refund 0.0)\n          (with-read
            coin-table sender\n            { \"balance\" := balance }\n            (update
            coin-table sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\")"}}],"type":"*","i":{"d":[201,6325,6325],"c":"(if
            (> refund 0.0)\n          (with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          \"noop\")"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":null}},"i":{"d":[16,6285,6285],"c":"with-capability
            "}},"info":{"d":[251,6284,6284],"c":"(with-capability (CREDIT sender)\n        (if
            (> refund 0.0)\n          (with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[5,6560,6560],"c":"miner"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6553,6553],"c":"CREDIT
            "}},"info":{"d":[23,6552,6552],"c":"(CREDIT miner)\n        "}},{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[4,6582,6582],"c":"fee
            "}},{"i":{"d":[3,6586,6586],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6580,6580],"c":">
            "}},"info":{"d":[22,6579,6579],"c":"(> fee 0.0)\n          "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[6,6609,6609],"c":"miner
            "}},{"var":{"f":{"var":{"f":{"var":{"b":1},"i":null}},"i":null}},"i":{"d":[12,6615,6615],"c":"miner-guard
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[3,6627,6627],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6602,6602],"c":"credit
            "}},"info":{"d":[41,6601,6601],"c":"(credit miner miner-guard fee)\n          "}},{"i":{"d":[6,6642,6642],"c":"\"noop\""},"lit":"noop"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"if"}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6576,6576],"c":"if
            "}},"info":{"d":[74,6575,6575],"c":"(if (> fee 0.0)\n          (credit
            miner miner-guard fee)\n          \"noop\")"}}],"type":"*","i":{"d":[74,6575,6575],"c":"(if
            (> fee 0.0)\n          (credit miner miner-guard fee)\n          \"noop\")"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":null}},"i":{"d":[16,6536,6536],"c":"with-capability
            "}},"info":{"d":[122,6535,6535],"c":"(with-capability (CREDIT miner)\n        (if
            (> fee 0.0)\n          (credit miner miner-guard fee)\n          \"noop\"))\n      "}}],"type":"*","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}},"pairs":[{"arg":{"name":"refund","type":{"tag":"TypeVar","name":"y","constraint":[]},"info":{"d":[7,6027,6027],"c":"refund
            "}},"val":{"args":[{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[6,6037,6037],"c":"total
            "}},{"var":{"b":0},"i":{"d":[3,6043,6043],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,6035,6035],"c":"-
            "}},"info":{"d":[13,6034,6034],"c":"(- total fee)"}}}],"type":"let","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}],"type":"*","i":null}},"pairs":[{"arg":{"name":"fee","type":{"tag":"TypeVar","name":"x","constraint":[]},"info":{"d":[4,5993,5993],"c":"fee
            "}},"val":{"args":[{"i":{"d":[5,6011,6011],"c":"\"fee\""},"lit":"fee"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read-decimal"}},"i":null}},"i":{"d":[13,5998,5998],"c":"read-decimal
            "}},"info":{"d":[20,5997,5997],"c":"(read-decimal \"fee\")"}}}],"type":"let","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}],"type":"*","i":{"d":[1342,5327,5327],"c":"(defun
            redeem-gas:string (miner:string miner-guard:guard sender:string total:decimal)\n    @doc
            \"This function describes the main ''redeem gas'' operation. At this    \\\n    \\point,
            the SENDER''s transaction has been executed, and the gas that      \\\n    \\was
            charged has been calculated. MINER will be credited the gas cost,    \\\n    \\and
            SENDER will receive the remainder up to the limit\"\n\n    @model [ (property
            (> total 0.0))\n             (property (valid-account sender))\n             (property
            (valid-account miner))\n           ]\n\n    (validate-account sender)\n    (validate-account
            miner)\n    (enforce-unit total)\n\n    (require-capability (GAS))\n    (let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,5728,5728],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,5738,5738],"c":"> "}},{"atom":"total","q":[],"i":{"d":[6,5740,5740],"c":"total
            "}},{"i":{"d":[3,5746,5746],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,5737,5737],"c":"(>
            total 0.0)"}}],"d":"()","i":{"d":[38,5727,5727],"c":"(property (> total
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5766,5766],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5776,5776],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,5790,5790],"c":"sender"}}],"d":"()","i":{"d":[22,5775,5775],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[47,5765,5765],"c":"(property (valid-account
            sender))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5813,5813],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5823,5823],"c":"valid-account
            "}},{"atom":"miner","q":[],"i":{"d":[5,5837,5837],"c":"miner"}}],"d":"()","i":{"d":[21,5822,5822],"c":"(valid-account
            miner)"}}],"d":"()","i":{"d":[44,5812,5812],"c":"(property (valid-account
            miner))\n           "}}],"docs":"This function describes the main ''redeem
            gas'' operation. At this    point, the SENDER''s transaction has been
            executed, and the gas that      was charged has been calculated. MINER
            will be credited the gas cost,    and SENDER will receive the remainder
            up to the limit"},"info":{"d":[1342,5327,5327],"c":"(defun redeem-gas:string
            (miner:string miner-guard:guard sender:string total:decimal)\n    @doc
            \"This function describes the main ''redeem gas'' operation. At this    \\\n    \\point,
            the SENDER''s transaction has been executed, and the gas that      \\\n    \\was
            charged has been calculated. MINER will be credited the gas cost,    \\\n    \\and
            SENDER will receive the remainder up to the limit\"\n\n    @model [ (property
            (> total 0.0))\n             (property (valid-account sender))\n             (property
            (valid-account miner))\n           ]\n\n    (validate-account sender)\n    (validate-account
            miner)\n    (enforce-unit total)\n\n    (require-capability (GAS))\n    (let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    )\n\n  "}}},"i":null}},"i":{"d":[11,11010,11010],"c":"redeem-gas
            "}},"info":{"d":[43,11009,11009],"c":"(redeem-gas miner miner-guard sender
            total)"}},"rollback":null,"entity":null,"info":{"d":[55,11003,11003],"c":"(step
            (redeem-gas miner miner-guard sender total))\n    "}},"meta":{"model":[],"docs":null},"i":{"d":[55,11003,11003],"c":"(step
            (redeem-gas miner miner-guard sender total))\n    "}}],"type":"*","i":{"d":[978,10085,10085],"c":"(defpact
            fund-tx (sender:string miner:string miner-guard:guard total:decimal)\n    @doc
            \"''fund-tx'' is a special pact to fund a transaction in two steps,     \\\n    \\with
            the actual transaction transpiring in the middle:                   \\\n    \\                                                                         \\\n    \\  1)
            A buying phase, debiting the sender for total gas and fee, yielding \\\n    \\     TX_MAX_CHARGE.                                                      \\\n    \\  2)
            A settlement phase, resuming TX_MAX_CHARGE, and allocating to the   \\\n    \\     coinbase
            account for used gas and fee, and sender account for bal-  \\\n    \\     ance
            (unused gas, if any).\"\n\n    @model [ (property (> total 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account miner))\n             ;(property
            conserves-mass) not supported yet\n           ]\n\n    (step (buy-gas
            sender total))\n    (step (redeem-gas miner miner-guard sender total))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,10776,10776],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,10786,10786],"c":"> "}},{"atom":"total","q":[],"i":{"d":[6,10788,10788],"c":"total
            "}},{"i":{"d":[3,10794,10794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,10785,10785],"c":"(>
            total 0.0)"}}],"d":"()","i":{"d":[38,10775,10775],"c":"(property (> total
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,10814,10814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,10824,10824],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,10838,10838],"c":"sender"}}],"d":"()","i":{"d":[22,10823,10823],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[47,10813,10813],"c":"(property (valid-account
            sender))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,10861,10861],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,10871,10871],"c":"valid-account
            "}},{"atom":"miner","q":[],"i":{"d":[5,10885,10885],"c":"miner"}}],"d":"()","i":{"d":[21,10870,10870],"c":"(valid-account
            miner)"}}],"d":"()","i":{"d":[102,10860,10860],"c":"(property (valid-account
            miner))\n             ;(property conserves-mass) not supported yet\n           "}}],"docs":"''fund-tx''
            is a special pact to fund a transaction in two steps,     with the actual
            transaction transpiring in the middle:                                                                                              1)
            A buying phase, debiting the sender for total gas and fee, yielding      TX_MAX_CHARGE.                                                        2)
            A settlement phase, resuming TX_MAX_CHARGE, and allocating to the        coinbase
            account for used gas and fee, and sender account for bal-       ance (unused
            gas, if any)."},"info":{"d":[978,10085,10085],"c":"(defpact fund-tx (sender:string
            miner:string miner-guard:guard total:decimal)\n    @doc \"''fund-tx''
            is a special pact to fund a transaction in two steps,     \\\n    \\with
            the actual transaction transpiring in the middle:                   \\\n    \\                                                                         \\\n    \\  1)
            A buying phase, debiting the sender for total gas and fee, yielding \\\n    \\     TX_MAX_CHARGE.                                                      \\\n    \\  2)
            A settlement phase, resuming TX_MAX_CHARGE, and allocating to the   \\\n    \\     coinbase
            account for used gas and fee, and sender account for bal-  \\\n    \\     ance
            (unused gas, if any).\"\n\n    @model [ (property (> total 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account miner))\n             ;(property
            conserves-mass) not supported yet\n           ]\n\n    (step (buy-gas
            sender total))\n    (step (redeem-gas miner miner-guard sender total))\n    )\n\n  "}}},"create-account":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,6699,6699],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,6714,6714],"c":"guard"}}],"return":"string"},"defName":"create-account","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,6800,6800],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,6783,6783],"c":"validate-account
            "}},"info":{"d":[32,6782,6782],"c":"(validate-account account)\n\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,6822,6822],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,6833,6833],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[12,6885,6885],"c":"guard\n      "}},"balance":{"i":{"d":[10,6861,6861],"c":"0.0\n      "},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[51,6847,6847],"c":"{
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      }"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"insert"}},"i":null}},"i":{"d":[7,6815,6815],"c":"insert
            "}},"info":{"d":[90,6814,6814],"c":"(insert coin-table account\n      {
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    "}}],"type":"*","i":{"d":[240,6669,6669],"c":"(defun
            create-account:string (account:string guard:guard)\n    @model [ (property
            (valid-account account)) ]\n\n    (validate-account account)\n\n    (insert
            coin-table account\n      { \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,6741,6741],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,6751,6751],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,6765,6765],"c":"account"}}],"d":"()","i":{"d":[23,6750,6750],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[35,6740,6740],"c":"(property (valid-account
            account)) "}}],"docs":" Create ACCOUNT with 0.0 balance, with GUARD controlling
            access."},"info":{"d":[240,6669,6669],"c":"(defun create-account:string
            (account:string guard:guard)\n    @model [ (property (valid-account account))
            ]\n\n    (validate-account account)\n\n    (insert coin-table account\n      {
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  "}}},"allocation-table":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"allocation-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"allocation-schema","meta":{"model":[],"docs":"Genesis
            allocation registry"},"i":{"d":[186,14086,14086],"c":"(defschema allocation-schema\n    @doc
            \"Genesis allocation registry\"\n    ;@model [ (invariant (>= balance
            0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,14204,14204],"c":"balance"}},{"name":"date","type":"time","info":{"d":[4,14224,14224],"c":"date"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,14238,14238],"c":"guard"}},{"name":"redeemed","type":"bool","info":{"d":[8,14254,14254],"c":"redeemed"}}]}},"i":{"d":[17,14300,14300],"c":"allocation-schema"}},"i":{"d":[51,14272,14272],"c":"(deftable
            allocation-table:{allocation-schema})\n\n  "}}},"MINIMUM_ACCOUNT_LENGTH":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"DEBIT":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"redeem-gas":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"miner","type":"string","info":{"d":[5,5353,5353],"c":"miner"}},{"name":"miner-guard","type":{"guard":null},"info":{"d":[11,5366,5366],"c":"miner-guard"}},{"name":"sender","type":"string","info":{"d":[6,5384,5384],"c":"sender"}},{"name":"total","type":"decimal","info":{"d":[5,5398,5398],"c":"total"}}],"return":"string"},"defName":"redeem-gas","defBody":{"scope":{"list":[{"args":[{"var":{"b":2},"i":{"d":[6,5881,5881],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5864,5864],"c":"validate-account
            "}},"info":{"d":[30,5863,5863],"c":"(validate-account sender)\n    "}},{"args":[{"var":{"b":0},"i":{"d":[5,5911,5911],"c":"miner"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5894,5894],"c":"validate-account
            "}},"info":{"d":[29,5893,5893],"c":"(validate-account miner)\n    "}},{"args":[{"var":{"b":3},"i":{"d":[5,5936,5936],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,5923,5923],"c":"enforce-unit
            "}},"info":{"d":[26,5922,5922],"c":"(enforce-unit total)\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,5969,5969],"c":"GAS"}},"info":{"d":[5,5968,5968],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,5949,5949],"c":"require-capability
            "}},"info":{"d":[31,5948,5948],"c":"(require-capability (GAS))\n    "}},{"body":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[3,6071,6071],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[13,6058,6058],"c":"enforce-unit
            "}},"info":{"d":[25,6057,6057],"c":"(enforce-unit fee)\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[4,6095,6095],"c":"fee
            "}},{"i":{"d":[3,6099,6099],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6092,6092],"c":">=
            "}},"info":{"d":[21,6091,6091],"c":"(>= fee 0.0)\n        "}},{"i":{"d":[37,6112,6112],"c":"\"fee
            must be a non-negative quantity\""},"lit":"fee must be a non-negative
            quantity"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[8,6083,6083],"c":"enforce
            "}},"info":{"d":[76,6082,6082],"c":"(enforce (>= fee 0.0)\n        \"fee
            must be a non-negative quantity\")\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,6171,6171],"c":"refund
            "}},{"i":{"d":[3,6178,6178],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6168,6168],"c":">=
            "}},"info":{"d":[24,6167,6167],"c":"(>= refund 0.0)\n        "}},{"i":{"d":[40,6191,6191],"c":"\"refund
            must be a non-negative quantity\""},"lit":"refund must be a non-negative
            quantity"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":null}},"i":{"d":[8,6159,6159],"c":"enforce
            "}},"info":{"d":[126,6158,6158],"c":"(enforce (>= refund 0.0)\n        \"refund
            must be a non-negative quantity\")\n\n        ; directly update instead
            of credit\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":{"d":[6,6309,6309],"c":"sender"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6302,6302],"c":"CREDIT
            "}},"info":{"d":[24,6301,6301],"c":"(CREDIT sender)\n        "}},{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,6332,6332],"c":"refund
            "}},{"i":{"d":[3,6339,6339],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6330,6330],"c":">
            "}},"info":{"d":[25,6329,6329],"c":"(> refund 0.0)\n          "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[11,6365,6365],"c":"coin-table
            "}},{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":{"d":[19,6376,6376],"c":"sender\n            "}},{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[11,6440,6440],"c":"coin-table
            "}},{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"b":2},"i":null}},"i":null}},"i":null}},"i":{"d":[21,6451,6451],"c":"sender\n              "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,6488,6488],"c":"balance
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[6,6496,6496],"c":"refund"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6486,6486],"c":"+
            "}},"info":{"d":[19,6485,6485],"c":"(+ balance refund) "}}},"keyorder":["balance"],"type":"*","i":{"d":[33,6472,6472],"c":"{
            \"balance\": (+ balance refund) }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6433,6433],"c":"update
            "}},"info":{"d":[74,6432,6432],"c":"(update coin-table sender\n              {
            \"balance\": (+ balance refund) })"}}],"type":"*","i":{"d":[165,6354,6354],"c":"(with-read
            coin-table sender\n            { \"balance\" := balance }\n            (update
            coin-table sender\n              { \"balance\": (+ balance refund) }))\n\n          "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"z","constraint":[]},"info":{"d":[8,6410,6410],"c":"balance
            "}},"val":{"i":{"d":[10,6397,6397],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[37,6395,6395],"c":"{
            \"balance\" := balance }\n            "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":null}},"i":null}},"i":{"d":[10,6355,6355],"c":"with-read
            "}},"info":{"d":[165,6354,6354],"c":"(with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          "}},{"i":{"d":[6,6519,6519],"c":"\"noop\""},"lit":"noop"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"if"}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6326,6326],"c":"if
            "}},"info":{"d":[201,6325,6325],"c":"(if (> refund 0.0)\n          (with-read
            coin-table sender\n            { \"balance\" := balance }\n            (update
            coin-table sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\")"}}],"type":"*","i":{"d":[201,6325,6325],"c":"(if
            (> refund 0.0)\n          (with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          \"noop\")"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":null}},"i":{"d":[16,6285,6285],"c":"with-capability
            "}},"info":{"d":[251,6284,6284],"c":"(with-capability (CREDIT sender)\n        (if
            (> refund 0.0)\n          (with-read coin-table sender\n            {
            \"balance\" := balance }\n            (update coin-table sender\n              {
            \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      "}},{"args":[{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[5,6560,6560],"c":"miner"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6553,6553],"c":"CREDIT
            "}},"info":{"d":[23,6552,6552],"c":"(CREDIT miner)\n        "}},{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[4,6582,6582],"c":"fee
            "}},{"i":{"d":[3,6586,6586],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":null}},"i":null}},"i":{"d":[2,6580,6580],"c":">
            "}},"info":{"d":[22,6579,6579],"c":"(> fee 0.0)\n          "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"b":0},"i":null}},"i":null}},"i":{"d":[6,6609,6609],"c":"miner
            "}},{"var":{"f":{"var":{"f":{"var":{"b":1},"i":null}},"i":null}},"i":{"d":[12,6615,6615],"c":"miner-guard
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[3,6627,6627],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":null}},"i":null}},"i":{"d":[7,6602,6602],"c":"credit
            "}},"info":{"d":[41,6601,6601],"c":"(credit miner miner-guard fee)\n          "}},{"i":{"d":[6,6642,6642],"c":"\"noop\""},"lit":"noop"}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"if"}},"i":null}},"i":null}},"i":null}},"i":{"d":[3,6576,6576],"c":"if
            "}},"info":{"d":[74,6575,6575],"c":"(if (> fee 0.0)\n          (credit
            miner miner-guard fee)\n          \"noop\")"}}],"type":"*","i":{"d":[74,6575,6575],"c":"(if
            (> fee 0.0)\n          (credit miner miner-guard fee)\n          \"noop\")"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":null}},"i":{"d":[16,6536,6536],"c":"with-capability
            "}},"info":{"d":[122,6535,6535],"c":"(with-capability (CREDIT miner)\n        (if
            (> fee 0.0)\n          (credit miner miner-guard fee)\n          \"noop\"))\n      "}}],"type":"*","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}},"pairs":[{"arg":{"name":"refund","type":{"tag":"TypeVar","name":"y","constraint":[]},"info":{"d":[7,6027,6027],"c":"refund
            "}},"val":{"args":[{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[6,6037,6037],"c":"total
            "}},{"var":{"b":0},"i":{"d":[3,6043,6043],"c":"fee"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,6035,6035],"c":"-
            "}},"info":{"d":[13,6034,6034],"c":"(- total fee)"}}}],"type":"let","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}],"type":"*","i":null}},"pairs":[{"arg":{"name":"fee","type":{"tag":"TypeVar","name":"x","constraint":[]},"info":{"d":[4,5993,5993],"c":"fee
            "}},"val":{"args":[{"i":{"d":[5,6011,6011],"c":"\"fee\""},"lit":"fee"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read-decimal"}},"i":null}},"i":{"d":[13,5998,5998],"c":"read-decimal
            "}},"info":{"d":[20,5997,5997],"c":"(read-decimal \"fee\")"}}}],"type":"let","i":{"d":[685,5979,5979],"c":"(let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    "}}],"type":"*","i":{"d":[1342,5327,5327],"c":"(defun
            redeem-gas:string (miner:string miner-guard:guard sender:string total:decimal)\n    @doc
            \"This function describes the main ''redeem gas'' operation. At this    \\\n    \\point,
            the SENDER''s transaction has been executed, and the gas that      \\\n    \\was
            charged has been calculated. MINER will be credited the gas cost,    \\\n    \\and
            SENDER will receive the remainder up to the limit\"\n\n    @model [ (property
            (> total 0.0))\n             (property (valid-account sender))\n             (property
            (valid-account miner))\n           ]\n\n    (validate-account sender)\n    (validate-account
            miner)\n    (enforce-unit total)\n\n    (require-capability (GAS))\n    (let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,5728,5728],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,5738,5738],"c":"> "}},{"atom":"total","q":[],"i":{"d":[6,5740,5740],"c":"total
            "}},{"i":{"d":[3,5746,5746],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,5737,5737],"c":"(>
            total 0.0)"}}],"d":"()","i":{"d":[38,5727,5727],"c":"(property (> total
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5766,5766],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5776,5776],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,5790,5790],"c":"sender"}}],"d":"()","i":{"d":[22,5775,5775],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[47,5765,5765],"c":"(property (valid-account
            sender))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5813,5813],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5823,5823],"c":"valid-account
            "}},{"atom":"miner","q":[],"i":{"d":[5,5837,5837],"c":"miner"}}],"d":"()","i":{"d":[21,5822,5822],"c":"(valid-account
            miner)"}}],"d":"()","i":{"d":[44,5812,5812],"c":"(property (valid-account
            miner))\n           "}}],"docs":"This function describes the main ''redeem
            gas'' operation. At this    point, the SENDER''s transaction has been
            executed, and the gas that      was charged has been calculated. MINER
            will be credited the gas cost,    and SENDER will receive the remainder
            up to the limit"},"info":{"d":[1342,5327,5327],"c":"(defun redeem-gas:string
            (miner:string miner-guard:guard sender:string total:decimal)\n    @doc
            \"This function describes the main ''redeem gas'' operation. At this    \\\n    \\point,
            the SENDER''s transaction has been executed, and the gas that      \\\n    \\was
            charged has been calculated. MINER will be credited the gas cost,    \\\n    \\and
            SENDER will receive the remainder up to the limit\"\n\n    @model [ (property
            (> total 0.0))\n             (property (valid-account sender))\n             (property
            (valid-account miner))\n           ]\n\n    (validate-account sender)\n    (validate-account
            miner)\n    (enforce-unit total)\n\n    (require-capability (GAS))\n    (let*\n      ((fee
            (read-decimal \"fee\"))\n       (refund (- total fee)))\n\n      (enforce-unit
            fee)\n      (enforce (>= fee 0.0)\n        \"fee must be a non-negative
            quantity\")\n\n      (enforce (>= refund 0.0)\n        \"refund must be
            a non-negative quantity\")\n\n        ; directly update instead of credit\n      (with-capability
            (CREDIT sender)\n        (if (> refund 0.0)\n          (with-read coin-table
            sender\n            { \"balance\" := balance }\n            (update coin-table
            sender\n              { \"balance\": (+ balance refund) }))\n\n          \"noop\"))\n\n      (with-capability
            (CREDIT miner)\n        (if (> fee 0.0)\n          (credit miner miner-guard
            fee)\n          \"noop\"))\n      )\n\n    )\n\n  "}}},"precision":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[],"return":"integer"},"defName":"precision","defBody":{"scope":{"list":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,7614,7614],"c":"MINIMUM_PRECISION"}}],"type":"*","i":{"d":[58,7578,7578],"c":"(defun
            precision:integer\n    ()\n    MINIMUM_PRECISION)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Return
            the maximum allowed decimal precision."},"info":{"d":[58,7578,7578],"c":"(defun
            precision:integer\n    ()\n    MINIMUM_PRECISION)\n\n  "}}},"buy-gas":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,4579,4579],"c":"sender"}},{"name":"total","type":"decimal","info":{"d":[5,4593,4593],"c":"total"}}],"return":"string"},"defName":"buy-gas","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[6,5119,5119],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,5102,5102],"c":"validate-account
            "}},"info":{"d":[31,5101,5101],"c":"(validate-account sender)\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[5,5146,5146],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,5133,5133],"c":"enforce-unit
            "}},"info":{"d":[25,5132,5132],"c":"(enforce-unit total)\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[6,5169,5169],"c":"total
            "}},{"i":{"d":[3,5175,5175],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,5167,5167],"c":">
            "}},"info":{"d":[14,5166,5166],"c":"(> total 0.0) "}},{"i":{"d":[40,5180,5180],"c":"\"gas
            supply must be a positive quantity\""},"lit":"gas supply must be a positive
            quantity"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,5158,5158],"c":"enforce
            "}},"info":{"d":[70,5157,5157],"c":"(enforce (> total 0.0) \"gas supply
            must be a positive quantity\")\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,5248,5248],"c":"GAS"}},"info":{"d":[5,5247,5247],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,5228,5228],"c":"require-capability
            "}},"info":{"d":[31,5227,5227],"c":"(require-capability (GAS))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,5282,5282],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,5276,5276],"c":"DEBIT
            "}},"info":{"d":[21,5275,5275],"c":"(DEBIT sender)\n      "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,5303,5303],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[5,5310,5310],"c":"total"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"i":null}},"i":{"d":[6,5297,5297],"c":"debit
            "}},"info":{"d":[20,5296,5296],"c":"(debit sender total)"}}],"type":"*","i":{"d":[20,5296,5296],"c":"(debit
            sender total)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,5259,5259],"c":"with-capability
            "}},"info":{"d":[64,5258,5258],"c":"(with-capability (DEBIT sender)\n      (debit
            sender total))\n    "}}],"type":"*","i":{"d":[771,4556,4556],"c":"(defun
            buy-gas:string (sender:string total:decimal)\n    @doc \"This function
            describes the main ''gas buy'' operation. At this point \\\n    \\MINER
            has been chosen from the pool, and will be validated. The SENDER   \\\n    \\of
            this transaction has specified a gas limit LIMIT (maximum gas) for    \\\n    \\the
            transaction, and the price is the spot price of gas at that time.    \\\n    \\The
            gas buy will be executed prior to executing SENDER''s code.\"\n\n    @model
            [ (property (> total 0.0))\n             (property (valid-account sender))\n           ]\n\n    (validate-account
            sender)\n\n    (enforce-unit total)\n    (enforce (> total 0.0) \"gas
            supply must be a positive quantity\")\n\n    (require-capability (GAS))\n    (with-capability
            (DEBIT sender)\n      (debit sender total))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,5012,5012],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,5022,5022],"c":"> "}},{"atom":"total","q":[],"i":{"d":[6,5024,5024],"c":"total
            "}},{"i":{"d":[3,5030,5030],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[13,5021,5021],"c":"(>
            total 0.0)"}}],"d":"()","i":{"d":[38,5011,5011],"c":"(property (> total
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,5050,5050],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,5060,5060],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,5074,5074],"c":"sender"}}],"d":"()","i":{"d":[22,5059,5059],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[45,5049,5049],"c":"(property (valid-account
            sender))\n           "}}],"docs":"This function describes the main ''gas
            buy'' operation. At this point MINER has been chosen from the pool, and
            will be validated. The SENDER   of this transaction has specified a gas
            limit LIMIT (maximum gas) for    the transaction, and the price is the
            spot price of gas at that time.    The gas buy will be executed prior
            to executing SENDER''s code."},"info":{"d":[771,4556,4556],"c":"(defun
            buy-gas:string (sender:string total:decimal)\n    @doc \"This function
            describes the main ''gas buy'' operation. At this point \\\n    \\MINER
            has been chosen from the pool, and will be validated. The SENDER   \\\n    \\of
            this transaction has specified a gas limit LIMIT (maximum gas) for    \\\n    \\the
            transaction, and the price is the spot price of gas at that time.    \\\n    \\The
            gas buy will be executed prior to executing SENDER''s code.\"\n\n    @model
            [ (property (> total 0.0))\n             (property (valid-account sender))\n           ]\n\n    (validate-account
            sender)\n\n    (enforce-unit total)\n    (enforce (> total 0.0) \"gas
            supply must be a positive quantity\")\n\n    (require-capability (GAS))\n    (with-capability
            (DEBIT sender)\n      (debit sender total))\n    )\n\n  "}}},"COIN_CHARSET":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"debit":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"allocation-schema":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"allocation-schema","meta":{"model":[],"docs":"Genesis
            allocation registry"},"i":{"d":[186,14086,14086],"c":"(defschema allocation-schema\n    @doc
            \"Genesis allocation registry\"\n    ;@model [ (invariant (>= balance
            0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,14204,14204],"c":"balance"}},{"name":"date","type":"time","info":{"d":[4,14224,14224],"c":"date"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,14238,14238],"c":"guard"}},{"name":"redeemed","type":"bool","info":{"d":[8,14254,14254],"c":"redeemed"}}]}},"gas-only":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"u","constraint":[]}},"defName":"gas-only","defBody":{"scope":{"list":[{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,4328,4328],"c":"GAS"}},"info":{"d":[5,4327,4327],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,4308,4308],"c":"require-capability
            "}},"info":{"d":[26,4307,4307],"c":"(require-capability (GAS))"}}],"type":"*","i":{"d":[96,4242,4242],"c":"(defun
            gas-only ()\n    \"Predicate for gas-only user guards.\"\n    (require-capability
            (GAS)))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Predicate
            for gas-only user guards."},"info":{"d":[96,4242,4242],"c":"(defun gas-only
            ()\n    \"Predicate for gas-only user guards.\"\n    (require-capability
            (GAS)))\n\n  "}}},"coin-schema":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"transfer-create":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,8412,8412],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,8432,8432],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,8454,8454],"c":"receiver-guard"}},{"name":"amount","type":"decimal","info":{"d":[6,8481,8481],"c":"amount"}}],"return":"string"},"defName":"transfer-create","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,8558,8558],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[8,8565,8565],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,8555,8555],"c":"!=
            "}},"info":{"d":[27,8554,8554],"c":"(!= sender receiver)\n      "}},{"i":{"d":[45,8581,8581],"c":"\"sender
            cannot be the receiver of a transfer\""},"lit":"sender cannot be the receiver
            of a transfer"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,8546,8546],"c":"enforce
            "}},"info":{"d":[88,8545,8545],"c":"(enforce (!= sender receiver)\n      \"sender
            cannot be the receiver of a transfer\")\n\n    "}},{"args":[{"var":{"b":0},"i":{"d":[6,8651,8651],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,8634,8634],"c":"validate-account
            "}},"info":{"d":[30,8633,8633],"c":"(validate-account sender)\n    "}},{"args":[{"var":{"b":1},"i":{"d":[8,8681,8681],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,8664,8664],"c":"validate-account
            "}},"info":{"d":[33,8663,8663],"c":"(validate-account receiver)\n\n    "}},{"args":[{"args":[{"var":{"b":3},"i":{"d":[7,8708,8708],"c":"amount
            "}},{"i":{"d":[3,8715,8715],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,8706,8706],"c":">
            "}},"info":{"d":[21,8705,8705],"c":"(> amount 0.0)\n      "}},{"i":{"d":[34,8726,8726],"c":"\"transfer
            amount must be positive\""},"lit":"transfer amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,8697,8697],"c":"enforce
            "}},"info":{"d":[71,8696,8696],"c":"(enforce (> amount 0.0)\n      \"transfer
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":3},"i":{"d":[6,8781,8781],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,8768,8768],"c":"enforce-unit
            "}},"info":{"d":[27,8767,8767],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,8821,8821],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[9,8828,8828],"c":"receiver "}},{"var":{"b":3},"i":{"d":[6,8837,8837],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,2322,2322],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,2344,2344],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2430,2430],"c":"newbal
            "}},{"i":{"d":[3,2437,2437],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,2427,2427],"c":">=
            "}},"info":{"d":[24,2426,2426],"c":"(>= newbal 0.0)\n        "}},{"args":[{"i":{"d":[35,2458,2458],"c":"\"TRANSFER
            exceeded for balance {}\" "},"lit":"TRANSFER exceeded for balance {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,2494,2494],"c":"managed"}}],"type":{"tag":"TypeVar","name":"j","constraint":[]},"i":{"d":[9,2493,2493],"c":"[managed]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[7,2451,2451],"c":"format
            "}},"info":{"d":[53,2450,2450],"c":"(format \"TRANSFER exceeded for balance
            {}\" [managed])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,2418,2418],"c":"enforce
            "}},"info":{"d":[94,2417,2417],"c":"(enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      "}},{"var":{"b":0},"i":{"d":[6,2511,2511],"c":"newbal"}}],"type":"*","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}},"pairs":[{"arg":{"name":"newbal","type":{"tag":"TypeVar","name":"i","constraint":[]},"info":{"d":[7,2380,2380],"c":"newbal
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[8,2390,2390],"c":"managed
            "}},{"var":{"b":1},"i":{"d":[9,2398,2398],"c":"requested"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":{"d":[2,2388,2388],"c":"-
            "}},"info":{"d":[21,2387,2387],"c":"(- managed requested)"}}}],"type":"let","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}],"type":"*","i":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"i":{"d":[17,2050,2050],"c":"TRANSFER-mgr\n    "}}},"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1967,1967],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,1987,1987],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,2009,2009],"c":"amount"}}],"return":"bool"},"defName":"TRANSFER","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2080,2080],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[8,2087,2087],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,2077,2077],"c":"!=
            "}},"info":{"d":[21,2076,2076],"c":"(!= sender receiver) "}},{"i":{"d":[26,2097,2097],"c":"\"same
            sender and receiver\""},"lit":"same sender and receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2068,2068],"c":"enforce
            "}},"info":{"d":[62,2067,2067],"c":"(enforce (!= sender receiver) \"same
            sender and receiver\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,2143,2143],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,2130,2130],"c":"enforce-unit
            "}},"info":{"d":[26,2129,2129],"c":"(enforce-unit amount)\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,2167,2167],"c":"amount
            "}},{"i":{"d":[3,2174,2174],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,2165,2165],"c":">
            "}},"info":{"d":[15,2164,2164],"c":"(> amount 0.0) "}},{"i":{"d":[17,2179,2179],"c":"\"Positive
            amount\""},"lit":"Positive amount"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2156,2156],"c":"enforce
            "}},"info":{"d":[47,2155,2155],"c":"(enforce (> amount 0.0) \"Positive
            amount\")\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,2229,2229],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,2223,2223],"c":"DEBIT
            "}},"info":{"d":[14,2222,2222],"c":"(DEBIT sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2203,2203],"c":"compose-capability
            "}},"info":{"d":[40,2202,2202],"c":"(compose-capability (DEBIT sender))\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[8,2270,2270],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,2263,2263],"c":"CREDIT
            "}},"info":{"d":[17,2262,2262],"c":"(CREDIT receiver)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2243,2243],"c":"compose-capability
            "}},"info":{"d":[41,2242,2242],"c":"(compose-capability (CREDIT receiver))\n  "}}],"type":"*","i":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"i":null}},"i":{"d":[9,8812,8812],"c":"TRANSFER
            "}},"info":{"d":[40,8811,8811],"c":"(TRANSFER sender receiver amount)\n      "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,8858,8858],"c":"sender
            "}},{"var":{"b":3},"i":{"d":[6,8865,8865],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"i":null}},"i":{"d":[6,8852,8852],"c":"debit
            "}},"info":{"d":[28,8851,8851],"c":"(debit sender amount)\n      "}},{"args":[{"var":{"b":1},"i":{"d":[9,8887,8887],"c":"receiver
            "}},{"var":{"b":2},"i":{"d":[15,8896,8896],"c":"receiver-guard "}},{"var":{"b":3},"i":{"d":[6,8911,8911],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":{"d":[7,8880,8880],"c":"credit
            "}},"info":{"d":[39,8879,8879],"c":"(credit receiver receiver-guard amount)"}}],"type":"*","i":{"d":[28,8851,8851],"c":"(debit
            sender amount)\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,8795,8795],"c":"with-capability
            "}},"info":{"d":[130,8794,8794],"c":"(with-capability (TRANSFER sender
            receiver amount)\n      (debit sender amount)\n      (credit receiver
            receiver-guard amount))\n    "}}],"type":"*","i":{"d":[553,8376,8376],"c":"(defun
            transfer-create:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal
            )\n\n    @model [ (property conserves-mass) ]\n\n    (enforce (!= sender
            receiver)\n      \"sender cannot be the receiver of a transfer\")\n\n    (validate-account
            sender)\n    (validate-account receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer
            amount must be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability
            (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit
            receiver receiver-guard amount))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,8513,8513],"c":"property
            "}},{"atom":"conserves-mass","q":[],"i":{"d":[14,8522,8522],"c":"conserves-mass"}}],"d":"()","i":{"d":[26,8512,8512],"c":"(property
            conserves-mass) "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1984,1984],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,1994,1994],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,1996,1996],"c":"amount
            "}},{"i":{"d":[3,2003,2003],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,1993,1993],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[40,1983,1983],"c":"(property (> amount
            0.0))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2024,2024],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2034,2034],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,2037,2037],"c":"sender
            "}},{"i":{"d":[2,2044,2044],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,2033,2033],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[40,2023,2023],"c":"(property (!= sender
            \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2064,2064],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2074,2074],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,2077,2077],"c":"receiver
            "}},{"i":{"d":[2,2086,2086],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,2073,2073],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[42,2063,2063],"c":"(property (!=
            receiver \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2106,2106],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2116,2116],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,2119,2119],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,2126,2126],"c":"receiver"}}],"d":"()","i":{"d":[20,2115,2115],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[44,2105,2105],"c":"(property (!=
            sender receiver))\n            "}}],"docs":" Transfer AMOUNT between accounts
            SENDER and RECEIVER.  Fails if SENDER does not exist. If RECEIVER exists,
            guard  must match existing value. If RECEIVER does not exist,  RECEIVER
            account is created using RECEIVER-GUARD.  Subject to management by TRANSFER
            capability."},"info":{"d":[553,8376,8376],"c":"(defun transfer-create:string\n    (
            sender:string\n      receiver:string\n      receiver-guard:guard\n      amount:decimal
            )\n\n    @model [ (property conserves-mass) ]\n\n    (enforce (!= sender
            receiver)\n      \"sender cannot be the receiver of a transfer\")\n\n    (validate-account
            sender)\n    (validate-account receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer
            amount must be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability
            (TRANSFER sender receiver amount)\n      (debit sender amount)\n      (credit
            receiver receiver-guard amount))\n    )\n\n  "}}},"details":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,7106,7106],"c":"account"}}],"return":{"schema":"object","type":{"var":{"ref":{"modname":{"namespace":null,"name":"fungible-v2"},"name":"account-details","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,283,283],"c":"invariant
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,294,294],"c":"!= "}},{"i":{"d":[3,297,297],"c":"\"\"
            "},"lit":""},{"atom":"sender","q":[],"i":{"d":[6,300,300],"c":"sender"}}],"d":"()","i":{"d":[14,293,293],"c":"(!=
            \"\" sender)"}}],"d":"()","i":{"d":[27,282,282],"c":"(invariant (!= \"\"
            sender)) "}}],"docs":"Schema for results of ''account'' operation."},"i":{"d":[272,188,188],"c":"(defschema
            account-details\n    @doc \"Schema for results of ''account'' operation.\"\n    @model
            [ (invariant (!= \"\" sender)) ]\n\n    account:string\n    balance:decimal\n    guard:guard)\n\n\n   ;
            ----------------------------------------------------------------------\n   ;
            Caps\n\n   "},"fields":[{"name":"account","type":"string","info":{"d":[7,316,316],"c":"account"}},{"name":"balance","type":"decimal","info":{"d":[7,335,335],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,355,355],"c":"guard"}}]}},"i":{"d":[27,7071,7071],"c":"fungible-v2.account-details"}},"partial":"full"}},"defName":"details","defBody":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,7138,7138],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,7149,7149],"c":"account\n      "}},{"body":{"scope":{"list":[{"obj":{"guard":{"var":{"b":1},"i":{"d":[2,7274,7274],"c":"g
            "}},"balance":{"var":{"b":0},"i":{"d":[10,7253,7253],"c":"bal\n      "}},"account":{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[14,7225,7225],"c":"account\n      "}}},"keyorder":["account","balance","guard"],"type":"*","i":{"d":[66,7211,7211],"c":"{
            \"account\" : account\n      , \"balance\" : bal\n      , \"guard\": g
            }"}}],"type":"*","i":{"d":[156,7127,7127],"c":"(with-read coin-table account\n      {
            \"balance\" := bal\n      , \"guard\" := g }\n      { \"account\" : account\n      ,
            \"balance\" : bal\n      , \"guard\": g })\n    "}}},"pairs":[{"arg":{"name":"bal","type":{"tag":"TypeVar","name":"ab","constraint":[]},"info":{"d":[10,7178,7178],"c":"bal\n      "}},"val":{"i":{"d":[10,7165,7165],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"g","type":{"tag":"TypeVar","name":"ac","constraint":[]},"info":{"d":[2,7201,7201],"c":"g
            "}},"val":{"i":{"d":[8,7190,7190],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[48,7163,7163],"c":"{
            \"balance\" := bal\n      , \"guard\" := g }\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,7128,7128],"c":"with-read
            "}},"info":{"d":[156,7127,7127],"c":"(with-read coin-table account\n      {
            \"balance\" := bal\n      , \"guard\" := g }\n      { \"account\" : account\n      ,
            \"balance\" : bal\n      , \"guard\": g })\n    "}}],"type":"*","i":{"d":[239,7049,7049],"c":"(defun
            details:object{fungible-v2.account-details}\n    ( account:string )\n    (with-read
            coin-table account\n      { \"balance\" := bal\n      , \"guard\" := g
            }\n      { \"account\" : account\n      , \"balance\" : bal\n      , \"guard\":
            g })\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"
            Get an object with details of ACCOUNT.  Fails if account does not exist."},"info":{"d":[239,7049,7049],"c":"(defun
            details:object{fungible-v2.account-details}\n    ( account:string )\n    (with-read
            coin-table account\n      { \"balance\" := bal\n      , \"guard\" := g
            }\n      { \"account\" : account\n      , \"balance\" : bal\n      , \"guard\":
            g })\n    )\n\n  "}}},"validate-account":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"credit":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"gas-guard":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"guard","type":{"guard":null},"info":{"d":[5,4356,4356],"c":"guard"}}],"return":{"tag":"TypeVar","name":"v","constraint":[]}},"defName":"gas-guard","defBody":{"scope":{"list":[{"args":[{"i":{"d":[59,4441,4441],"c":"\"Enforce
            either the presence of a GAS cap or keyset\"\n      "},"lit":"Enforce
            either the presence of a GAS cap or keyset"},{"list":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"u","constraint":[]}},"defName":"gas-only","defBody":{"scope":{"list":[{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"b","constraint":[]}},"defName":"GAS","defBody":{"scope":{"list":[{"i":{"d":[4,1234,1234],"c":"true"},"lit":true}],"type":"*","i":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect gas buy and redeem"},"info":{"d":[81,1162,1162],"c":"(defcap
            GAS ()\n    \"Magic capability to protect gas buy and redeem\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[3,4328,4328],"c":"GAS"}},"info":{"d":[5,4327,4327],"c":"(GAS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,4308,4308],"c":"require-capability
            "}},"info":{"d":[26,4307,4307],"c":"(require-capability (GAS))"}}],"type":"*","i":{"d":[96,4242,4242],"c":"(defun
            gas-only ()\n    \"Predicate for gas-only user guards.\"\n    (require-capability
            (GAS)))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Predicate
            for gas-only user guards."},"info":{"d":[96,4242,4242],"c":"(defun gas-only
            ()\n    \"Predicate for gas-only user guards.\"\n    (require-capability
            (GAS)))\n\n  "}}},"i":null}},"i":{"d":[8,4503,4503],"c":"gas-only"}},"info":{"d":[19,4502,4502],"c":"(gas-only)\n        "}},{"args":[{"var":{"b":0},"i":{"d":[5,4536,4536],"c":"guard"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,4522,4522],"c":"enforce-guard
            "}},"info":{"d":[28,4521,4521],"c":"(enforce-guard guard)\n      "}}],"type":{"tag":"TypeVar","name":"w","constraint":[]},"i":{"d":[50,4500,4500],"c":"[
            (gas-only)\n        (enforce-guard guard)\n      ]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-one"}},"i":null}},"i":{"d":[18,4423,4423],"c":"enforce-one\n      "}},"info":{"d":[129,4422,4422],"c":"(enforce-one\n      \"Enforce
            either the presence of a GAS cap or keyset\"\n      [ (gas-only)\n        (enforce-guard
            guard)\n      ])"}}],"type":"*","i":{"d":[218,4338,4338],"c":"(defun gas-guard
            (guard:guard)\n    \"Predicate for gas + single key user guards\"\n    (enforce-one\n      \"Enforce
            either the presence of a GAS cap or keyset\"\n      [ (gas-only)\n        (enforce-guard
            guard)\n      ]))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Predicate
            for gas + single key user guards"},"info":{"d":[218,4338,4338],"c":"(defun
            gas-guard (guard:guard)\n    \"Predicate for gas + single key user guards\"\n    (enforce-one\n      \"Enforce
            either the presence of a GAS cap or keyset\"\n      [ (gas-only)\n        (enforce-guard
            guard)\n      ]))\n\n  "}}},"get-balance":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,6937,6937],"c":"account"}}],"return":"decimal"},"defName":"get-balance","defBody":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,6968,6968],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,6979,6979],"c":"account\n      "}},{"body":{"scope":{"list":[{"var":{"b":0},"i":{"d":[14,7024,7024],"c":"balance\n      "}}],"type":"*","i":{"d":[87,6957,6957],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n      balance\n      )\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"aa","constraint":[]},"info":{"d":[8,7008,7008],"c":"balance
            "}},"val":{"i":{"d":[10,6995,6995],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[31,6993,6993],"c":"{
            \"balance\" := balance }\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,6958,6958],"c":"with-read
            "}},"info":{"d":[87,6957,6957],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n      balance\n      )\n    "}}],"type":"*","i":{"d":[140,6909,6909],"c":"(defun
            get-balance:decimal (account:string)\n    (with-read coin-table account\n      {
            \"balance\" := balance }\n      balance\n      )\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"
            Get balance for ACCOUNT. Fails if account does not exist."},"info":{"d":[140,6909,6909],"c":"(defun
            get-balance:decimal (account:string)\n    (with-read coin-table account\n      {
            \"balance\" := balance }\n      balance\n      )\n    )\n\n  "}}},"CREDIT":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"transfer-crosschain":{"ref":{"defType":"Defpact","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,12632,12632],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,12652,12652],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,12674,12674],"c":"receiver-guard"}},{"name":"target-chain","type":"string","info":{"d":[12,12701,12701],"c":"target-chain"}},{"name":"amount","type":"decimal","info":{"d":[6,12727,12727],"c":"amount"}}],"return":"string"},"defName":"transfer-crosschain","defBody":{"scope":{"list":[{"body":{"exec":{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,12934,12934],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,12928,12928],"c":"DEBIT
            "}},"info":{"d":[24,12927,12927],"c":"(DEBIT sender)\n\n        "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[6,12969,12969],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,12952,12952],"c":"validate-account
            "}},"info":{"d":[34,12951,12951],"c":"(validate-account sender)\n        "}},{"args":[{"var":{"b":1},"i":{"d":[8,13003,13003],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,12986,12986],"c":"validate-account
            "}},"info":{"d":[37,12985,12985],"c":"(validate-account receiver)\n\n        "}},{"args":[{"args":[{"i":{"d":[3,13035,13035],"c":"\"\"
            "},"lit":""},{"var":{"b":3},"i":{"d":[12,13038,13038],"c":"target-chain"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,13032,13032],"c":"!=
            "}},"info":{"d":[21,13031,13031],"c":"(!= \"\" target-chain) "}},{"i":{"d":[20,13052,13052],"c":"\"empty
            target-chain\""},"lit":"empty target-chain"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,13023,13023],"c":"enforce
            "}},"info":{"d":[60,13022,13022],"c":"(enforce (!= \"\" target-chain)
            \"empty target-chain\")\n        "}},{"args":[{"args":[{"args":[{"i":{"d":[10,13099,13099],"c":"''chain-id
            "},"lit":"chain-id"},{"args":[],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"chain-data"}},"i":null}},"i":{"d":[10,13110,13110],"c":"chain-data"}},"info":{"d":[12,13109,13109],"c":"(chain-data)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,13096,13096],"c":"at
            "}},"info":{"d":[28,13095,13095],"c":"(at ''chain-id (chain-data)) "}},{"var":{"b":3},"i":{"d":[12,13123,13123],"c":"target-chain"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,13092,13092],"c":"!=
            "}},"info":{"d":[56,13091,13091],"c":"(!= (at ''chain-id (chain-data))
            target-chain)\n          "}},{"i":{"d":[52,13147,13147],"c":"\"cannot
            run cross-chain transfers to the same chain\""},"lit":"cannot run cross-chain
            transfers to the same chain"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,13083,13083],"c":"enforce
            "}},"info":{"d":[128,13082,13082],"c":"(enforce (!= (at ''chain-id (chain-data))
            target-chain)\n          \"cannot run cross-chain transfers to the same
            chain\")\n\n        "}},{"args":[{"args":[{"var":{"b":4},"i":{"d":[7,13222,13222],"c":"amount
            "}},{"i":{"d":[3,13229,13229],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,13220,13220],"c":">
            "}},"info":{"d":[25,13219,13219],"c":"(> amount 0.0)\n          "}},{"i":{"d":[36,13244,13244],"c":"\"transfer
            quantity must be positive\""},"lit":"transfer quantity must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,13211,13211],"c":"enforce
            "}},"info":{"d":[81,13210,13210],"c":"(enforce (> amount 0.0)\n          \"transfer
            quantity must be positive\")\n\n        "}},{"args":[{"var":{"b":4},"i":{"d":[6,13305,13305],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,13292,13292],"c":"enforce-unit
            "}},"info":{"d":[89,13291,13291],"c":"(enforce-unit amount)\n\n        ;;
            step 1 - debit delete-account on current chain\n        "}},{"args":[{"var":{"b":0},"i":{"d":[7,13387,13387],"c":"sender
            "}},{"var":{"b":4},"i":{"d":[6,13394,13394],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"i":null}},"i":{"d":[6,13381,13381],"c":"debit
            "}},"info":{"d":[31,13380,13380],"c":"(debit sender amount)\n\n        "}},{"body":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[19,13622,13622],"c":"crosschain-details
            "}},{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[12,13641,13641],"c":"target-chain"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"yield"}},"i":null}},"i":null}},"i":{"d":[6,13616,13616],"c":"yield
            "}},"info":{"d":[50,13615,13615],"c":"(yield crosschain-details target-chain)\n          "}}],"type":"*","i":{"d":[255,13411,13411],"c":"(let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )"}}},"pairs":[{"arg":{"name":"crosschain-details","type":{"schema":"object","type":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"crosschain-schema","meta":{"model":[],"docs":"Schema
            for yielded value in cross-chain transfers"},"i":{"d":[158,12432,12432],"c":"(defschema
            crosschain-schema\n    @doc \"Schema for yielded value in cross-chain
            transfers\"\n    receiver:string\n    receiver-guard:guard\n    amount:decimal)\n\n  "},"fields":[{"name":"receiver","type":"string","info":{"d":[8,12526,12526],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,12546,12546],"c":"receiver-guard"}},{"name":"amount","type":"decimal","info":{"d":[6,12571,12571],"c":"amount"}}]}},"i":null}},"i":{"d":[17,13454,13454],"c":"crosschain-schema"}},"partial":"full"},"info":{"d":[18,13428,13428],"c":"crosschain-details"}},"val":{"obj":{"amount":{"var":{"b":4},"i":{"d":[19,13582,13582],"c":"amount\n            "}},"receiver":{"var":{"b":1},"i":{"d":[21,13500,13500],"c":"receiver\n            "}},"receiver-guard":{"var":{"b":2},"i":{"d":[27,13542,13542],"c":"receiver-guard\n            "}}},"keyorder":["receiver","receiver-guard","amount"],"type":"*","i":{"d":[117,13485,13485],"c":"{
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }"}}}],"type":"let","i":{"d":[255,13411,13411],"c":"(let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )"}}],"type":"*","i":{"d":[34,12951,12951],"c":"(validate-account
            sender)\n        "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,12911,12911],"c":"with-capability
            "}},"info":{"d":[757,12910,12910],"c":"(with-capability (DEBIT sender)\n\n        (validate-account
            sender)\n        (validate-account receiver)\n\n        (enforce (!= \"\"
            target-chain) \"empty target-chain\")\n        (enforce (!= (at ''chain-id
            (chain-data)) target-chain)\n          \"cannot run cross-chain transfers
            to the same chain\")\n\n        (enforce (> amount 0.0)\n          \"transfer
            quantity must be positive\")\n\n        (enforce-unit amount)\n\n        ;;
            step 1 - debit delete-account on current chain\n        (debit sender
            amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          ))"}},"rollback":null,"entity":null,"info":{"d":[776,12898,12898],"c":"(step\n      (with-capability
            (DEBIT sender)\n\n        (validate-account sender)\n        (validate-account
            receiver)\n\n        (enforce (!= \"\" target-chain) \"empty target-chain\")\n        (enforce
            (!= (at ''chain-id (chain-data)) target-chain)\n          \"cannot run
            cross-chain transfers to the same chain\")\n\n        (enforce (> amount
            0.0)\n          \"transfer quantity must be positive\")\n\n        (enforce-unit
            amount)\n\n        ;; step 1 - debit delete-account on current chain\n        (debit
            sender amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )))\n\n    "}},"meta":{"model":[],"docs":null},"i":{"d":[776,12898,12898],"c":"(step\n      (with-capability
            (DEBIT sender)\n\n        (validate-account sender)\n        (validate-account
            receiver)\n\n        (enforce (!= \"\" target-chain) \"empty target-chain\")\n        (enforce
            (!= (at ''chain-id (chain-data)) target-chain)\n          \"cannot run
            cross-chain transfers to the same chain\")\n\n        (enforce (> amount
            0.0)\n          \"transfer quantity must be positive\")\n\n        (enforce-unit
            amount)\n\n        ;; step 1 - debit delete-account on current chain\n        (debit
            sender amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )))\n\n    "}},{"body":{"exec":{"args":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[8,13903,13903],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":null}},"i":{"d":[7,13896,13896],"c":"CREDIT
            "}},"info":{"d":[28,13895,13895],"c":"(CREDIT receiver)\n          "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[9,13931,13931],"c":"receiver
            "}},{"var":{"b":1},"i":{"d":[15,13940,13940],"c":"receiver-guard "}},{"var":{"b":2},"i":{"d":[6,13955,13955],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":null}},"i":{"d":[7,13924,13924],"c":"credit
            "}},"info":{"d":[39,13923,13923],"c":"(credit receiver receiver-guard
            amount)"}}],"type":"*","i":{"d":[39,13923,13923],"c":"(credit receiver
            receiver-guard amount)"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":null}},"i":{"d":[16,13879,13879],"c":"with-capability
            "}},"info":{"d":[94,13878,13878],"c":"(with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        "}}],"type":"*","i":{"d":[287,13686,13686],"c":"(resume\n        {
            \"receiver\" := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        )"}}},"pairs":[{"arg":{"name":"receiver","type":{"tag":"TypeVar","name":"ak","constraint":[]},"info":{"d":[17,13718,13718],"c":"receiver\n        "}},"val":{"i":{"d":[11,13704,13704],"c":"\"receiver\"
            "},"lit":"receiver"}},{"arg":{"name":"receiver-guard","type":{"tag":"TypeVar","name":"al","constraint":[]},"info":{"d":[23,13757,13757],"c":"receiver-guard\n        "}},"val":{"i":{"d":[17,13737,13737],"c":"\"receiver-guard\"
            "},"lit":"receiver-guard"}},{"arg":{"name":"amount","type":{"tag":"TypeVar","name":"am","constraint":[]},"info":{"d":[15,13794,13794],"c":"amount\n        "}},"val":{"i":{"d":[9,13782,13782],"c":"\"amount\"
            "},"lit":"amount"}}],"type":{"bind":"*"},"i":{"d":[176,13702,13702],"c":"{
            \"receiver\" := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"resume"}},"i":null}},"i":{"d":[15,13687,13687],"c":"resume\n        "}},"info":{"d":[287,13686,13686],"c":"(resume\n        {
            \"receiver\" := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        )"}},"rollback":null,"entity":null,"info":{"d":[305,13674,13674],"c":"(step\n      (resume\n        {
            \"receiver\" := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        ))\n    "}},"meta":{"model":[],"docs":null},"i":{"d":[305,13674,13674],"c":"(step\n      (resume\n        {
            \"receiver\" := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        ))\n    "}}],"type":"*","i":{"d":[1496,12590,12590],"c":"(defpact
            transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal
            )\n\n    @model [ (property (> amount 0.0))\n             (property (valid-account
            sender))\n             (property (valid-account receiver))\n           ]\n\n    (step\n      (with-capability
            (DEBIT sender)\n\n        (validate-account sender)\n        (validate-account
            receiver)\n\n        (enforce (!= \"\" target-chain) \"empty target-chain\")\n        (enforce
            (!= (at ''chain-id (chain-data)) target-chain)\n          \"cannot run
            cross-chain transfers to the same chain\")\n\n        (enforce (> amount
            0.0)\n          \"transfer quantity must be positive\")\n\n        (enforce-unit
            amount)\n\n        ;; step 1 - debit delete-account on current chain\n        (debit
            sender amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )))\n\n    (step\n      (resume\n        { \"receiver\"
            := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        ))\n    )\n\n\n  ; --------------------------------------------------------------------------\n  ;
            Coin allocations\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,12759,12759],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,12769,12769],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,12771,12771],"c":"amount
            "}},{"i":{"d":[3,12778,12778],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,12768,12768],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,12758,12758],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,12798,12798],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,12808,12808],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,12822,12822],"c":"sender"}}],"d":"()","i":{"d":[22,12807,12807],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[47,12797,12797],"c":"(property (valid-account
            sender))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,12845,12845],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,12855,12855],"c":"valid-account
            "}},{"atom":"receiver","q":[],"i":{"d":[8,12869,12869],"c":"receiver"}}],"d":"()","i":{"d":[24,12854,12854],"c":"(valid-account
            receiver)"}}],"d":"()","i":{"d":[47,12844,12844],"c":"(property (valid-account
            receiver))\n           "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2958,2958],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,2968,2968],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,2970,2970],"c":"amount
            "}},{"i":{"d":[3,2977,2977],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,2967,2967],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[40,2957,2957],"c":"(property (> amount
            0.0))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2998,2998],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3008,3008],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,3011,3011],"c":"sender
            "}},{"i":{"d":[2,3018,3018],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,3007,3007],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[40,2997,2997],"c":"(property (!= sender
            \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3038,3038],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3048,3048],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,3051,3051],"c":"receiver
            "}},{"i":{"d":[2,3060,3060],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,3047,3047],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[42,3037,3037],"c":"(property (!=
            receiver \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3080,3080],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3090,3090],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,3093,3093],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,3100,3100],"c":"receiver"}}],"d":"()","i":{"d":[20,3089,3089],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[46,3079,3079],"c":"(property (!=
            sender receiver))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3126,3126],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3136,3136],"c":"!= "}},{"atom":"target-chain","q":[],"i":{"d":[13,3139,3139],"c":"target-chain
            "}},{"i":{"d":[2,3152,3152],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[20,3135,3135],"c":"(!=
            target-chain \"\")"}}],"d":"()","i":{"d":[44,3125,3125],"c":"(property
            (!= target-chain \"\"))\n            "}}],"docs":" 2-step pact to transfer
            AMOUNT from SENDER on current chain  to RECEIVER on TARGET-CHAIN via SPV
            proof.  TARGET-CHAIN must be different than current chain id.  First step
            debits AMOUNT coins in SENDER account and yields  RECEIVER, RECEIVER_GUARD
            and AMOUNT to TARGET-CHAIN.  Second step continuation is sent into TARGET-CHAIN
            with proof  obtained from the spv ''output'' endpoint of Chainweb.  Proof
            is validated and RECEIVER is credited with AMOUNT  creating account with
            RECEIVER_GUARD as necessary."},"info":{"d":[1496,12590,12590],"c":"(defpact
            transfer-crosschain:string\n    ( sender:string\n      receiver:string\n      receiver-guard:guard\n      target-chain:string\n      amount:decimal
            )\n\n    @model [ (property (> amount 0.0))\n             (property (valid-account
            sender))\n             (property (valid-account receiver))\n           ]\n\n    (step\n      (with-capability
            (DEBIT sender)\n\n        (validate-account sender)\n        (validate-account
            receiver)\n\n        (enforce (!= \"\" target-chain) \"empty target-chain\")\n        (enforce
            (!= (at ''chain-id (chain-data)) target-chain)\n          \"cannot run
            cross-chain transfers to the same chain\")\n\n        (enforce (> amount
            0.0)\n          \"transfer quantity must be positive\")\n\n        (enforce-unit
            amount)\n\n        ;; step 1 - debit delete-account on current chain\n        (debit
            sender amount)\n\n        (let\n          ((crosschain-details:object{crosschain-schema}\n            {
            \"receiver\" : receiver\n            , \"receiver-guard\" : receiver-guard\n            ,
            \"amount\" : amount\n            }))\n          (yield crosschain-details
            target-chain)\n          )))\n\n    (step\n      (resume\n        { \"receiver\"
            := receiver\n        , \"receiver-guard\" := receiver-guard\n        ,
            \"amount\" := amount\n        }\n\n        ;; step 2 - credit create account
            on target chain\n        (with-capability (CREDIT receiver)\n          (credit
            receiver receiver-guard amount))\n        ))\n    )\n\n\n  ; --------------------------------------------------------------------------\n  ;
            Coin allocations\n\n  "}}},"create-allocation-account":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,14362,14362],"c":"account"}},{"name":"date","type":"time","info":{"d":[4,14383,14383],"c":"date"}},{"name":"keyset-ref","type":"string","info":{"d":[10,14399,14399],"c":"keyset-ref"}},{"name":"amount","type":"decimal","info":{"d":[6,14423,14423],"c":"amount"}}],"return":{"tag":"TypeVar","name":"an","constraint":[]}},"defName":"create-allocation-account","defBody":{"scope":{"list":[{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"d","constraint":[]}},"defName":"GENESIS","defBody":{"scope":{"list":[{"i":{"d":[4,1403,1403],"c":"true"},"lit":true}],"type":"*","i":{"d":[89,1323,1323],"c":"(defcap
            GENESIS ()\n    \"Magic capability constraining genesis transactions\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability constraining genesis transactions"},"info":{"d":[89,1323,1323],"c":"(defcap
            GENESIS ()\n    \"Magic capability constraining genesis transactions\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[7,14729,14729],"c":"GENESIS"}},"info":{"d":[9,14728,14728],"c":"(GENESIS)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,14709,14709],"c":"require-capability
            "}},"info":{"d":[36,14708,14708],"c":"(require-capability (GENESIS))\n\n    "}},{"args":[{"var":{"b":0},"i":{"d":[7,14762,14762],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,14745,14745],"c":"validate-account
            "}},"info":{"d":[31,14744,14744],"c":"(validate-account account)\n    "}},{"args":[{"args":[{"var":{"b":3},"i":{"d":[7,14788,14788],"c":"amount
            "}},{"i":{"d":[3,14795,14795],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":{"d":[3,14785,14785],"c":">=
            "}},"info":{"d":[22,14784,14784],"c":"(>= amount 0.0)\n      "}},{"i":{"d":[40,14806,14806],"c":"\"allocation
            amount must be non-negative\""},"lit":"allocation amount must be non-negative"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,14776,14776],"c":"enforce
            "}},"info":{"d":[78,14775,14775],"c":"(enforce (>= amount 0.0)\n      \"allocation
            amount must be non-negative\")\n\n    "}},{"args":[{"var":{"b":3},"i":{"d":[6,14867,14867],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,14854,14854],"c":"enforce-unit
            "}},"info":{"d":[27,14853,14853],"c":"(enforce-unit amount)\n\n    "}},{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[8,14960,14960],"c":"account
            "}},{"var":{"b":0},"i":{"d":[5,14968,14968],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,6699,6699],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,6714,6714],"c":"guard"}}],"return":"string"},"defName":"create-account","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,6800,6800],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,6783,6783],"c":"validate-account
            "}},"info":{"d":[32,6782,6782],"c":"(validate-account account)\n\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,6822,6822],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,6833,6833],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[12,6885,6885],"c":"guard\n      "}},"balance":{"i":{"d":[10,6861,6861],"c":"0.0\n      "},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[51,6847,6847],"c":"{
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      }"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"insert"}},"i":null}},"i":{"d":[7,6815,6815],"c":"insert
            "}},"info":{"d":[90,6814,6814],"c":"(insert coin-table account\n      {
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    "}}],"type":"*","i":{"d":[240,6669,6669],"c":"(defun
            create-account:string (account:string guard:guard)\n    @model [ (property
            (valid-account account)) ]\n\n    (validate-account account)\n\n    (insert
            coin-table account\n      { \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,6741,6741],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,6751,6751],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,6765,6765],"c":"account"}}],"d":"()","i":{"d":[23,6750,6750],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[35,6740,6740],"c":"(property (valid-account
            account)) "}}],"docs":null},"info":{"d":[240,6669,6669],"c":"(defun create-account:string
            (account:string guard:guard)\n    @model [ (property (valid-account account))
            ]\n\n    (validate-account account)\n\n    (insert coin-table account\n      {
            \"balance\" : 0.0\n      , \"guard\"   : guard\n      })\n    )\n\n  "}}},"i":null}},"i":null}},"i":{"d":[15,14945,14945],"c":"create-account
            "}},"info":{"d":[38,14944,14944],"c":"(create-account account guard)\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"allocation-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"allocation-schema","meta":{"model":[],"docs":"Genesis
            allocation registry"},"i":{"d":[186,14086,14086],"c":"(defschema allocation-schema\n    @doc
            \"Genesis allocation registry\"\n    ;@model [ (invariant (>= balance
            0.0)) ]\n\n    balance:decimal\n    date:time\n    guard:guard\n    redeemed:bool)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,14204,14204],"c":"balance"}},{"name":"date","type":"time","info":{"d":[4,14224,14224],"c":"date"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,14238,14238],"c":"guard"}},{"name":"redeemed","type":"bool","info":{"d":[8,14254,14254],"c":"redeemed"}}]}},"i":{"d":[17,14300,14300],"c":"allocation-schema"}},"i":{"d":[51,14272,14272],"c":"(deftable
            allocation-table:{allocation-schema})\n\n  "}}},"i":null}},"i":null}},"i":{"d":[17,14990,14990],"c":"allocation-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,15007,15007],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":0},"i":{"d":[14,15088,15088],"c":"guard\n        "}},"balance":{"var":{"f":{"var":{"b":3},"i":null}},"i":{"d":[15,15037,15037],"c":"amount\n        "}},"date":{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[13,15063,15063],"c":"date\n        "}},"redeemed":{"i":{"d":[14,15117,15117],"c":"false\n        "},"lit":false}},"keyorder":["balance","date","guard","redeemed"],"type":"*","i":{"d":[109,15023,15023],"c":"{
            \"balance\" : amount\n        , \"date\" : date\n        , \"guard\" :
            guard\n        , \"redeemed\" : false\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"insert"}},"i":null}},"i":null}},"i":{"d":[7,14983,14983],"c":"insert
            "}},"info":{"d":[151,14982,14982],"c":"(insert allocation-table account\n        {
            \"balance\" : amount\n        , \"date\" : date\n        , \"guard\" :
            guard\n        , \"redeemed\" : false\n        })"}}],"type":"*","i":{"d":[254,14880,14880],"c":"(let\n      ((guard:guard
            (keyset-ref-guard keyset-ref)))\n\n      (create-account account guard)\n\n      (insert
            allocation-table account\n        { \"balance\" : amount\n        , \"date\"
            : date\n        , \"guard\" : guard\n        , \"redeemed\" : false\n        }))"}}},"pairs":[{"arg":{"name":"guard","type":{"guard":null},"info":{"d":[5,14893,14893],"c":"guard"}},"val":{"args":[{"var":{"b":2},"i":{"d":[10,14923,14923],"c":"keyset-ref"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"keyset-ref-guard"}},"i":null}},"i":{"d":[17,14906,14906],"c":"keyset-ref-guard
            "}},"info":{"d":[29,14905,14905],"c":"(keyset-ref-guard keyset-ref)"}}}],"type":"let","i":{"d":[254,14880,14880],"c":"(let\n      ((guard:guard
            (keyset-ref-guard keyset-ref)))\n\n      (create-account account guard)\n\n      (insert
            allocation-table account\n        { \"balance\" : amount\n        , \"date\"
            : date\n        , \"guard\" : guard\n        , \"redeemed\" : false\n        }))"}}],"type":"*","i":{"d":[816,14323,14323],"c":"(defun
            create-allocation-account\n    ( account:string\n      date:time\n      keyset-ref:string\n      amount:decimal\n    )\n\n    @doc
            \"Add an entry to the coin allocation table. This function \\\n         \\also
            creates a corresponding empty coin contract account \\\n         \\of
            the same name and guard. Requires GENESIS capability. \"\n\n    @model
            [ (property (valid-account account)) ]\n\n    (require-capability (GENESIS))\n\n    (validate-account
            account)\n    (enforce (>= amount 0.0)\n      \"allocation amount must
            be non-negative\")\n\n    (enforce-unit amount)\n\n    (let\n      ((guard:guard
            (keyset-ref-guard keyset-ref)))\n\n      (create-account account guard)\n\n      (insert
            allocation-table account\n        { \"balance\" : amount\n        , \"date\"
            : date\n        , \"guard\" : guard\n        , \"redeemed\" : false\n        })))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,14667,14667],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,14677,14677],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,14691,14691],"c":"account"}}],"d":"()","i":{"d":[23,14676,14676],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[35,14666,14666],"c":"(property (valid-account
            account)) "}}],"docs":"Add an entry to the coin allocation table. This
            function also creates a corresponding empty coin contract account of the
            same name and guard. Requires GENESIS capability. "},"info":{"d":[816,14323,14323],"c":"(defun
            create-allocation-account\n    ( account:string\n      date:time\n      keyset-ref:string\n      amount:decimal\n    )\n\n    @doc
            \"Add an entry to the coin allocation table. This function \\\n         \\also
            creates a corresponding empty coin contract account \\\n         \\of
            the same name and guard. Requires GENESIS capability. \"\n\n    @model
            [ (property (valid-account account)) ]\n\n    (require-capability (GENESIS))\n\n    (validate-account
            account)\n    (enforce (>= amount 0.0)\n      \"allocation amount must
            be non-negative\")\n\n    (enforce-unit amount)\n\n    (let\n      ((guard:guard
            (keyset-ref-guard keyset-ref)))\n\n      (create-account account guard)\n\n      (insert
            allocation-table account\n        { \"balance\" : amount\n        , \"date\"
            : date\n        , \"guard\" : guard\n        , \"redeemed\" : false\n        })))\n\n  "}}},"MAXIMUM_ACCOUNT_LENGTH":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"GENESIS":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"d","constraint":[]}},"defName":"GENESIS","defBody":{"scope":{"list":[{"i":{"d":[4,1403,1403],"c":"true"},"lit":true}],"type":"*","i":{"d":[89,1323,1323],"c":"(defcap
            GENESIS ()\n    \"Magic capability constraining genesis transactions\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability constraining genesis transactions"},"info":{"d":[89,1323,1323],"c":"(defcap
            GENESIS ()\n    \"Magic capability constraining genesis transactions\"\n    true)\n\n  "}}},"coin-table":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"TRANSFER":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,2322,2322],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,2344,2344],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2430,2430],"c":"newbal
            "}},{"i":{"d":[3,2437,2437],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,2427,2427],"c":">=
            "}},"info":{"d":[24,2426,2426],"c":"(>= newbal 0.0)\n        "}},{"args":[{"i":{"d":[35,2458,2458],"c":"\"TRANSFER
            exceeded for balance {}\" "},"lit":"TRANSFER exceeded for balance {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,2494,2494],"c":"managed"}}],"type":{"tag":"TypeVar","name":"j","constraint":[]},"i":{"d":[9,2493,2493],"c":"[managed]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[7,2451,2451],"c":"format
            "}},"info":{"d":[53,2450,2450],"c":"(format \"TRANSFER exceeded for balance
            {}\" [managed])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,2418,2418],"c":"enforce
            "}},"info":{"d":[94,2417,2417],"c":"(enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      "}},{"var":{"b":0},"i":{"d":[6,2511,2511],"c":"newbal"}}],"type":"*","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}},"pairs":[{"arg":{"name":"newbal","type":{"tag":"TypeVar","name":"i","constraint":[]},"info":{"d":[7,2380,2380],"c":"newbal
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[8,2390,2390],"c":"managed
            "}},{"var":{"b":1},"i":{"d":[9,2398,2398],"c":"requested"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":{"d":[2,2388,2388],"c":"-
            "}},"info":{"d":[21,2387,2387],"c":"(- managed requested)"}}}],"type":"let","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}],"type":"*","i":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"i":{"d":[17,2050,2050],"c":"TRANSFER-mgr\n    "}}},"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1967,1967],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,1987,1987],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,2009,2009],"c":"amount"}}],"return":"bool"},"defName":"TRANSFER","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2080,2080],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[8,2087,2087],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,2077,2077],"c":"!=
            "}},"info":{"d":[21,2076,2076],"c":"(!= sender receiver) "}},{"i":{"d":[26,2097,2097],"c":"\"same
            sender and receiver\""},"lit":"same sender and receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2068,2068],"c":"enforce
            "}},"info":{"d":[62,2067,2067],"c":"(enforce (!= sender receiver) \"same
            sender and receiver\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,2143,2143],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,2130,2130],"c":"enforce-unit
            "}},"info":{"d":[26,2129,2129],"c":"(enforce-unit amount)\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,2167,2167],"c":"amount
            "}},{"i":{"d":[3,2174,2174],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,2165,2165],"c":">
            "}},"info":{"d":[15,2164,2164],"c":"(> amount 0.0) "}},{"i":{"d":[17,2179,2179],"c":"\"Positive
            amount\""},"lit":"Positive amount"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2156,2156],"c":"enforce
            "}},"info":{"d":[47,2155,2155],"c":"(enforce (> amount 0.0) \"Positive
            amount\")\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,2229,2229],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,2223,2223],"c":"DEBIT
            "}},"info":{"d":[14,2222,2222],"c":"(DEBIT sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2203,2203],"c":"compose-capability
            "}},"info":{"d":[40,2202,2202],"c":"(compose-capability (DEBIT sender))\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[8,2270,2270],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,2263,2263],"c":"CREDIT
            "}},"info":{"d":[17,2262,2262],"c":"(CREDIT receiver)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2243,2243],"c":"compose-capability
            "}},"info":{"d":[41,2242,2242],"c":"(compose-capability (CREDIT receiver))\n  "}}],"type":"*","i":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"
            Managed capability sealing AMOUNT for transfer from SENDER to  RECEIVER.
            Permits any number of transfers up to AMOUNT."},"info":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"transfer":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,7660,7660],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,7674,7674],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,7690,7690],"c":"amount"}}],"return":"string"},"defName":"transfer","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,7945,7945],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[8,7952,7952],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,7942,7942],"c":"!=
            "}},"info":{"d":[27,7941,7941],"c":"(!= sender receiver)\n      "}},{"i":{"d":[45,7968,7968],"c":"\"sender
            cannot be the receiver of a transfer\""},"lit":"sender cannot be the receiver
            of a transfer"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,7933,7933],"c":"enforce
            "}},"info":{"d":[88,7932,7932],"c":"(enforce (!= sender receiver)\n      \"sender
            cannot be the receiver of a transfer\")\n\n    "}},{"args":[{"var":{"b":0},"i":{"d":[6,8038,8038],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,8021,8021],"c":"validate-account
            "}},"info":{"d":[30,8020,8020],"c":"(validate-account sender)\n    "}},{"args":[{"var":{"b":1},"i":{"d":[8,8068,8068],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,8051,8051],"c":"validate-account
            "}},"info":{"d":[33,8050,8050],"c":"(validate-account receiver)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,8095,8095],"c":"amount
            "}},{"i":{"d":[3,8102,8102],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,8093,8093],"c":">
            "}},"info":{"d":[21,8092,8092],"c":"(> amount 0.0)\n      "}},{"i":{"d":[34,8113,8113],"c":"\"transfer
            amount must be positive\""},"lit":"transfer amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,8084,8084],"c":"enforce
            "}},"info":{"d":[71,8083,8083],"c":"(enforce (> amount 0.0)\n      \"transfer
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,8168,8168],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,8155,8155],"c":"enforce-unit
            "}},"info":{"d":[27,8154,8154],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,8208,8208],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[9,8215,8215],"c":"receiver "}},{"var":{"b":2},"i":{"d":[6,8224,8224],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,2322,2322],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,2344,2344],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2430,2430],"c":"newbal
            "}},{"i":{"d":[3,2437,2437],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,2427,2427],"c":">=
            "}},"info":{"d":[24,2426,2426],"c":"(>= newbal 0.0)\n        "}},{"args":[{"i":{"d":[35,2458,2458],"c":"\"TRANSFER
            exceeded for balance {}\" "},"lit":"TRANSFER exceeded for balance {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,2494,2494],"c":"managed"}}],"type":{"tag":"TypeVar","name":"j","constraint":[]},"i":{"d":[9,2493,2493],"c":"[managed]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[7,2451,2451],"c":"format
            "}},"info":{"d":[53,2450,2450],"c":"(format \"TRANSFER exceeded for balance
            {}\" [managed])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,2418,2418],"c":"enforce
            "}},"info":{"d":[94,2417,2417],"c":"(enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      "}},{"var":{"b":0},"i":{"d":[6,2511,2511],"c":"newbal"}}],"type":"*","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}},"pairs":[{"arg":{"name":"newbal","type":{"tag":"TypeVar","name":"i","constraint":[]},"info":{"d":[7,2380,2380],"c":"newbal
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[8,2390,2390],"c":"managed
            "}},{"var":{"b":1},"i":{"d":[9,2398,2398],"c":"requested"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":{"d":[2,2388,2388],"c":"-
            "}},"info":{"d":[21,2387,2387],"c":"(- managed requested)"}}}],"type":"let","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}],"type":"*","i":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"i":{"d":[17,2050,2050],"c":"TRANSFER-mgr\n    "}}},"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1967,1967],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,1987,1987],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,2009,2009],"c":"amount"}}],"return":"bool"},"defName":"TRANSFER","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2080,2080],"c":"sender
            "}},{"var":{"b":1},"i":{"d":[8,2087,2087],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,2077,2077],"c":"!=
            "}},"info":{"d":[21,2076,2076],"c":"(!= sender receiver) "}},{"i":{"d":[26,2097,2097],"c":"\"same
            sender and receiver\""},"lit":"same sender and receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2068,2068],"c":"enforce
            "}},"info":{"d":[62,2067,2067],"c":"(enforce (!= sender receiver) \"same
            sender and receiver\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,2143,2143],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,2130,2130],"c":"enforce-unit
            "}},"info":{"d":[26,2129,2129],"c":"(enforce-unit amount)\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,2167,2167],"c":"amount
            "}},{"i":{"d":[3,2174,2174],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,2165,2165],"c":">
            "}},"info":{"d":[15,2164,2164],"c":"(> amount 0.0) "}},{"i":{"d":[17,2179,2179],"c":"\"Positive
            amount\""},"lit":"Positive amount"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,2156,2156],"c":"enforce
            "}},"info":{"d":[47,2155,2155],"c":"(enforce (> amount 0.0) \"Positive
            amount\")\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[6,2229,2229],"c":"sender"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,2223,2223],"c":"DEBIT
            "}},"info":{"d":[14,2222,2222],"c":"(DEBIT sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2203,2203],"c":"compose-capability
            "}},"info":{"d":[40,2202,2202],"c":"(compose-capability (DEBIT sender))\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[8,2270,2270],"c":"receiver"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,2263,2263],"c":"CREDIT
            "}},"info":{"d":[17,2262,2262],"c":"(CREDIT receiver)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"compose-capability"}},"i":null}},"i":{"d":[19,2243,2243],"c":"compose-capability
            "}},"info":{"d":[41,2242,2242],"c":"(compose-capability (CREDIT receiver))\n  "}}],"type":"*","i":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[349,1939,1939],"c":"(defcap
            TRANSFER:bool\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @managed
            amount TRANSFER-mgr\n    (enforce (!= sender receiver) \"same sender and
            receiver\")\n    (enforce-unit amount)\n    (enforce (> amount 0.0) \"Positive
            amount\")\n    (compose-capability (DEBIT sender))\n    (compose-capability
            (CREDIT receiver))\n  )\n\n  "}}},"i":null}},"i":{"d":[9,8199,8199],"c":"TRANSFER
            "}},"info":{"d":[40,8198,8198],"c":"(TRANSFER sender receiver amount)\n      "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,8245,8245],"c":"sender
            "}},{"var":{"b":2},"i":{"d":[6,8252,8252],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11084,11084],"c":"account"}},{"name":"amount","type":"decimal","info":{"d":[6,11099,11099],"c":"amount"}}],"return":"string"},"defName":"debit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11284,11284],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11267,11267],"c":"validate-account
            "}},"info":{"d":[32,11266,11266],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":1},"i":{"d":[7,11310,11310],"c":"amount
            "}},{"i":{"d":[3,11317,11317],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11308,11308],"c":">
            "}},"info":{"d":[21,11307,11307],"c":"(> amount 0.0)\n      "}},{"i":{"d":[31,11328,11328],"c":"\"debit
            amount must be positive\""},"lit":"debit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11299,11299],"c":"enforce
            "}},"info":{"d":[68,11298,11298],"c":"(enforce (> amount 0.0)\n      \"debit
            amount must be positive\")\n\n    "}},{"args":[{"var":{"b":1},"i":{"d":[6,11380,11380],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11367,11367],"c":"enforce-unit
            "}},"info":{"d":[27,11366,11366],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,11420,11420],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1513,1513],"c":"sender"}}],"return":{"tag":"TypeVar","name":"f","constraint":[]}},"defName":"DEBIT","defBody":{"scope":{"list":[{"args":[{"args":[{"i":{"d":[7,1601,1601],"c":"''guard
            "},"lit":"guard"},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,1614,1614],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[6,1625,1625],"c":"sender"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"read"}},"i":null}},"i":{"d":[5,1609,1609],"c":"read
            "}},"info":{"d":[24,1608,1608],"c":"(read coin-table sender)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"at"}},"i":null}},"i":{"d":[3,1598,1598],"c":"at
            "}},"info":{"d":[36,1597,1597],"c":"(at ''guard (read coin-table sender))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":{"d":[14,1583,1583],"c":"enforce-guard
            "}},"info":{"d":[57,1582,1582],"c":"(enforce-guard (at ''guard (read coin-table
            sender)))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,1652,1652],"c":"sender
            "}},{"i":{"d":[2,1659,1659],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1649,1649],"c":"!=
            "}},"info":{"d":[15,1648,1648],"c":"(!= sender \"\") "}},{"i":{"d":[14,1663,1663],"c":"\"valid
            sender\""},"lit":"valid sender"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1640,1640],"c":"enforce
            "}},"info":{"d":[39,1639,1639],"c":"(enforce (!= sender \"\") \"valid
            sender\")"}}],"type":"*","i":{"d":[185,1498,1498],"c":"(defcap DEBIT (sender:string)\n    \"Capability
            for managing debiting operations\"\n    (enforce-guard (at ''guard (read
            coin-table sender)))\n    (enforce (!= sender \"\") \"valid sender\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing debiting operations"},"info":{"d":[185,1498,1498],"c":"(defcap
            DEBIT (sender:string)\n    \"Capability for managing debiting operations\"\n    (enforce-guard
            (at ''guard (read coin-table sender)))\n    (enforce (!= sender \"\")
            \"valid sender\"))\n\n  "}}},"i":null}},"i":{"d":[6,11414,11414],"c":"DEBIT
            "}},"info":{"d":[15,11413,11413],"c":"(DEBIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11394,11394],"c":"require-capability
            "}},"info":{"d":[41,11393,11393],"c":"(require-capability (DEBIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,11445,11445],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,11456,11456],"c":"account\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[7,11515,11515],"c":"amount
            "}},{"var":{"b":0},"i":{"d":[7,11522,11522],"c":"balance"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,11512,11512],"c":"<=
            "}},"info":{"d":[20,11511,11511],"c":"(<= amount balance) "}},{"i":{"d":[20,11531,11531],"c":"\"Insufficient
            funds\""},"lit":"Insufficient funds"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,11503,11503],"c":"enforce
            "}},"info":{"d":[58,11502,11502],"c":"(enforce (<= amount balance) \"Insufficient
            funds\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,11568,11568],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,11579,11579],"c":"account\n        "}},{"obj":{"balance":{"args":[{"var":{"b":0},"i":{"d":[8,11612,11612],"c":"balance
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[6,11620,11620],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":null}},"i":{"d":[2,11610,11610],"c":"-
            "}},"info":{"d":[19,11609,11609],"c":"(- balance amount) "}}},"keyorder":["balance"],"type":"*","i":{"d":[43,11595,11595],"c":"{
            \"balance\" : (- balance amount) }\n        "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,11561,11561],"c":"update
            "}},"info":{"d":[79,11560,11560],"c":"(update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        )"}}],"type":"*","i":{"d":[211,11434,11434],"c":"(with-read
            coin-table account\n      { \"balance\" := balance }\n\n      (enforce
            (<= amount balance) \"Insufficient funds\")\n\n      (update coin-table
            account\n        { \"balance\" : (- balance amount) }\n        ))\n    "}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ah","constraint":[]},"info":{"d":[8,11485,11485],"c":"balance
            "}},"val":{"i":{"d":[10,11472,11472],"c":"\"balance\" "},"lit":"balance"}}],"type":{"bind":"*"},"i":{"d":[32,11470,11470],"c":"{
            \"balance\" := balance }\n\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,11435,11435],"c":"with-read
            "}},"info":{"d":[211,11434,11434],"c":"(with-read coin-table account\n      {
            \"balance\" := balance }\n\n      (enforce (<= amount balance) \"Insufficient
            funds\")\n\n      (update coin-table account\n        { \"balance\" :
            (- balance amount) }\n        ))\n    "}}],"type":"*","i":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11175,11175],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11185,11185],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11187,11187],"c":"amount
            "}},{"i":{"d":[3,11194,11194],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11184,11184],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11174,11174],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11214,11214],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11224,11224],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11238,11238],"c":"account"}}],"d":"()","i":{"d":[23,11223,11223],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11213,11213],"c":"(property (valid-account
            account))\n           "}}],"docs":"Debit AMOUNT from ACCOUNT balance"},"info":{"d":[588,11063,11063],"c":"(defun
            debit:string (account:string amount:decimal)\n    @doc \"Debit AMOUNT
            from ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0)\n      \"debit amount must be positive\")\n\n    (enforce-unit
            amount)\n\n    (require-capability (DEBIT account))\n    (with-read coin-table
            account\n      { \"balance\" := balance }\n\n      (enforce (<= amount
            balance) \"Insufficient funds\")\n\n      (update coin-table account\n        {
            \"balance\" : (- balance amount) }\n        ))\n    )\n\n\n  "}}},"i":null}},"i":{"d":[6,8239,8239],"c":"debit
            "}},"info":{"d":[28,8238,8238],"c":"(debit sender amount)\n      "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,8277,8277],"c":"coin-table
            "}},{"var":{"b":1},"i":{"d":[17,8288,8288],"c":"receiver\n        "}},{"body":{"scope":{"list":[{"args":[{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[9,8339,8339],"c":"receiver
            "}},{"var":{"b":0},"i":{"d":[2,8348,8348],"c":"g "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,8350,8350],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":null}},"i":{"d":[7,8332,8332],"c":"credit
            "}},"info":{"d":[26,8331,8331],"c":"(credit receiver g amount)"}}],"type":"*","i":{"d":[99,8266,8266],"c":"(with-read
            coin-table receiver\n        { \"guard\" := g }\n\n        (credit receiver
            g amount))\n      "}}},"pairs":[{"arg":{"name":"g","type":{"tag":"TypeVar","name":"ae","constraint":[]},"info":{"d":[2,8318,8318],"c":"g
            "}},"val":{"i":{"d":[8,8307,8307],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[26,8305,8305],"c":"{
            \"guard\" := g }\n\n        "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,8267,8267],"c":"with-read
            "}},"info":{"d":[99,8266,8266],"c":"(with-read coin-table receiver\n        {
            \"guard\" := g }\n\n        (credit receiver g amount))\n      "}}],"type":"*","i":{"d":[28,8238,8238],"c":"(debit
            sender amount)\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,8182,8182],"c":"with-capability
            "}},"info":{"d":[190,8181,8181],"c":"(with-capability (TRANSFER sender
            receiver amount)\n      (debit sender amount)\n      (with-read coin-table
            receiver\n        { \"guard\" := g }\n\n        (credit receiver g amount))\n      )\n    "}}],"type":"*","i":{"d":[740,7636,7636],"c":"(defun
            transfer:string (sender:string receiver:string amount:decimal)\n    @model
            [ (property conserves-mass)\n             (property (> amount 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account receiver))\n             (property
            (!= sender receiver)) ]\n\n    (enforce (!= sender receiver)\n      \"sender
            cannot be the receiver of a transfer\")\n\n    (validate-account sender)\n    (validate-account
            receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer amount must
            be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability (TRANSFER
            sender receiver amount)\n      (debit sender amount)\n      (with-read
            coin-table receiver\n        { \"guard\" := g }\n\n        (credit receiver
            g amount))\n      )\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,7720,7720],"c":"property
            "}},{"atom":"conserves-mass","q":[],"i":{"d":[14,7729,7729],"c":"conserves-mass"}}],"d":"()","i":{"d":[39,7719,7719],"c":"(property
            conserves-mass)\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,7759,7759],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,7769,7769],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,7771,7771],"c":"amount
            "}},{"i":{"d":[3,7778,7778],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,7768,7768],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,7758,7758],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,7798,7798],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,7808,7808],"c":"valid-account
            "}},{"atom":"sender","q":[],"i":{"d":[6,7822,7822],"c":"sender"}}],"d":"()","i":{"d":[22,7807,7807],"c":"(valid-account
            sender)"}}],"d":"()","i":{"d":[47,7797,7797],"c":"(property (valid-account
            sender))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,7845,7845],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,7855,7855],"c":"valid-account
            "}},{"atom":"receiver","q":[],"i":{"d":[8,7869,7869],"c":"receiver"}}],"d":"()","i":{"d":[24,7854,7854],"c":"(valid-account
            receiver)"}}],"d":"()","i":{"d":[49,7844,7844],"c":"(property (valid-account
            receiver))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,7894,7894],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,7904,7904],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,7907,7907],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,7914,7914],"c":"receiver"}}],"d":"()","i":{"d":[20,7903,7903],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[32,7893,7893],"c":"(property (!=
            sender receiver)) "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1333,1333],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,1343,1343],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,1345,1345],"c":"amount
            "}},{"i":{"d":[3,1352,1352],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,1342,1342],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,1332,1332],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1372,1372],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1382,1382],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,1385,1385],"c":"sender
            "}},{"i":{"d":[2,1392,1392],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,1381,1381],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[39,1371,1371],"c":"(property (!= sender
            \"\"))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1411,1411],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1421,1421],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,1424,1424],"c":"receiver
            "}},{"i":{"d":[2,1433,1433],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,1420,1420],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[41,1410,1410],"c":"(property (!=
            receiver \"\"))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1452,1452],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1462,1462],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,1465,1465],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,1472,1472],"c":"receiver"}}],"d":"()","i":{"d":[20,1461,1461],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[43,1451,1451],"c":"(property (!=
            sender receiver))\n           "}}],"docs":" Transfer AMOUNT between accounts
            SENDER and RECEIVER.  Fails if either SENDER or RECEIVER does not exist."},"info":{"d":[740,7636,7636],"c":"(defun
            transfer:string (sender:string receiver:string amount:decimal)\n    @model
            [ (property conserves-mass)\n             (property (> amount 0.0))\n             (property
            (valid-account sender))\n             (property (valid-account receiver))\n             (property
            (!= sender receiver)) ]\n\n    (enforce (!= sender receiver)\n      \"sender
            cannot be the receiver of a transfer\")\n\n    (validate-account sender)\n    (validate-account
            receiver)\n\n    (enforce (> amount 0.0)\n      \"transfer amount must
            be positive\")\n\n    (enforce-unit amount)\n\n    (with-capability (TRANSFER
            sender receiver amount)\n      (debit sender amount)\n      (with-read
            coin-table receiver\n        { \"guard\" := g }\n\n        (credit receiver
            g amount))\n      )\n    )\n\n  "}}},"COINBASE":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"c","constraint":[]}},"defName":"COINBASE","defBody":{"scope":{"list":[{"i":{"d":[4,1314,1314],"c":"true"},"lit":true}],"type":"*","i":{"d":[80,1243,1243],"c":"(defcap
            COINBASE ()\n    \"Magic capability to protect miner reward\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect miner reward"},"info":{"d":[80,1243,1243],"c":"(defcap
            COINBASE ()\n    \"Magic capability to protect miner reward\"\n    true)\n\n  "}}},"coinbase":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,8953,8953],"c":"account"}},{"name":"account-guard","type":{"guard":null},"info":{"d":[13,8968,8968],"c":"account-guard"}},{"name":"amount","type":"decimal","info":{"d":[6,8988,8988],"c":"amount"}}],"return":"string"},"defName":"coinbase","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,9259,9259],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,9242,9242],"c":"validate-account
            "}},"info":{"d":[31,9241,9241],"c":"(validate-account account)\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,9286,9286],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,9273,9273],"c":"enforce-unit
            "}},"info":{"d":[27,9272,9272],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"c","constraint":[]}},"defName":"COINBASE","defBody":{"scope":{"list":[{"i":{"d":[4,1314,1314],"c":"true"},"lit":true}],"type":"*","i":{"d":[80,1243,1243],"c":"(defcap
            COINBASE ()\n    \"Magic capability to protect miner reward\"\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Magic
            capability to protect miner reward"},"info":{"d":[80,1243,1243],"c":"(defcap
            COINBASE ()\n    \"Magic capability to protect miner reward\"\n    true)\n\n  "}}},"i":null}},"i":{"d":[8,9320,9320],"c":"COINBASE"}},"info":{"d":[10,9319,9319],"c":"(COINBASE)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,9300,9300],"c":"require-capability
            "}},"info":{"d":[36,9299,9299],"c":"(require-capability (COINBASE))\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,9360,9360],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,9353,9353],"c":"CREDIT
            "}},"info":{"d":[23,9352,9352],"c":"(CREDIT account)\n      "}},{"list":[{"args":[{"var":{"b":0},"i":{"d":[8,9383,9383],"c":"account
            "}},{"var":{"b":1},"i":{"d":[14,9391,9391],"c":"account-guard "}},{"var":{"b":2},"i":{"d":[6,9405,9405],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,11673,11673],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,11688,11688],"c":"guard"}},{"name":"amount","type":"decimal","info":{"d":[6,11700,11700],"c":"amount"}}],"return":"string"},"defName":"credit","defBody":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[7,11884,11884],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3373,3373],"c":"account"}}],"return":{"tag":"TypeVar","name":"p","constraint":[]}},"defName":"validate-account","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"COIN_CHARSET","type":{"tag":"TypeVar","name":"k","constraint":[]},"info":{"d":[13,2630,2630],"c":"COIN_CHARSET
            "}},"meta":{"model":[],"docs":"The default coin contract character set"},"val":{"raw":{"var":{"direct":{"pdnat":"CHARSET_LATIN1"}},"i":{"d":[19,2643,2643],"c":"CHARSET_LATIN1\n    "}},"eval":{"var":{"direct":{"pdval":{"int":1}}},"i":null}},"i":{"d":[88,2620,2620],"c":"(defconst
            COIN_CHARSET CHARSET_LATIN1\n    \"The default coin contract character
            set\")\n\n  "}}},"i":null}},"i":{"d":[13,3597,3597],"c":"COIN_CHARSET
            "}},{"var":{"b":0},"i":{"d":[7,3610,3610],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"is-charset"}},"i":null}},"i":{"d":[11,3586,3586],"c":"is-charset
            "}},"info":{"d":[40,3585,3585],"c":"(is-charset COIN_CHARSET account)\n      "}},{"args":[{"i":{"d":[68,3641,3641],"c":"\"Account
            does not conform to the coin contract charset: {}\"\n        "},"lit":"Account
            does not conform to the coin contract charset: {}"},{"list":[{"var":{"b":0},"i":{"d":[7,3710,3710],"c":"account"}}],"type":{"tag":"TypeVar","name":"q","constraint":[]},"i":{"d":[9,3709,3709],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[15,3626,3626],"c":"format\n        "}},"info":{"d":[94,3625,3625],"c":"(format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3571,3571],"c":"enforce\n      "}},"info":{"d":[156,3570,3570],"c":"(enforce\n      (is-charset
            COIN_CHARSET account)\n      (format\n        \"Account does not conform
            to the coin contract charset: {}\"\n        [account]))\n\n    "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3795,3795],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"m","constraint":[]},"info":{"d":[23,2807,2807],"c":"MINIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Minimum account length admissible for coin
            accounts"},"val":{"raw":{"i":{"d":[6,2830,2830],"c":"3\n    "},"lit":{"int":3}},"eval":{"var":{"direct":{"pdval":{"int":3}}},"i":null}},"i":{"d":[97,2797,2797],"c":"(defconst
            MINIMUM_ACCOUNT_LENGTH 3\n    \"Minimum account length admissible for
            coin accounts\")\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3810,3810],"c":"MINIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,3792,3792],"c":">=
            "}},"info":{"d":[51,3791,3791],"c":"(>= account-length MINIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,3860,3860],"c":"\"Account
            name does not conform to the min length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the min length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,3937,3937],"c":"account"}}],"type":{"tag":"TypeVar","name":"s","constraint":[]},"i":{"d":[9,3936,3936],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,3843,3843],"c":"format\n          "}},"info":{"d":[104,3842,3842],"c":"(format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3775,3775],"c":"enforce\n        "}},"info":{"d":[181,3774,3774],"c":"(enforce\n        (>=
            account-length MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the min length requirement: {}\"\n          [account]))\n\n      "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[15,3976,3976],"c":"account-length
            "}},{"var":{"f":{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MAXIMUM_ACCOUNT_LENGTH","type":{"tag":"TypeVar","name":"n","constraint":[]},"info":{"d":[23,2904,2904],"c":"MAXIMUM_ACCOUNT_LENGTH
            "}},"meta":{"model":[],"docs":"Maximum account name length admissible
            for coin accounts"},"val":{"raw":{"i":{"d":[8,2927,2927],"c":"256\n    "},"lit":{"int":256}},"eval":{"var":{"direct":{"pdval":{"int":256}}},"i":null}},"i":{"d":[198,2894,2894],"c":"(defconst
            MAXIMUM_ACCOUNT_LENGTH 256\n    \"Maximum account name length admissible
            for coin accounts\")\n\n  ; --------------------------------------------------------------------------\n  ;
            Utilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[22,3991,3991],"c":"MAXIMUM_ACCOUNT_LENGTH"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"<="}},"i":null}},"i":null}},"i":{"d":[3,3973,3973],"c":"<=
            "}},"info":{"d":[51,3972,3972],"c":"(<= account-length MAXIMUM_ACCOUNT_LENGTH)\n        "}},{"args":[{"i":{"d":[76,4041,4041],"c":"\"Account
            name does not conform to the max length requirement: {}\"\n          "},"lit":"Account
            name does not conform to the max length requirement: {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,4118,4118],"c":"account"}}],"type":{"tag":"TypeVar","name":"t","constraint":[]},"i":{"d":[9,4117,4117],"c":"[account]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[17,4024,4024],"c":"format\n          "}},"info":{"d":[104,4023,4023],"c":"(format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[16,3956,3956],"c":"enforce\n        "}},"info":{"d":[180,3955,3955],"c":"(enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      "}}],"type":"*","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}},"pairs":[{"arg":{"name":"account-length","type":{"tag":"TypeVar","name":"r","constraint":[]},"info":{"d":[15,3733,3733],"c":"account-length
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[7,3756,3756],"c":"account"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"length"}},"i":null}},"i":{"d":[7,3749,3749],"c":"length
            "}},"info":{"d":[16,3748,3748],"c":"(length account)"}}}],"type":"let","i":{"d":[413,3726,3726],"c":"(let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  "}}],"type":"*","i":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            that an account name conforms to the coin contract minimum and maximum
            length requirements, as well as the    latin-1 character set."},"info":{"d":[894,3348,3348],"c":"(defun
            validate-account (account:string)\n    @doc \"Enforce that an account
            name conforms to the coin contract \\\n         \\minimum and maximum
            length requirements, as well as the    \\\n         \\latin-1 character
            set.\"\n\n    (enforce\n      (is-charset COIN_CHARSET account)\n      (format\n        \"Account
            does not conform to the coin contract charset: {}\"\n        [account]))\n\n    (let
            ((account-length (length account)))\n\n      (enforce\n        (>= account-length
            MINIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account name does
            not conform to the min length requirement: {}\"\n          [account]))\n\n      (enforce\n        (<=
            account-length MAXIMUM_ACCOUNT_LENGTH)\n        (format\n          \"Account
            name does not conform to the max length requirement: {}\"\n          [account]))\n      )\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Coin Contract\n\n  "}}},"i":null}},"i":{"d":[17,11867,11867],"c":"validate-account
            "}},"info":{"d":[32,11866,11866],"c":"(validate-account account)\n\n    "}},{"args":[{"args":[{"var":{"b":2},"i":{"d":[7,11910,11910],"c":"amount
            "}},{"i":{"d":[3,11917,11917],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":">"}},"i":null}},"i":{"d":[2,11908,11908],"c":">
            "}},"info":{"d":[15,11907,11907],"c":"(> amount 0.0) "}},{"i":{"d":[32,11922,11922],"c":"\"credit
            amount must be positive\""},"lit":"credit amount must be positive"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,11899,11899],"c":"enforce
            "}},"info":{"d":[62,11898,11898],"c":"(enforce (> amount 0.0) \"credit
            amount must be positive\")\n    "}},{"args":[{"var":{"b":2},"i":{"d":[6,11974,11974],"c":"amount"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3118,3118],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[{"args":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,3231,3231],"c":"amount
            "}},{"var":{"f":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"arg":{"name":"MINIMUM_PRECISION","type":{"tag":"TypeVar","name":"l","constraint":[]},"info":{"d":[18,2718,2718],"c":"MINIMUM_PRECISION
            "}},"meta":{"model":[],"docs":"Minimum allowed precision for coin transactions"},"val":{"raw":{"i":{"d":[7,2736,2736],"c":"12\n    "},"lit":{"int":12}},"eval":{"var":{"direct":{"pdval":{"int":12}}},"i":null}},"i":{"d":[89,2708,2708],"c":"(defconst
            MINIMUM_PRECISION 12\n    \"Minimum allowed precision for coin transactions\")\n\n  "}}},"i":null}},"i":{"d":[17,3238,3238],"c":"MINIMUM_PRECISION"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"floor"}},"i":null}},"i":{"d":[6,3225,3225],"c":"floor
            "}},"info":{"d":[42,3224,3224],"c":"(floor amount MINIMUM_PRECISION)\n         "}},{"var":{"b":0},"i":{"d":[6,3266,3266],"c":"amount"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":{"d":[2,3222,3222],"c":"=
            "}},"info":{"d":[59,3221,3221],"c":"(= (floor amount MINIMUM_PRECISION)\n         amount)\n      "}},{"args":[{"i":{"d":[40,3288,3288],"c":"\"Amount
            violates minimum precision: {}\" "},"lit":"Amount violates minimum precision:
            {}"},{"list":[{"var":{"b":0},"i":{"d":[6,3329,3329],"c":"amount"}}],"type":{"tag":"TypeVar","name":"o","constraint":[]},"i":{"d":[8,3328,3328],"c":"[amount]"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":{"d":[7,3281,3281],"c":"format
            "}},"info":{"d":[57,3280,3280],"c":"(format \"Amount violates minimum
            precision: {}\" [amount])"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[14,3207,3207],"c":"enforce\n      "}},"info":{"d":[137,3206,3206],"c":"(enforce\n      (=
            (floor amount MINIMUM_PRECISION)\n         amount)\n      (format \"Amount
            violates minimum precision: {}\" [amount]))\n    "}}],"type":"*","i":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Enforce
            minimum precision allowed for coin transactions"},"info":{"d":[256,3092,3092],"c":"(defun
            enforce-unit:bool (amount:decimal)\n    @doc \"Enforce minimum precision
            allowed for coin transactions\"\n\n    (enforce\n      (= (floor amount
            MINIMUM_PRECISION)\n         amount)\n      (format \"Amount violates
            minimum precision: {}\" [amount]))\n    )\n\n  "}}},"i":null}},"i":{"d":[13,11961,11961],"c":"enforce-unit
            "}},"info":{"d":[27,11960,11960],"c":"(enforce-unit amount)\n\n    "}},{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,12015,12015],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[{"name":"receiver","type":"string","info":{"d":[8,1699,1699],"c":"receiver"}}],"return":{"tag":"TypeVar","name":"g","constraint":[]}},"defName":"CREDIT","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[9,1784,1784],"c":"receiver
            "}},{"i":{"d":[2,1793,1793],"c":"\"\""},"lit":""}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"!="}},"i":null}},"i":{"d":[3,1781,1781],"c":"!=
            "}},"info":{"d":[17,1780,1780],"c":"(!= receiver \"\") "}},{"i":{"d":[16,1797,1797],"c":"\"valid
            receiver\""},"lit":"valid receiver"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1772,1772],"c":"enforce
            "}},"info":{"d":[43,1771,1771],"c":"(enforce (!= receiver \"\") \"valid
            receiver\")"}}],"type":"*","i":{"d":[136,1683,1683],"c":"(defcap CREDIT
            (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Capability
            for managing crediting operations"},"info":{"d":[136,1683,1683],"c":"(defcap
            CREDIT (receiver:string)\n    \"Capability for managing crediting operations\"\n    (enforce
            (!= receiver \"\") \"valid receiver\"))\n\n  "}}},"i":null}},"i":{"d":[7,12008,12008],"c":"CREDIT
            "}},"info":{"d":[16,12007,12007],"c":"(CREDIT account)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"require-capability"}},"i":null}},"i":{"d":[19,11988,11988],"c":"require-capability
            "}},"info":{"d":[42,11987,11987],"c":"(require-capability (CREDIT account))\n    "}},{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,12048,12048],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[14,12059,12059],"c":"account\n      "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[6,12102,12102],"c":"guard
            "}},"balance":{"i":{"d":[3,12087,12087],"c":"0.0"},"lit":0}},"keyorder":["balance","guard"],"type":"*","i":{"d":[43,12073,12073],"c":"{
            \"balance\" : 0.0, \"guard\" : guard }\n      "}},{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":1},"i":{"d":[5,12256,12256],"c":"retg
            "}},{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[5,12261,12261],"c":"guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"="}},"i":null}},"i":null}},"i":{"d":[2,12254,12254],"c":"=
            "}},"info":{"d":[23,12253,12253],"c":"(= retg guard)\n        "}},{"i":{"d":[29,12276,12276],"c":"\"account
            guards do not match\""},"lit":"account guards do not match"}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,12245,12245],"c":"enforce
            "}},"info":{"d":[70,12244,12244],"c":"(enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,12321,12321],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[16,12332,12332],"c":"account\n        "}},{"obj":{"guard":{"var":{"b":1},"i":{"d":[13,12403,12403],"c":"retg\n        "}},"balance":{"args":[{"var":{"b":0},"i":{"d":[8,12365,12365],"c":"balance
            "}},{"var":{"f":{"var":{"b":2},"i":null}},"i":{"d":[6,12373,12373],"c":"amount"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"+"}},"i":null}},"i":null}},"i":{"d":[2,12363,12363],"c":"+
            "}},"info":{"d":[27,12362,12362],"c":"(+ balance amount)\n        "}}},"keyorder":["balance","guard"],"type":"*","i":{"d":[69,12348,12348],"c":"{
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        }"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"write"}},"i":null}},"i":null}},"i":{"d":[6,12315,12315],"c":"write
            "}},"info":{"d":[111,12314,12314],"c":"(write coin-table account\n        {
            \"balance\" : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      "}}],"type":"*","i":{"d":[397,12029,12029],"c":"(with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      )"}}},"pairs":[{"arg":{"name":"balance","type":{"tag":"TypeVar","name":"ai","constraint":[]},"info":{"d":[7,12131,12131],"c":"balance"}},"val":{"i":{"d":[10,12118,12118],"c":"\"balance\"
            "},"lit":"balance"}},{"arg":{"name":"retg","type":{"tag":"TypeVar","name":"aj","constraint":[]},"info":{"d":[5,12151,12151],"c":"retg
            "}},"val":{"i":{"d":[8,12140,12140],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[128,12116,12116],"c":"{
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-default-read"}},"i":null}},"i":{"d":[18,12030,12030],"c":"with-default-read
            "}},"info":{"d":[397,12029,12029],"c":"(with-default-read coin-table account\n      {
            \"balance\" : 0.0, \"guard\" : guard }\n      { \"balance\" := balance,
            \"guard\" := retg }\n      ; we don''t want to overwrite an existing guard
            with the user-supplied one\n      (enforce (= retg guard)\n        \"account
            guards do not match\")\n\n      (write coin-table account\n        { \"balance\"
            : (+ balance amount)\n        , \"guard\"   : retg\n        })\n      )"}}],"type":"*","i":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,11775,11775],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,11785,11785],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,11787,11787],"c":"amount
            "}},{"i":{"d":[3,11794,11794],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,11784,11784],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,11774,11774],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,11814,11814],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,11824,11824],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,11838,11838],"c":"account"}}],"d":"()","i":{"d":[23,11823,11823],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[46,11813,11813],"c":"(property (valid-account
            account))\n           "}}],"docs":"Credit AMOUNT to ACCOUNT balance"},"info":{"d":[781,11651,11651],"c":"(defun
            credit:string (account:string guard:guard amount:decimal)\n    @doc \"Credit
            AMOUNT to ACCOUNT balance\"\n\n    @model [ (property (> amount 0.0))\n             (property
            (valid-account account))\n           ]\n\n    (validate-account account)\n\n    (enforce
            (> amount 0.0) \"credit amount must be positive\")\n    (enforce-unit
            amount)\n\n    (require-capability (CREDIT account))\n    (with-default-read
            coin-table account\n      { \"balance\" : 0.0, \"guard\" : guard }\n      {
            \"balance\" := balance, \"guard\" := retg }\n      ; we don''t want to
            overwrite an existing guard with the user-supplied one\n      (enforce
            (= retg guard)\n        \"account guards do not match\")\n\n      (write
            coin-table account\n        { \"balance\" : (+ balance amount)\n        ,
            \"guard\"   : retg\n        })\n      ))\n\n\n  "}}},"i":null}},"i":{"d":[7,9376,9376],"c":"credit
            "}},"info":{"d":[37,9375,9375],"c":"(credit account account-guard amount)"}}],"type":"*","i":{"d":[37,9375,9375],"c":"(credit
            account account-guard amount)"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,9336,9336],"c":"with-capability
            "}},"info":{"d":[83,9335,9335],"c":"(with-capability (CREDIT account)\n      (credit
            account account-guard amount))\n    "}}],"type":"*","i":{"d":[494,8929,8929],"c":"(defun
            coinbase:string (account:string account-guard:guard amount:decimal)\n    @doc
            \"Internal function for the initial creation of coins.  This function
            \\\n    \\cannot be used outside of the coin contract.\"\n\n    @model
            [ (property (valid-account account))\n             (property (> amount
            0.0))\n           ]\n\n    (validate-account account)\n    (enforce-unit
            amount)\n\n    (require-capability (COINBASE))\n    (with-capability (CREDIT
            account)\n      (credit account account-guard amount))\n    )\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,9150,9150],"c":"property
            "}},{"list":[{"atom":"valid-account","q":[],"i":{"d":[14,9160,9160],"c":"valid-account
            "}},{"atom":"account","q":[],"i":{"d":[7,9174,9174],"c":"account"}}],"d":"()","i":{"d":[23,9159,9159],"c":"(valid-account
            account)"}}],"d":"()","i":{"d":[48,9149,9149],"c":"(property (valid-account
            account))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,9198,9198],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,9208,9208],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,9210,9210],"c":"amount
            "}},{"i":{"d":[3,9217,9217],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,9207,9207],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[37,9197,9197],"c":"(property (> amount
            0.0))\n           "}}],"docs":"Internal function for the initial creation
            of coins.  This function cannot be used outside of the coin contract."},"info":{"d":[494,8929,8929],"c":"(defun
            coinbase:string (account:string account-guard:guard amount:decimal)\n    @doc
            \"Internal function for the initial creation of coins.  This function
            \\\n    \\cannot be used outside of the coin contract.\"\n\n    @model
            [ (property (valid-account account))\n             (property (> amount
            0.0))\n           ]\n\n    (validate-account account)\n    (enforce-unit
            amount)\n\n    (require-capability (COINBASE))\n    (with-capability (CREDIT
            account)\n      (credit account account-guard amount))\n    )\n\n  "}}},"TRANSFER-mgr":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,2322,2322],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,2344,2344],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[{"body":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,2430,2430],"c":"newbal
            "}},{"i":{"d":[3,2437,2437],"c":"0.0"},"lit":0}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":">="}},"i":null}},"i":null}},"i":{"d":[3,2427,2427],"c":">=
            "}},"info":{"d":[24,2426,2426],"c":"(>= newbal 0.0)\n        "}},{"args":[{"i":{"d":[35,2458,2458],"c":"\"TRANSFER
            exceeded for balance {}\" "},"lit":"TRANSFER exceeded for balance {}"},{"list":[{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[7,2494,2494],"c":"managed"}}],"type":{"tag":"TypeVar","name":"j","constraint":[]},"i":{"d":[9,2493,2493],"c":"[managed]"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"format"}},"i":null}},"i":null}},"i":{"d":[7,2451,2451],"c":"format
            "}},"info":{"d":[53,2450,2450],"c":"(format \"TRANSFER exceeded for balance
            {}\" [managed])"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":null}},"i":{"d":[8,2418,2418],"c":"enforce
            "}},"info":{"d":[94,2417,2417],"c":"(enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      "}},{"var":{"b":0},"i":{"d":[6,2511,2511],"c":"newbal"}}],"type":"*","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}},"pairs":[{"arg":{"name":"newbal","type":{"tag":"TypeVar","name":"i","constraint":[]},"info":{"d":[7,2380,2380],"c":"newbal
            "}},"val":{"args":[{"var":{"b":0},"i":{"d":[8,2390,2390],"c":"managed
            "}},{"var":{"b":1},"i":{"d":[9,2398,2398],"c":"requested"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"-"}},"i":null}},"i":{"d":[2,2388,2388],"c":"-
            "}},"info":{"d":[21,2387,2387],"c":"(- managed requested)"}}}],"type":"let","i":{"d":[148,2373,2373],"c":"(let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  "}}],"type":"*","i":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"
            Manages TRANSFER AMOUNT linearly,  such that a request for 1.0 amount
            on a 3.0  managed quantity emits updated amount 2.0."},"info":{"d":[332,2288,2288],"c":"(defun
            TRANSFER-mgr:decimal\n    ( managed:decimal\n      requested:decimal\n    )\n\n    (let
            ((newbal (- managed requested)))\n      (enforce (>= newbal 0.0)\n        (format
            \"TRANSFER exceeded for balance {}\" [managed]))\n      newbal)\n  )\n\n  ;
            --------------------------------------------------------------------------\n  ;
            Constants\n\n  "}}},"GOVERNANCE":{"ref":{"defType":"Defcap","defMeta":null,"funType":{"args":[],"return":{"tag":"TypeVar","name":"a","constraint":[]}},"defName":"GOVERNANCE","defBody":{"scope":{"list":[{"args":[{"i":{"d":[6,1122,1122],"c":"false
            "},"lit":false},{"i":{"d":[28,1128,1128],"c":"\"Enforce non-upgradeability\""},"lit":"Enforce
            non-upgradeability"}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"enforce"}},"i":null}},"i":{"d":[8,1114,1114],"c":"enforce
            "}},"info":{"d":[44,1113,1113],"c":"(enforce false \"Enforce non-upgradeability\")"}}],"type":"*","i":{"d":[75,1087,1087],"c":"(defcap
            GOVERNANCE ()\n    (enforce false \"Enforce non-upgradeability\"))\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":null},"info":{"d":[75,1087,1087],"c":"(defcap
            GOVERNANCE ()\n    (enforce false \"Enforce non-upgradeability\"))\n\n  "}}},"ROTATE":{"ref":{"defType":"Defcap","defMeta":{"managerAuto":true},"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,1835,1835],"c":"account"}}],"return":{"tag":"TypeVar","name":"h","constraint":[]}},"defName":"ROTATE","defBody":{"scope":{"list":[{"i":{"d":[4,1930,1930],"c":"true"},"lit":true}],"type":"*","i":{"d":[120,1819,1819],"c":"(defcap
            ROTATE (account:string)\n    @doc \"Autonomously managed capability for
            guard rotation\"\n    @managed\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Autonomously
            managed capability for guard rotation"},"info":{"d":[120,1819,1819],"c":"(defcap
            ROTATE (account:string)\n    @doc \"Autonomously managed capability for
            guard rotation\"\n    @managed\n    true)\n\n  "}}},"rotate":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,7310,7310],"c":"account"}},{"name":"new-guard","type":{"guard":null},"info":{"d":[9,7325,7325],"c":"new-guard"}}],"return":"string"},"defName":"rotate","defBody":{"scope":{"list":[{"args":[{"args":[{"var":{"b":0},"i":{"d":[7,7371,7371],"c":"account"}}],"fun":{"var":{"f":{"var":{"ref":{"defType":"Defcap","defMeta":{"managerAuto":true},"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,1835,1835],"c":"account"}}],"return":{"tag":"TypeVar","name":"h","constraint":[]}},"defName":"ROTATE","defBody":{"scope":{"list":[{"i":{"d":[4,1930,1930],"c":"true"},"lit":true}],"type":"*","i":{"d":[120,1819,1819],"c":"(defcap
            ROTATE (account:string)\n    @doc \"Autonomously managed capability for
            guard rotation\"\n    @managed\n    true)\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"Autonomously
            managed capability for guard rotation"},"info":{"d":[120,1819,1819],"c":"(defcap
            ROTATE (account:string)\n    @doc \"Autonomously managed capability for
            guard rotation\"\n    @managed\n    true)\n\n  "}}},"i":null}},"i":{"d":[7,7364,7364],"c":"ROTATE
            "}},"info":{"d":[23,7363,7363],"c":"(ROTATE account)\n      "}},{"list":[{"args":[{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":{"d":[11,7397,7397],"c":"coin-table
            "}},{"var":{"b":0},"i":{"d":[16,7408,7408],"c":"account\n        "}},{"body":{"scope":{"list":[{"args":[{"var":{"b":0},"i":{"d":[9,7473,7473],"c":"old-guard"}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"enforce-guard"}},"i":null}},"i":null}},"i":{"d":[14,7459,7459],"c":"enforce-guard
            "}},"info":{"d":[35,7458,7458],"c":"(enforce-guard old-guard)\n\n        "}},{"args":[{"var":{"f":{"var":{"f":{"var":{"ref":{"hash":"ut_J_ZNkoyaPUEJhiwVeWnkSQn9JT9sQCWKdjjVVrWo","modname":{"namespace":null,"name":"coin"},"name":"coin-table","meta":{"model":[],"docs":null},"type":{"var":{"ref":{"modname":{"namespace":null,"name":"coin"},"name":"coin-schema","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,880,880],"c":"invariant
            "}},{"list":[{"atom":">=","q":[],"i":{"d":[3,891,891],"c":">= "}},{"atom":"balance","q":[],"i":{"d":[8,894,894],"c":"balance
            "}},{"i":{"d":[3,902,902],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[16,890,890],"c":"(>=
            balance 0.0)"}}],"d":"()","i":{"d":[29,879,879],"c":"(invariant (>= balance
            0.0)) "}}],"docs":"The coin contract token schema"},"i":{"d":[150,801,801],"c":"(defschema
            coin-schema\n    @doc \"The coin contract token schema\"\n    @model [
            (invariant (>= balance 0.0)) ]\n\n    balance:decimal\n    guard:guard)\n\n  "},"fields":[{"name":"balance","type":"decimal","info":{"d":[7,915,915],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,935,935],"c":"guard"}}]}},"i":{"d":[11,973,973],"c":"coin-schema"}},"i":{"d":[136,951,951],"c":"(deftable
            coin-table:{coin-schema})\n\n  ; --------------------------------------------------------------------------\n  ;
            Capabilities\n\n  "}}},"i":null}},"i":null}},"i":{"d":[11,7501,7501],"c":"coin-table
            "}},{"var":{"f":{"var":{"b":0},"i":null}},"i":{"d":[18,7512,7512],"c":"account\n          "}},{"obj":{"guard":{"var":{"f":{"var":{"b":1},"i":null}},"i":{"d":[10,7542,7542],"c":"new-guard
            "}}},"keyorder":["guard"],"type":"*","i":{"d":[34,7530,7530],"c":"{ \"guard\"
            : new-guard }\n          "}}],"fun":{"var":{"f":{"var":{"f":{"var":{"direct":{"pdnat":"update"}},"i":null}},"i":null}},"i":{"d":[7,7494,7494],"c":"update
            "}},"info":{"d":[72,7493,7493],"c":"(update coin-table account\n          {
            \"guard\" : new-guard }\n          )"}}],"type":"*","i":{"d":[180,7386,7386],"c":"(with-read
            coin-table account\n        { \"guard\" := old-guard }\n\n        (enforce-guard
            old-guard)\n\n        (update coin-table account\n          { \"guard\"
            : new-guard }\n          ))"}}},"pairs":[{"arg":{"name":"old-guard","type":{"tag":"TypeVar","name":"ad","constraint":[]},"info":{"d":[10,7437,7437],"c":"old-guard
            "}},"val":{"i":{"d":[8,7426,7426],"c":"\"guard\" "},"lit":"guard"}}],"type":{"bind":"*"},"i":{"d":[34,7424,7424],"c":"{
            \"guard\" := old-guard }\n\n        "}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-read"}},"i":null}},"i":{"d":[10,7387,7387],"c":"with-read
            "}},"info":{"d":[180,7386,7386],"c":"(with-read coin-table account\n        {
            \"guard\" := old-guard }\n\n        (enforce-guard old-guard)\n\n        (update
            coin-table account\n          { \"guard\" : new-guard }\n          ))"}}],"type":"*","i":{"d":[180,7386,7386],"c":"(with-read
            coin-table account\n        { \"guard\" := old-guard }\n\n        (enforce-guard
            old-guard)\n\n        (update coin-table account\n          { \"guard\"
            : new-guard }\n          ))"}}],"fun":{"var":{"f":{"var":{"direct":{"pdnat":"with-capability"}},"i":null}},"i":{"d":[16,7347,7347],"c":"with-capability
            "}},"info":{"d":[226,7346,7346],"c":"(with-capability (ROTATE account)\n      (with-read
            coin-table account\n        { \"guard\" := old-guard }\n\n        (enforce-guard
            old-guard)\n\n        (update coin-table account\n          { \"guard\"
            : new-guard }\n          )))\n    "}}],"type":"*","i":{"d":[290,7288,7288],"c":"(defun
            rotate:string (account:string new-guard:guard)\n    (with-capability (ROTATE
            account)\n      (with-read coin-table account\n        { \"guard\" :=
            old-guard }\n\n        (enforce-guard old-guard)\n\n        (update coin-table
            account\n          { \"guard\" : new-guard }\n          )))\n    )\n\n\n  "}}},"module":{"namespace":null,"name":"coin"},"meta":{"model":[],"docs":"
            Rotate guard for ACCOUNT. Transaction is validated against  existing guard
            before installing new guard. "},"info":{"d":[290,7288,7288],"c":"(defun
            rotate:string (account:string new-guard:guard)\n    (with-capability (ROTATE
            account)\n      (with-read coin-table account\n        { \"guard\" :=
            old-guard }\n\n        (enforce-guard old-guard)\n\n        (update coin-table
            account\n          { \"guard\" : new-guard }\n          )))\n    )\n\n\n  "}}}}}'
        fungible-v2:
          '8': '{"module":{"imports":[],"name":{"namespace":null,"name":"fungible-v2"},"code":"(interface
            fungible-v2\n\n  \" Standard for fungible coins and tokens as specified
            in KIP-0002. \"\n\n   ; ----------------------------------------------------------------------\n   ;
            Schema\n\n   (defschema account-details\n    @doc \"Schema for results
            of ''account'' operation.\"\n    @model [ (invariant (!= \"\" sender))
            ]\n\n    account:string\n    balance:decimal\n    guard:guard)\n\n\n   ;
            ----------------------------------------------------------------------\n   ;
            Caps\n\n   (defcap TRANSFER:bool\n     ( sender:string\n       receiver:string\n       amount:decimal\n     )\n     @doc
            \" Managed capability sealing AMOUNT for transfer from SENDER to \\\n          \\
            RECEIVER. Permits any number of transfers up to AMOUNT.\"\n     @managed
            amount TRANSFER-mgr\n     )\n\n   (defun TRANSFER-mgr:decimal\n     (
            managed:decimal\n       requested:decimal\n     )\n     @doc \" Manages
            TRANSFER AMOUNT linearly, \\\n          \\ such that a request for 1.0
            amount on a 3.0 \\\n          \\ managed quantity emits updated amount
            2.0.\"\n     )\n\n   ; ----------------------------------------------------------------------\n   ;
            Functionality\n\n\n  (defun transfer:string\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n         \\
            Fails if either SENDER or RECEIVER does not exist.\"\n    @model [ (property
            (> amount 0.0))\n             (property (!= sender \"\"))\n             (property
            (!= receiver \"\"))\n             (property (!= sender receiver))\n           ]\n    )\n\n   (defun
            transfer-create:string\n     ( sender:string\n       receiver:string\n       receiver-guard:guard\n       amount:decimal\n     )\n     @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n          \\
            Fails if SENDER does not exist. If RECEIVER exists, guard \\\n          \\
            must match existing value. If RECEIVER does not exist, \\\n          \\
            RECEIVER account is created using RECEIVER-GUARD. \\\n          \\ Subject
            to management by TRANSFER capability.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n            ]\n     )\n\n   (defpact
            transfer-crosschain:string\n     ( sender:string\n       receiver:string\n       receiver-guard:guard\n       target-chain:string\n       amount:decimal\n     )\n     @doc
            \" 2-step pact to transfer AMOUNT from SENDER on current chain \\\n          \\
            to RECEIVER on TARGET-CHAIN via SPV proof. \\\n          \\ TARGET-CHAIN
            must be different than current chain id. \\\n          \\ First step debits
            AMOUNT coins in SENDER account and yields \\\n          \\ RECEIVER, RECEIVER_GUARD
            and AMOUNT to TARGET-CHAIN. \\\n          \\ Second step continuation
            is sent into TARGET-CHAIN with proof \\\n          \\ obtained from the
            spv ''output'' endpoint of Chainweb. \\\n          \\ Proof is validated
            and RECEIVER is credited with AMOUNT \\\n          \\ creating account
            with RECEIVER_GUARD as necessary.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n              (property
            (!= target-chain \"\"))\n            ]\n     )\n\n   (defun get-balance:decimal\n     (
            account:string )\n     \" Get balance for ACCOUNT. Fails if account does
            not exist.\"\n     )\n\n   (defun details:object{account-details}\n     (
            account: string )\n     \" Get an object with details of ACCOUNT. \\\n     \\
            Fails if account does not exist.\"\n     )\n\n   (defun precision:integer\n     ()\n     \"Return
            the maximum allowed decimal precision.\"\n     )\n\n   (defun enforce-unit:bool\n     (
            amount:decimal )\n     \" Enforce minimum precision allowed for transactions.\"\n     )\n\n   (defun
            create-account:string\n     ( account:string\n       guard:guard\n     )\n     \"
            Create ACCOUNT with 0.0 balance, with GUARD controlling access.\"\n     )\n\n   (defun
            rotate:string\n     ( account:string\n       new-guard:guard\n     )\n     \"
            Rotate guard for ACCOUNT. Transaction is validated against \\\n     \\
            existing guard before installing new guard. \"\n     )\n\n)\n","meta":{"model":[],"docs":"
            Standard for fungible coins and tokens as specified in KIP-0002. "}},"refMap":{"enforce-unit":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"amount","type":"decimal","info":{"d":[6,3603,3603],"c":"amount"}}],"return":"bool"},"defName":"enforce-unit","defBody":{"scope":{"list":[],"type":"*","i":{"d":[120,3571,3571],"c":"(defun
            enforce-unit:bool\n     ( amount:decimal )\n     \" Enforce minimum precision
            allowed for transactions.\"\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Enforce minimum precision allowed for transactions."},"info":{"d":[120,3571,3571],"c":"(defun
            enforce-unit:bool\n     ( amount:decimal )\n     \" Enforce minimum precision
            allowed for transactions.\"\n     )\n\n   "}}},"create-account":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3727,3727],"c":"account"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,3749,3749],"c":"guard"}}],"return":"string"},"defName":"create-account","defBody":{"scope":{"list":[],"type":"*","i":{"d":[160,3691,3691],"c":"(defun
            create-account:string\n     ( account:string\n       guard:guard\n     )\n     \"
            Create ACCOUNT with 0.0 balance, with GUARD controlling access.\"\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Create ACCOUNT with 0.0 balance, with GUARD controlling access."},"info":{"d":[160,3691,3691],"c":"(defun
            create-account:string\n     ( account:string\n       guard:guard\n     )\n     \"
            Create ACCOUNT with 0.0 balance, with GUARD controlling access.\"\n     )\n\n   "}}},"precision":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[],"return":"integer"},"defName":"precision","defBody":{"scope":{"list":[],"type":"*","i":{"d":[97,3474,3474],"c":"(defun
            precision:integer\n     ()\n     \"Return the maximum allowed decimal
            precision.\"\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"Return
            the maximum allowed decimal precision."},"info":{"d":[97,3474,3474],"c":"(defun
            precision:integer\n     ()\n     \"Return the maximum allowed decimal
            precision.\"\n     )\n\n   "}}},"transfer-create":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1543,1543],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,1564,1564],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,1587,1587],"c":"receiver-guard"}},{"name":"amount","type":"decimal","info":{"d":[6,1615,1615],"c":"amount"}}],"return":"string"},"defName":"transfer-create","defBody":{"scope":{"list":[],"type":"*","i":{"d":[656,1506,1506],"c":"(defun
            transfer-create:string\n     ( sender:string\n       receiver:string\n       receiver-guard:guard\n       amount:decimal\n     )\n     @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n          \\
            Fails if SENDER does not exist. If RECEIVER exists, guard \\\n          \\
            must match existing value. If RECEIVER does not exist, \\\n          \\
            RECEIVER account is created using RECEIVER-GUARD. \\\n          \\ Subject
            to management by TRANSFER capability.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n            ]\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,1984,1984],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,1994,1994],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,1996,1996],"c":"amount
            "}},{"i":{"d":[3,2003,2003],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,1993,1993],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[40,1983,1983],"c":"(property (> amount
            0.0))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2024,2024],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2034,2034],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,2037,2037],"c":"sender
            "}},{"i":{"d":[2,2044,2044],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,2033,2033],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[40,2023,2023],"c":"(property (!= sender
            \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2064,2064],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2074,2074],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,2077,2077],"c":"receiver
            "}},{"i":{"d":[2,2086,2086],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,2073,2073],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[42,2063,2063],"c":"(property (!=
            receiver \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2106,2106],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,2116,2116],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,2119,2119],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,2126,2126],"c":"receiver"}}],"d":"()","i":{"d":[20,2115,2115],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[44,2105,2105],"c":"(property (!=
            sender receiver))\n            "}}],"docs":" Transfer AMOUNT between accounts
            SENDER and RECEIVER.  Fails if SENDER does not exist. If RECEIVER exists,
            guard  must match existing value. If RECEIVER does not exist,  RECEIVER
            account is created using RECEIVER-GUARD.  Subject to management by TRANSFER
            capability."},"info":{"d":[656,1506,1506],"c":"(defun transfer-create:string\n     (
            sender:string\n       receiver:string\n       receiver-guard:guard\n       amount:decimal\n     )\n     @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n          \\
            Fails if SENDER does not exist. If RECEIVER exists, guard \\\n          \\
            must match existing value. If RECEIVER does not exist, \\\n          \\
            RECEIVER account is created using RECEIVER-GUARD. \\\n          \\ Subject
            to management by TRANSFER capability.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n            ]\n     )\n\n   "}}},"details":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3356,3356],"c":"account"}}],"return":{"schema":"object","type":{"var":{"ref":{"modname":{"namespace":null,"name":"fungible-v2"},"name":"account-details","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,283,283],"c":"invariant
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,294,294],"c":"!= "}},{"i":{"d":[3,297,297],"c":"\"\"
            "},"lit":""},{"atom":"sender","q":[],"i":{"d":[6,300,300],"c":"sender"}}],"d":"()","i":{"d":[14,293,293],"c":"(!=
            \"\" sender)"}}],"d":"()","i":{"d":[27,282,282],"c":"(invariant (!= \"\"
            sender)) "}}],"docs":"Schema for results of ''account'' operation."},"i":{"d":[272,188,188],"c":"(defschema
            account-details\n    @doc \"Schema for results of ''account'' operation.\"\n    @model
            [ (invariant (!= \"\" sender)) ]\n\n    account:string\n    balance:decimal\n    guard:guard)\n\n\n   ;
            ----------------------------------------------------------------------\n   ;
            Caps\n\n   "},"fields":[{"name":"account","type":"string","info":{"d":[7,316,316],"c":"account"}},{"name":"balance","type":"decimal","info":{"d":[7,335,335],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,355,355],"c":"guard"}}]}},"i":{"d":[15,3332,3332],"c":"account-details"}},"partial":"full"}},"defName":"details","defBody":{"scope":{"list":[],"type":"*","i":{"d":[164,3310,3310],"c":"(defun
            details:object{account-details}\n     ( account: string )\n     \" Get
            an object with details of ACCOUNT. \\\n     \\ Fails if account does not
            exist.\"\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Get an object with details of ACCOUNT.  Fails if account does not exist."},"info":{"d":[164,3310,3310],"c":"(defun
            details:object{account-details}\n     ( account: string )\n     \" Get
            an object with details of ACCOUNT. \\\n     \\ Fails if account does not
            exist.\"\n     )\n\n   "}}},"get-balance":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3216,3216],"c":"account"}}],"return":"decimal"},"defName":"get-balance","defBody":{"scope":{"list":[],"type":"*","i":{"d":[128,3182,3182],"c":"(defun
            get-balance:decimal\n     ( account:string )\n     \" Get balance for
            ACCOUNT. Fails if account does not exist.\"\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Get balance for ACCOUNT. Fails if account does not exist."},"info":{"d":[128,3182,3182],"c":"(defun
            get-balance:decimal\n     ( account:string )\n     \" Get balance for
            ACCOUNT. Fails if account does not exist.\"\n     )\n\n   "}}},"transfer-crosschain":{"ref":{"defType":"Defpact","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,2205,2205],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,2226,2226],"c":"receiver"}},{"name":"receiver-guard","type":{"guard":null},"info":{"d":[14,2249,2249],"c":"receiver-guard"}},{"name":"target-chain","type":"string","info":{"d":[12,2277,2277],"c":"target-chain"}},{"name":"amount","type":"decimal","info":{"d":[6,2304,2304],"c":"amount"}}],"return":"string"},"defName":"transfer-crosschain","defBody":{"scope":{"list":[],"type":"*","i":{"d":[1020,2162,2162],"c":"(defpact
            transfer-crosschain:string\n     ( sender:string\n       receiver:string\n       receiver-guard:guard\n       target-chain:string\n       amount:decimal\n     )\n     @doc
            \" 2-step pact to transfer AMOUNT from SENDER on current chain \\\n          \\
            to RECEIVER on TARGET-CHAIN via SPV proof. \\\n          \\ TARGET-CHAIN
            must be different than current chain id. \\\n          \\ First step debits
            AMOUNT coins in SENDER account and yields \\\n          \\ RECEIVER, RECEIVER_GUARD
            and AMOUNT to TARGET-CHAIN. \\\n          \\ Second step continuation
            is sent into TARGET-CHAIN with proof \\\n          \\ obtained from the
            spv ''output'' endpoint of Chainweb. \\\n          \\ Proof is validated
            and RECEIVER is credited with AMOUNT \\\n          \\ creating account
            with RECEIVER_GUARD as necessary.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n              (property
            (!= target-chain \"\"))\n            ]\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,2958,2958],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,2968,2968],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,2970,2970],"c":"amount
            "}},{"i":{"d":[3,2977,2977],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,2967,2967],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[40,2957,2957],"c":"(property (> amount
            0.0))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,2998,2998],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3008,3008],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,3011,3011],"c":"sender
            "}},{"i":{"d":[2,3018,3018],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,3007,3007],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[40,2997,2997],"c":"(property (!= sender
            \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3038,3038],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3048,3048],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,3051,3051],"c":"receiver
            "}},{"i":{"d":[2,3060,3060],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,3047,3047],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[42,3037,3037],"c":"(property (!=
            receiver \"\"))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3080,3080],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3090,3090],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,3093,3093],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,3100,3100],"c":"receiver"}}],"d":"()","i":{"d":[20,3089,3089],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[46,3079,3079],"c":"(property (!=
            sender receiver))\n              "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,3126,3126],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,3136,3136],"c":"!= "}},{"atom":"target-chain","q":[],"i":{"d":[13,3139,3139],"c":"target-chain
            "}},{"i":{"d":[2,3152,3152],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[20,3135,3135],"c":"(!=
            target-chain \"\")"}}],"d":"()","i":{"d":[44,3125,3125],"c":"(property
            (!= target-chain \"\"))\n            "}}],"docs":" 2-step pact to transfer
            AMOUNT from SENDER on current chain  to RECEIVER on TARGET-CHAIN via SPV
            proof.  TARGET-CHAIN must be different than current chain id.  First step
            debits AMOUNT coins in SENDER account and yields  RECEIVER, RECEIVER_GUARD
            and AMOUNT to TARGET-CHAIN.  Second step continuation is sent into TARGET-CHAIN
            with proof  obtained from the spv ''output'' endpoint of Chainweb.  Proof
            is validated and RECEIVER is credited with AMOUNT  creating account with
            RECEIVER_GUARD as necessary."},"info":{"d":[1020,2162,2162],"c":"(defpact
            transfer-crosschain:string\n     ( sender:string\n       receiver:string\n       receiver-guard:guard\n       target-chain:string\n       amount:decimal\n     )\n     @doc
            \" 2-step pact to transfer AMOUNT from SENDER on current chain \\\n          \\
            to RECEIVER on TARGET-CHAIN via SPV proof. \\\n          \\ TARGET-CHAIN
            must be different than current chain id. \\\n          \\ First step debits
            AMOUNT coins in SENDER account and yields \\\n          \\ RECEIVER, RECEIVER_GUARD
            and AMOUNT to TARGET-CHAIN. \\\n          \\ Second step continuation
            is sent into TARGET-CHAIN with proof \\\n          \\ obtained from the
            spv ''output'' endpoint of Chainweb. \\\n          \\ Proof is validated
            and RECEIVER is credited with AMOUNT \\\n          \\ creating account
            with RECEIVER_GUARD as necessary.\"\n     @model [ (property (> amount
            0.0))\n              (property (!= sender \"\"))\n              (property
            (!= receiver \"\"))\n              (property (!= sender receiver))\n              (property
            (!= target-chain \"\"))\n            ]\n     )\n\n   "}}},"TRANSFER":{"ref":{"defType":"Defcap","defMeta":{"managedParam":"amount","managerFun":{"var":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,780,780],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,803,803],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[],"type":"*","i":{"d":[352,745,745],"c":"(defun
            TRANSFER-mgr:decimal\n     ( managed:decimal\n       requested:decimal\n     )\n     @doc
            \" Manages TRANSFER AMOUNT linearly, \\\n          \\ such that a request
            for 1.0 amount on a 3.0 \\\n          \\ managed quantity emits updated
            amount 2.0.\"\n     )\n\n   ; ----------------------------------------------------------------------\n   ;
            Functionality\n\n\n  "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Manages TRANSFER AMOUNT linearly,  such that a request for 1.0 amount
            on a 3.0  managed quantity emits updated amount 2.0."},"info":{"d":[352,745,745],"c":"(defun
            TRANSFER-mgr:decimal\n     ( managed:decimal\n       requested:decimal\n     )\n     @doc
            \" Manages TRANSFER AMOUNT linearly, \\\n          \\ such that a request
            for 1.0 amount on a 3.0 \\\n          \\ managed quantity emits updated
            amount 2.0.\"\n     )\n\n   ; ----------------------------------------------------------------------\n   ;
            Functionality\n\n\n  "}}},"i":{"d":[18,721,721],"c":"TRANSFER-mgr\n     "}}},"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,489,489],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,510,510],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,533,533],"c":"amount"}}],"return":"bool"},"defName":"TRANSFER","defBody":{"scope":{"list":[],"type":"*","i":{"d":[285,460,460],"c":"(defcap
            TRANSFER:bool\n     ( sender:string\n       receiver:string\n       amount:decimal\n     )\n     @doc
            \" Managed capability sealing AMOUNT for transfer from SENDER to \\\n          \\
            RECEIVER. Permits any number of transfers up to AMOUNT.\"\n     @managed
            amount TRANSFER-mgr\n     )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Managed capability sealing AMOUNT for transfer from SENDER to  RECEIVER.
            Permits any number of transfers up to AMOUNT."},"info":{"d":[285,460,460],"c":"(defcap
            TRANSFER:bool\n     ( sender:string\n       receiver:string\n       amount:decimal\n     )\n     @doc
            \" Managed capability sealing AMOUNT for transfer from SENDER to \\\n          \\
            RECEIVER. Permits any number of transfers up to AMOUNT.\"\n     @managed
            amount TRANSFER-mgr\n     )\n\n   "}}},"transfer":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"sender","type":"string","info":{"d":[6,1126,1126],"c":"sender"}},{"name":"receiver","type":"string","info":{"d":[8,1146,1146],"c":"receiver"}},{"name":"amount","type":"decimal","info":{"d":[6,1168,1168],"c":"amount"}}],"return":"string"},"defName":"transfer","defBody":{"scope":{"list":[],"type":"*","i":{"d":[409,1097,1097],"c":"(defun
            transfer:string\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n         \\
            Fails if either SENDER or RECEIVER does not exist.\"\n    @model [ (property
            (> amount 0.0))\n             (property (!= sender \"\"))\n             (property
            (!= receiver \"\"))\n             (property (!= sender receiver))\n           ]\n    )\n\n   "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[{"list":[{"atom":"property","q":[],"i":{"d":[9,1333,1333],"c":"property
            "}},{"list":[{"atom":">","q":[],"i":{"d":[2,1343,1343],"c":"> "}},{"atom":"amount","q":[],"i":{"d":[7,1345,1345],"c":"amount
            "}},{"i":{"d":[3,1352,1352],"c":"0.0"},"lit":0}],"d":"()","i":{"d":[14,1342,1342],"c":"(>
            amount 0.0)"}}],"d":"()","i":{"d":[39,1332,1332],"c":"(property (> amount
            0.0))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1372,1372],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1382,1382],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,1385,1385],"c":"sender
            "}},{"i":{"d":[2,1392,1392],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[14,1381,1381],"c":"(!=
            sender \"\")"}}],"d":"()","i":{"d":[39,1371,1371],"c":"(property (!= sender
            \"\"))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1411,1411],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1421,1421],"c":"!= "}},{"atom":"receiver","q":[],"i":{"d":[9,1424,1424],"c":"receiver
            "}},{"i":{"d":[2,1433,1433],"c":"\"\""},"lit":""}],"d":"()","i":{"d":[16,1420,1420],"c":"(!=
            receiver \"\")"}}],"d":"()","i":{"d":[41,1410,1410],"c":"(property (!=
            receiver \"\"))\n             "}},{"list":[{"atom":"property","q":[],"i":{"d":[9,1452,1452],"c":"property
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,1462,1462],"c":"!= "}},{"atom":"sender","q":[],"i":{"d":[7,1465,1465],"c":"sender
            "}},{"atom":"receiver","q":[],"i":{"d":[8,1472,1472],"c":"receiver"}}],"d":"()","i":{"d":[20,1461,1461],"c":"(!=
            sender receiver)"}}],"d":"()","i":{"d":[43,1451,1451],"c":"(property (!=
            sender receiver))\n           "}}],"docs":" Transfer AMOUNT between accounts
            SENDER and RECEIVER.  Fails if either SENDER or RECEIVER does not exist."},"info":{"d":[409,1097,1097],"c":"(defun
            transfer:string\n    ( sender:string\n      receiver:string\n      amount:decimal\n    )\n    @doc
            \" Transfer AMOUNT between accounts SENDER and RECEIVER. \\\n         \\
            Fails if either SENDER or RECEIVER does not exist.\"\n    @model [ (property
            (> amount 0.0))\n             (property (!= sender \"\"))\n             (property
            (!= receiver \"\"))\n             (property (!= sender receiver))\n           ]\n    )\n\n   "}}},"TRANSFER-mgr":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"managed","type":"decimal","info":{"d":[7,780,780],"c":"managed"}},{"name":"requested","type":"decimal","info":{"d":[9,803,803],"c":"requested"}}],"return":"decimal"},"defName":"TRANSFER-mgr","defBody":{"scope":{"list":[],"type":"*","i":{"d":[352,745,745],"c":"(defun
            TRANSFER-mgr:decimal\n     ( managed:decimal\n       requested:decimal\n     )\n     @doc
            \" Manages TRANSFER AMOUNT linearly, \\\n          \\ such that a request
            for 1.0 amount on a 3.0 \\\n          \\ managed quantity emits updated
            amount 2.0.\"\n     )\n\n   ; ----------------------------------------------------------------------\n   ;
            Functionality\n\n\n  "}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Manages TRANSFER AMOUNT linearly,  such that a request for 1.0 amount
            on a 3.0  managed quantity emits updated amount 2.0."},"info":{"d":[352,745,745],"c":"(defun
            TRANSFER-mgr:decimal\n     ( managed:decimal\n       requested:decimal\n     )\n     @doc
            \" Manages TRANSFER AMOUNT linearly, \\\n          \\ such that a request
            for 1.0 amount on a 3.0 \\\n          \\ managed quantity emits updated
            amount 2.0.\"\n     )\n\n   ; ----------------------------------------------------------------------\n   ;
            Functionality\n\n\n  "}}},"account-details":{"ref":{"modname":{"namespace":null,"name":"fungible-v2"},"name":"account-details","meta":{"model":[{"list":[{"atom":"invariant","q":[],"i":{"d":[10,283,283],"c":"invariant
            "}},{"list":[{"atom":"!=","q":[],"i":{"d":[3,294,294],"c":"!= "}},{"i":{"d":[3,297,297],"c":"\"\"
            "},"lit":""},{"atom":"sender","q":[],"i":{"d":[6,300,300],"c":"sender"}}],"d":"()","i":{"d":[14,293,293],"c":"(!=
            \"\" sender)"}}],"d":"()","i":{"d":[27,282,282],"c":"(invariant (!= \"\"
            sender)) "}}],"docs":"Schema for results of ''account'' operation."},"i":{"d":[272,188,188],"c":"(defschema
            account-details\n    @doc \"Schema for results of ''account'' operation.\"\n    @model
            [ (invariant (!= \"\" sender)) ]\n\n    account:string\n    balance:decimal\n    guard:guard)\n\n\n   ;
            ----------------------------------------------------------------------\n   ;
            Caps\n\n   "},"fields":[{"name":"account","type":"string","info":{"d":[7,316,316],"c":"account"}},{"name":"balance","type":"decimal","info":{"d":[7,335,335],"c":"balance"}},{"name":"guard","type":{"guard":null},"info":{"d":[5,355,355],"c":"guard"}}]}},"rotate":{"ref":{"defType":"Defun","defMeta":null,"funType":{"args":[{"name":"account","type":"string","info":{"d":[7,3879,3879],"c":"account"}},{"name":"new-guard","type":{"guard":null},"info":{"d":[9,3901,3901],"c":"new-guard"}}],"return":"string"},"defName":"rotate","defBody":{"scope":{"list":[],"type":"*","i":{"d":[202,3851,3851],"c":"(defun
            rotate:string\n     ( account:string\n       new-guard:guard\n     )\n     \"
            Rotate guard for ACCOUNT. Transaction is validated against \\\n     \\
            existing guard before installing new guard. \"\n     )\n\n"}}},"module":{"namespace":null,"name":"fungible-v2"},"meta":{"model":[],"docs":"
            Rotate guard for ACCOUNT. Transaction is validated against  existing guard
            before installing new guard. "},"info":{"d":[202,3851,3851],"c":"(defun
            rotate:string\n     ( account:string\n       new-guard:guard\n     )\n     \"
            Rotate guard for ACCOUNT. Transaction is validated against \\\n     \\
            existing guard before installing new guard. \"\n     )\n\n"}}}}}'
      coin_coin-table:
        NoMiner:
          '7': '{"guard":{"pred":"<","keys":[]},"balance":2.304523}'
  txId: 10
results:
  coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJJbXRNTUVWWWEyc3lkMlJrVFZkeU1sRkJUVU5YUkRaelFqZHBNR3hPVTFZM2VGWm5XSGN5YWxBelNFMGkiLCJsb2dzIjoibFdaVWZjX0dKdGxUUy1LeDAtYm00aXRfSWE5bnNGZG5jZ2NwSE0td091OCIsIm1ldGFEYXRhIjpudWxsLCJjb250aW51YXRpb24iOm51bGwsInR4SWQiOjd9
  minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
  outputsHash: BRFFHFEHv4IbjOUrIkWgp2N0eU-6mijYqRU1pcGVHJ8
  payloadHash: h490ZOFfkwbnGOFgAtxj8v7B-u2BJiMzmySXUwB2Fq4
  transactions: []
  transactionsHash: lL9ztEiU-NwzrlTpBbvhT4M1l5Shsht94OwFyhBaFD0
test-group: new-block
