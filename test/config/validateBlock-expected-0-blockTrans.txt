{"hash":"2770b3ad5fd0628c25ab12c4082d8ef98c132f3465059e34efc8351597a3903d8a6ab0ae6f2eba5c626972b071556cdadc1b38c85a233530ccc6d294c346414c","sigs":[{"addr":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d","sig":"73481d25adb799676acd7074dcc42a8186b5ab6914d7b2d93ff811e144a4a283e5d5b61abe81fab15333a4cf830689be0d752843513d56465e053fd6d0dd360f","scheme":"ED25519","pubKey":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d\"]},\"code\":\"(define-keyset 'test-admin (read-keyset \\\"test-admin-keyset\\\"))\\n\\n(module test1 'test-admin\\n\\n  (defschema account\\n    balance:decimal\\n    amount:decimal\\n    data)\\n\\n  (deftable accounts:{account})\\n\\n  (defun create-account (id init-bal)\\n    (insert accounts id\\n         { \\\"balance\\\": init-bal, \\\"amount\\\": init-bal, \\\"data\\\": \\\"Created account\\\" }))\\n\\n  (defun transfer (src dest amount)\\n    \\\"transfer AMOUNT from SRC to DEST for unencrypted accounts\\\"\\n    (debit src amount { \\\"transfer-to\\\": dest })\\n    (credit dest amount { \\\"transfer-from\\\": src }))\\n\\n  (defpact payment (src-entity src dest-entity dest amount)\\n    \\\"Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY.\\\"\\n\\n    (step-with-rollback\\n     src-entity\\n     (let ((result (debit src amount { \\\"transfer-to\\\": dest, \\\"message\\\": \\\"Starting pact\\\" })))\\n       (yield { \\\"result\\\": result, \\\"amount\\\": amount, \\\"tx\\\": (pact-id) }))\\n     (credit src amount { \\\"rollback\\\": (pact-id) }))\\n\\n    (step\\n     dest-entity\\n     (resume { \\\"result\\\":= result, \\\"amount\\\":= debit-amount }\\n       (credit dest debit-amount\\n               { \\\"transfer-from\\\": src, \\\"debit-result\\\": result, \\\"tx\\\": (pact-id) }))))\\n\\n  (defun debit (acct amount data)\\n    \\\"Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (check-balance balance amount)\\n      (update accounts acct\\n            { \\\"balance\\\": (- balance amount), \\\"amount\\\": (- amount)\\n            , \\\"data\\\": data })))\\n\\n  (defun credit (acct amount data)\\n    \\\"Credit ACCT for AMOUNT, enforcing positive amount\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (update accounts acct\\n            { \\\"balance\\\": (+ balance amount), \\\"amount\\\": amount\\n            , \\\"data\\\": data })))\\n\\n\\n  (defun read-account (id)\\n    \\\"Read data for account ID\\\"\\n    (+ { \\\"account\\\": id } (read accounts id)))\\n\\n  (defun check-balance (balance amount)\\n    (enforce (<= amount balance) \\\"Insufficient funds\\\"))\\n\\n  (defun enforce-positive (amount)\\n    (enforce (>= amount 0.0) \\\"amount must be positive\\\"))\\n\\n (defun read-all ()\\n   (map (read-account) (keys accounts)))\\n\\n (defun read-all-global ()\\n   (map (read-account) [\\\"Acct1\\\" \\\"Acct2\\\"]))\\n\\n (defun create-global-accounts ()\\n   (create-account \\\"Acct1\\\" 1000000.0)\\n   (create-account \\\"Acct2\\\" 0.0)\\n   (read-all))\\n\\n (defpact create-private-accounts ()\\n   (step \\\"Alice\\\" (create-account \\\"A\\\" 1000.0))\\n   (step \\\"Bob\\\" (create-account \\\"B\\\" 1000.0))\\n   (step \\\"Carol\\\" (create-account \\\"C\\\" 1000.0))\\n   (step \\\"Dinesh\\\" (create-account \\\"D\\\" 1000.0)))\\n\\n)\\n\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender0\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"18aeb9e967e85ce3b763b7f48c052d99975e67dc01dd8b647bd6c889e1cb329cc9dc4833d7691607f1f49414bc21fc4aeb538e52d9500eb34b8b3542f47ee78b","sigs":[{"addr":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d","sig":"4a292f521759636a9306897313333dc6dd827ddc3cd7044dcedd65eeb91369d1cdff50adf55c85dff0c83f58eeaa28d1191dcdcfa797f6f7b8513a325218bd08","scheme":"ED25519","pubKey":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d\"]},\"code\":\"(create-table test1.accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender0\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"fdb48f40735a350b1d541d67e66b32210671378e1003748e17e81ce718cb0bb9e3acd7fb81246d81fd2d9bd49e0a3b539c8cb371f11f50946395534fca58acac","sigs":[{"addr":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d","sig":"2dc24214afcc4302fbe88ba4041c3033fbaa111e5eb3af60ffbb7127a908cc45436c7f237c9d85c0af2edaddcc18ddbf1bb08e4c1f8aecca55cddcb8d4c70305","scheme":"ED25519","pubKey":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d\"]},\"code\":\"(test1.create-global-accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender0\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"d63f201a56cfdafa59ded28480e81165c8bf78eaa0b1ebb50f8845bd952ae162cadf318b438392df3d301e806c6f4402cc47c64ff876f1d4571f7ef35bf41f11","sigs":[{"addr":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d","sig":"1f32d96ad1686edfbd33a73c4a3871de0da09fbd875833ce8b85ad6fad06a51cf443c3f74c43ddb3b7bdf1cb503a07fca65c7b2e7d446266efdba75f40887701","scheme":"ED25519","pubKey":"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"ba54b224d1924dd98403f5c751abdd10de6cd81b0121800bf7bdbdcfaec7388d\"]},\"code\":\"(test1.transfer \\\"Acct1\\\" \\\"Acct2\\\" 1.00)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender0\",\"fee\":0},\"nonce\":\"1\"}"}