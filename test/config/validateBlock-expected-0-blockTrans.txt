{"hash":"95fd147061dd2373f76b857f7d1449380a136920517c894fbb6b46027fe84795571042dfd8356d02f448f97d371c600277e200ad35de40d92e56daa54f0ceae7","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"bdcf8ee372a4f44ba4557df3f7deced894aadfc9fa5ac7696d76f704db1c5c8da17a62fcd61fde456c521c09914b968081663f48c3f86166e56bfe1f10615e03","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(define-keyset 'test-admin (read-keyset \\\"test-admin-keyset\\\"))\\n\\n(module test1 'test-admin\\n\\n  (defschema account\\n    balance:decimal\\n    amount:decimal\\n    data)\\n\\n  (deftable accounts:{account})\\n\\n  (defun create-account (id init-bal)\\n    (insert accounts id\\n         { \\\"balance\\\": init-bal, \\\"amount\\\": init-bal, \\\"data\\\": \\\"Created account\\\" }))\\n\\n  (defun transfer (src dest amount)\\n    \\\"transfer AMOUNT from SRC to DEST for unencrypted accounts\\\"\\n    (debit src amount { \\\"transfer-to\\\": dest })\\n    (credit dest amount { \\\"transfer-from\\\": src }))\\n\\n  (defpact payment (src-entity src dest-entity dest amount)\\n    \\\"Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY.\\\"\\n\\n    (step-with-rollback\\n     src-entity\\n     (let ((result (debit src amount { \\\"transfer-to\\\": dest, \\\"message\\\": \\\"Starting pact\\\" })))\\n       (yield { \\\"result\\\": result, \\\"amount\\\": amount, \\\"tx\\\": (pact-id) }))\\n     (credit src amount { \\\"rollback\\\": (pact-id) }))\\n\\n    (step\\n     dest-entity\\n     (resume { \\\"result\\\":= result, \\\"amount\\\":= debit-amount }\\n       (credit dest debit-amount\\n               { \\\"transfer-from\\\": src, \\\"debit-result\\\": result, \\\"tx\\\": (pact-id) }))))\\n\\n  (defun debit (acct amount data)\\n    \\\"Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (check-balance balance amount)\\n      (update accounts acct\\n            { \\\"balance\\\": (- balance amount), \\\"amount\\\": (- amount)\\n            , \\\"data\\\": data })))\\n\\n  (defun credit (acct amount data)\\n    \\\"Credit ACCT for AMOUNT, enforcing positive amount\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (update accounts acct\\n            { \\\"balance\\\": (+ balance amount), \\\"amount\\\": amount\\n            , \\\"data\\\": data })))\\n\\n\\n  (defun read-account (id)\\n    \\\"Read data for account ID\\\"\\n    (+ { \\\"account\\\": id } (read accounts id)))\\n\\n  (defun check-balance (balance amount)\\n    (enforce (<= amount balance) \\\"Insufficient funds\\\"))\\n\\n  (defun enforce-positive (amount)\\n    (enforce (>= amount 0.0) \\\"amount must be positive\\\"))\\n\\n (defun read-all ()\\n   (map (read-account) (keys accounts)))\\n\\n (defun read-all-global ()\\n   (map (read-account) [\\\"Acct1\\\" \\\"Acct2\\\"]))\\n\\n (defun create-global-accounts ()\\n   (create-account \\\"Acct1\\\" 1000000.0)\\n   (create-account \\\"Acct2\\\" 0.0)\\n   (read-all))\\n\\n (defpact create-private-accounts ()\\n   (step \\\"Alice\\\" (create-account \\\"A\\\" 1000.0))\\n   (step \\\"Bob\\\" (create-account \\\"B\\\" 1000.0))\\n   (step \\\"Carol\\\" (create-account \\\"C\\\" 1000.0))\\n   (step \\\"Dinesh\\\" (create-account \\\"D\\\" 1000.0)))\\n\\n)\\n\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"519fdc8dce8d29087606babc2f4ac2f800e2adb48602da871eb8eb123b92df4065ad4d33083119bb6ffa6523f71fb27cdb9d6d688e29dfe1978b7ed638261ae0","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"9b2a781b51e197c081f01faf30ad54b96b8084f5dd3143d68e4725e377971b38a8ca42a93591a2acc48c536a1d6c0ea42a3c0e63e751c646db860a701d7c2902","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(create-table test1.accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"e4975cc10dbae5932636ca9697255e1d2d34144a0aa6c9ce3e5f3b7b73432fa6ba41ef11ce6583421ab7dbd5b09c13bf00a65fb497fe3ef76aa9ea6d7170d9da","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"2fb367b975f26f63e7bc233e0a6919ac0e404eac79a08e6e6f87cb2937d62e46cc4bee6cc32261139a26c97e4dc1b11e2c42485671d97f5b0d1190bf526f2e0f","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(test1.create-global-accounts)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"66a166284751b7a3f812938caacd4313424ff9bd0921ae2f3850740e9979bef9a5e08a13aeefd3b9ebd7edd41c43ec20ff6052f3dcf0841a68d6de9baf93face","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"89ee0ad7666187865885a05e81fbb4ea281634a38f917467358de4ae9e5d71c724106b1ce36534c0d35bbf0882e7d569cc6eef6db2a27ca296048dd845ca010b","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(test1.transfer \\\"Acct1\\\" \\\"Acct2\\\" 1.00)\"}},\"meta\":{\"gasLimit\":0,\"chainId\":\"\",\"gasPrice\":0,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}