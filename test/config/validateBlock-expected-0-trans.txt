{"hash":"30b6fe46972f8d623f8143b3b8bbbd4b3bf5c6bfe0281ba420a64683935ac3010d51c9aebfbcfdb51a1952ddea493f36b084ac109ccc137e81b1b29cef3c00f2","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"e87a97d096fa1be7eb063144a0865b57724ccedfd139064abf1d79a20bd4b2a849f8f785a9d2e24d6a492763d5494cff4dbf93b6c3cf3dcfed34dcc13416c40e","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(define-keyset 'test-admin (read-keyset \\\"test-admin-keyset\\\"))\\n\\n(module test1 'test-admin\\n\\n  (defschema account\\n    balance:decimal\\n    amount:decimal\\n    data)\\n\\n  (deftable accounts:{account})\\n\\n  (defun create-account (id init-bal)\\n    (insert accounts id\\n         { \\\"balance\\\": init-bal, \\\"amount\\\": init-bal, \\\"data\\\": \\\"Created account\\\" }))\\n\\n  (defun transfer (src dest amount)\\n    \\\"transfer AMOUNT from SRC to DEST for unencrypted accounts\\\"\\n    (debit src amount { \\\"transfer-to\\\": dest })\\n    (credit dest amount { \\\"transfer-from\\\": src }))\\n\\n  (defpact payment (src-entity src dest-entity dest amount)\\n    \\\"Two-phase confidential payment, sending money from SRC at SRC-ENTITY to DEST at DEST-ENTITY.\\\"\\n\\n    (step-with-rollback\\n     src-entity\\n     (let ((result (debit src amount { \\\"transfer-to\\\": dest, \\\"message\\\": \\\"Starting pact\\\" })))\\n       (yield { \\\"result\\\": result, \\\"amount\\\": amount, \\\"tx\\\": (pact-id) }))\\n     (credit src amount { \\\"rollback\\\": (pact-id) }))\\n\\n    (step\\n     dest-entity\\n     (resume { \\\"result\\\":= result, \\\"amount\\\":= debit-amount }\\n       (credit dest debit-amount\\n               { \\\"transfer-from\\\": src, \\\"debit-result\\\": result, \\\"tx\\\": (pact-id) }))))\\n\\n  (defun debit (acct amount data)\\n    \\\"Debit ACCT for AMOUNT, enforcing positive amount and sufficient funds, annotating with DATA\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (check-balance balance amount)\\n      (update accounts acct\\n            { \\\"balance\\\": (- balance amount), \\\"amount\\\": (- amount)\\n            , \\\"data\\\": data })))\\n\\n  (defun credit (acct amount data)\\n    \\\"Credit ACCT for AMOUNT, enforcing positive amount\\\"\\n    (enforce-positive amount)\\n    (with-read accounts acct { \\\"balance\\\":= balance }\\n      (update accounts acct\\n            { \\\"balance\\\": (+ balance amount), \\\"amount\\\": amount\\n            , \\\"data\\\": data })))\\n\\n\\n  (defun read-account (id)\\n    \\\"Read data for account ID\\\"\\n    (+ { \\\"account\\\": id } (read accounts id)))\\n\\n  (defun check-balance (balance amount)\\n    (enforce (<= amount balance) \\\"Insufficient funds\\\"))\\n\\n  (defun enforce-positive (amount)\\n    (enforce (>= amount 0.0) \\\"amount must be positive\\\"))\\n\\n (defun read-all ()\\n   (map (read-account) (keys accounts)))\\n\\n (defun read-all-global ()\\n   (map (read-account) [\\\"Acct1\\\" \\\"Acct2\\\"]))\\n\\n (defun create-global-accounts ()\\n   (create-account \\\"Acct1\\\" 1000000.0)\\n   (create-account \\\"Acct2\\\" 0.0)\\n   (read-all))\\n\\n (defpact create-private-accounts ()\\n   (step \\\"Alice\\\" (create-account \\\"A\\\" 1000.0))\\n   (step \\\"Bob\\\" (create-account \\\"B\\\" 1000.0))\\n   (step \\\"Carol\\\" (create-account \\\"C\\\" 1000.0))\\n   (step \\\"Dinesh\\\" (create-account \\\"D\\\" 1000.0)))\\n\\n)\\n\"}},\"meta\":{\"gasLimit\":100,\"chainId\":\"0\",\"gasPrice\":1.0e-4,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"6223d56da3fcf09a63b9c5cc33d91e6ec99deb94b649f634b7893cb50fde199e8d3211c008f9c83565e34b6b77f71adb8bb93a99f441b670bcdb6abad9163007","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"839ab0ffc7301a6f93e6da9d0c46975ca194cd3f9773af0dbde745fad035dca217e619edacfea54f39c7bec1f9f64f2676f8589b3b7e3573a9f0cd95b1cf3f0b","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(create-table test1.accounts)\"}},\"meta\":{\"gasLimit\":100,\"chainId\":\"0\",\"gasPrice\":1.0e-4,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"cc4f297f5327260388409228df590b1a4ed0fc042576eba46754399c5ff6fdbe0e396b6f14b686bb858b521d072b55b9078ff4293760f9d5d82601f2c114bcc4","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"fe3163defa9f31fe18ef9651cd6881ad7ec3d80f99ab2ffa37cec6e24d9ac391ed1ae69f6f7aee4235bab80d5c8de42e8eaa485706c2113704664398d3c4a609","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(test1.create-global-accounts)\"}},\"meta\":{\"gasLimit\":100,\"chainId\":\"0\",\"gasPrice\":1.0e-4,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}{"hash":"d80a5c869e028f3a459fa468dbbfcf75a3f5575a054b93a296b1134367ab93f8af4d3670322accf30d72deed6d43c12b3c58650cd3e2e5664956fd40cab7af32","sigs":[{"addr":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca","sig":"d283476e6d2dd44dec27a382c3934b99df9793753e7c353448571b0cc9309d44ebc33800a9e8e4eff2a20da901e70a854e419688bb92a3548bd45e49933cd406","scheme":"ED25519","pubKey":"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca"}],"cmd":"{\"payload\":{\"exec\":{\"data\":{\"test-admin-keyset\":[\"368820f80c324bbc7c2b0610688a7da43e39f91d118732671cd9c7500ff43cca\"]},\"code\":\"(test1.transfer \\\"Acct1\\\" \\\"Acct2\\\" 1.00)\"}},\"meta\":{\"gasLimit\":100,\"chainId\":\"0\",\"gasPrice\":1.0e-4,\"sender\":\"sender00\",\"fee\":0},\"nonce\":\"1\"}"}