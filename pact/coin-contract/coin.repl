(begin-tx)

(load "coin.pact")

(commit-tx)
(begin-tx)

(verify 'coin)

(env-data { "k1" : ["keys1"], "k2": ["keys2"], "k3": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3"])
(define-keyset 'k1 (read-keyset "k1"))
(define-keyset 'k2 (read-keyset "k2"))
(define-keyset 'k3 (read-keyset "k3"))

(use coin)

; account balance for k1 does not exist, because account does not exist yet
(expect-failure "account does not exist yet" (account-balance 'k1))

; create accounts should succeed and initialize with correct amounts
(create-account 'k1 (read-keyset 'k1))
(create-account 'k2 (read-keyset 'k2))
(expect "initial balance at 0.0" 0.0 (account-balance 'k1))

; debits should fail on empty accounts and succeed on non-empty
; credits should succeed. Both should reflect the correct balance
(expect-failure "credit should fail when TRANSFER is not in scope" (credit 'k1 (read-keyset 'k1) 1.0))
(expect-failure "debit should fail when TRANSFER is not in scope" (debit 'k1 1.0))
(test-capability (TRANSFER))
(expect-failure "debit from account with 0.0 in it yields failure" (debit 'k1 1.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(expect "account balance reflects credit" 1.0 (account-balance 'k1))
(debit 'k1 1.0)
(expect "debiting funds now succeeds when there's enough funds" 0.0 (account-balance 'k1))
;crediting non-existing accounts with guard should have supplied keys
(credit 'k3 (read-keyset 'k3) 1.0)
(expect "crediting funds to new account succeeds with correct balance" 1.0 (account-balance 'k3))
(expect-failure "cannot update a keyset for an existing account with wrong keyset" (credit 'k3 (read-keyset 'k2) 1.0))

; fund-tx should require FUND_TX capability in scope, and all funds should succeed
; when available and reflect correct balances
(expect-failure "fund-tx should fail when FUND-TX is not in scope" (fund-tx 'k1 'k2 (read-keyset 'k2) 1.0))
(test-capability (FUND_TX))
(expect-failure "FUND-TX fails for insufficient funds" (fund-tx 'k1 'k2 (read-keyset 'k2) 1.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(commit-tx)

;; fund-tx (gas buying) tests

(begin-tx)
(use coin)
(env-data { "fee" : 0.0, "k1" : ["keys1"], "k2": ["keys2"] })
(env-keys ["keys1", "keys2"])
(test-capability (TRANSFER))
(test-capability (FUND_TX))

(fund-tx 'k1 'k2 (read-keyset 'k2) 1.0)
(expect "k2 should now have 0.0 coins having mined the tx due to 0 gas" 0.0 (account-balance 'k2))
(expect "k1 should now have 0.0 coins after paying miner" 0.0 (account-balance 'k1))

(rollback-tx)
(begin-tx)
(use coin)

(env-data { "fee" : 0.4, "k1" : ["keys1"], "k2": ["keys2"] })
(env-keys ["keys1", "keys2"])

(test-capability (TRANSFER))
(test-capability (FUND_TX))

(coin.fund-tx 'k1 'k2 (read-keyset 'k2) 1.0)

(continue-pact 1)
(expect "k2 should now have 0.4 coins after mining 0.4 coin fee" 0.4 (account-balance 'k2))
(expect "k1 should now have 0.6 coins after paying for 0.4 coin fee" 0.6 (account-balance 'k1))

;; transfers should respect balances as intended
(expect "roundtrip 0.0 transfer succeeds" "Write succeeded" (transfer 'k1 'k2 (read-keyset 'k2) 0.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(transfer 'k1 'k2 (read-keyset 'k2) 1.0)
(expect "k1 now has 0.6 coins after transfer to 'k2" 0.6 (account-balance 'k1))
(expect "k2 now has 1.4 coins after transfer from 'k1" 1.4 (account-balance 'k2))
(expect-failure "k1 now has insufficient funds and cannot transfer"
                (transfer 'k1 'k2 (read-keyset 'k2) 1.0))

; coinbase should fail when 'COINBASE' capability is not in scope
; and should magically create tokens for users and reflect correct balance
(expect-failure "coinbase fails when capability is not in scope" (coinbase 'k1 (read-keyset 'k1) 0.0))
(test-capability (COINBASE))
(coinbase 'k1 (read-keyset 'k1) 1.0)
(expect "after coinbase, k1 should have 1.6 coins in its account" 1.6 (account-balance 'k1))

(env-data { "fee" : 0.4, "k1" : ["keys1"], "k2": ["keys2"], "k3": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3"])

(coinbase 'k3 (read-keyset 'k3) 1.0)
(expect "coinbase should create accounts and credit them some amount" 2.0 (account-balance 'k3))

; SPV tests - note: proof creation will not work as we have no spv support as our default spv
; handler in the environment at this point.
(expect "spv proof creation should succeed" "" (let ((p (delete-coin 'k1 0 'k2 (read-keyset 'k2) 1.0))) ""))
(expect-failure "spv proof creation should fail for insufficient funds" (delete-coin 'k1 0 'k2 (read-keyset 'k2) 2.0))
