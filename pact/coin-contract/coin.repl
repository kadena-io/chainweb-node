(begin-tx)

(load "coin-sig.pact")
(load "coin.pact")

(commit-tx)
(begin-tx)

(verify 'coin)

(env-data { "k1" : ["keys1"], "k2": ["keys2"], "k3": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3", "keys4"])
(define-keyset 'k1 (read-keyset "k1"))
(define-keyset 'k2 (read-keyset "k2"))
(define-keyset 'k3 (read-keyset "k3"))

(use coin)

; account balance for k1 does not exist, because account does not exist yet
(expect-failure "account does not exist yet" (account-balance 'k1))

; create accounts should succeed and initialize with correct amounts and guards
(create-account 'k1 (read-keyset 'k1))
(create-account 'k2 (read-keyset 'k2))
(expect "initial balance at 0.0" 0.0 (account-balance 'k1))
(expect "account-info reflects the correct balance and guard information"
  {"balance": 0.0, "guard": (read-keyset 'k2)} (account-info 'k2))

; debits should fail on empty accounts and succeed on non-empty
; credits should succeed. Both should reflect the correct balance
(expect-failure "credit should fail when TRANSFER is not in scope" (credit 'k1 (read-keyset 'k1) 1.0))
(expect-failure "debit should fail when TRANSFER is not in scope" (debit 'k1 1.0))
(test-capability (TRANSFER))
(expect-failure "debit not > 0.0 quantities fail fast" (debit 'k1 0.0))
(expect-failure "debit not > 0.0 quantities fail fast" (debit 'k1 (- 1.0)))
(expect-failure "debit from account with 0.0 in it yields failure" (debit 'k1 1.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(expect "account balance reflects credit" 1.0 (account-balance 'k1))
(debit 'k1 1.0)
(expect "debiting funds now succeeds when there's enough funds" 0.0 (account-balance 'k1))
;crediting non-existing accounts with guard should have supplied keys
(credit 'k3 (read-keyset 'k3) 1.0)
(expect-failure "crediting trivial or negative funds fails fast" (credit 'k3 (read-keyset 'k3) 0.0))
(expect-failure "crediting trivial or negative funds fails fast" (credit 'k3 (read-keyset 'k3) (- 1.0)))
(expect "crediting funds to new account succeeds with correct balance" 1.0 (account-balance 'k3))
(expect-failure "cannot update a keyset for an existing account with wrong keyset" (credit 'k3 (read-keyset 'k2) 1.0))

; fund-tx should require FUND_TX capability in scope, and all funds should succeed
; when available and reflect correct balances
(expect-failure "fund-tx should fail when FUND-TX is not in scope" (fund-tx 'k1 'k2 (read-keyset 'k2) 1.0))
(test-capability (FUND_TX))
(expect-failure "FUND-TX fails for trivial or negative quantities" (fund-tx 'k1 'k2 (read-keyset 'k2) 0.0))
(expect-failure "FUND-TX fails for trivial or negative quantities" (fund-tx 'k1 'k2 (read-keyset 'k2) (- 1.0)))
(expect-failure "FUND-TX fails for insufficient funds" (fund-tx 'k1 'k2 (read-keyset 'k2) 1.0))
(credit 'k1 (read-keyset 'k1) 1.0)
(commit-tx)

;; fund-tx (gas buying) tests

(begin-tx)
(use coin)
(env-data { "fee" : 0.0, "k1" : ["keys1"], "k2": ["keys2"] })
(env-keys ["keys1", "keys2"])
(test-capability (TRANSFER))
(test-capability (FUND_TX))

(fund-tx 'k1 'k2 (read-keyset 'k2) 1.0)
(expect "k2 should now have 0.0 coins having mined the tx due to 0 gas" 0.0 (account-balance 'k2))
(expect "k1 should now have 0.0 coins after paying miner" 0.0 (account-balance 'k1))

(rollback-tx)
(begin-tx)
(use coin)

(env-data { "fee" : 0.4, "k1" : ["keys1"], "k2": ["keys2"], "k4": ["keys4"] })
(env-keys ["keys1", "keys2", "keys4"])

(test-capability (TRANSFER))
(test-capability (FUND_TX))

(coin.fund-tx 'k1 'k2 (read-keyset 'k2) 1.0)

(continue-pact 1)
(expect "k2 should now have 0.4 coins after mining 0.4 coin fee" 0.4 (account-balance 'k2))
(expect "k1 should now have 0.6 coins after paying for 0.4 coin fee" 0.6 (account-balance 'k1))

;; transfers should respect balances as intended
(credit 'k1 (read-keyset 'k1) 1.0)
(expect-failure "transfers of trivial or negative quantities fails fast" (transfer 'k1 'k2 0.0))
(expect-failure "transfers of trivial or negative quantities fails fast" (transfer 'k1 'k2 (- 1.0)))
(expect "roundtrip 1.0 transfer succeeds" "Write succeeded" (transfer 'k1 'k2 1.0))
(expect "roundtrip 1.0 transfer succeeds" "Write succeeded" (transfer 'k2 'k1 1.0))

(transfer 'k1 'k2 1.0)
(expect "k1 now has 0.6 coins after transfer to 'k2" 0.6 (account-balance 'k1))
(expect "k2 now has 1.4 coins after transfer from 'k1" 1.4 (account-balance 'k2))
(expect-failure "k1 now has insufficient funds and cannot transfer"
                (transfer 'k1 'k2 1.0))

(transfer-and-create 'k2 'k4 (read-keyset 'k4) 1.0)
(expect "k2 now has 0.4 coins" 0.4 (account-balance 'k2))
(expect "k4 now has 1.0 coins" 1.0 (account-balance 'k4))
(expect "account-info reflects the correct balance and guard information"
  {"balance": 1.0, "guard": (read-keyset 'k4)} (account-info 'k4))

; coinbase should fail when 'COINBASE' capability is not in scope
; and should magically create tokens for users and reflect correct balance
(expect-failure "coinbase fails when capability is not in scope" (coinbase 'k1 (read-keyset 'k1) 0.0))
(test-capability (COINBASE))
(coinbase 'k1 (read-keyset 'k1) 1.0)
(expect-failure "coinbasing trivial or negative amounts fails fast" (coinbase 'k1 (read-keyset 'k1) 0.0))
(expect-failure "coinbasing trivial or negative amounts fails fast" (coinbase 'k1 (read-keyset 'k1) (- 1.0)))
(expect "after coinbase, k1 should have 1.6 coins in its account" 1.6 (account-balance 'k1))

(env-data { "fee" : 0.4, "k1" : ["keys1"], "k2": ["keys2"], "k3": ["keys3"] })
(env-keys ["keys1", "keys2", "keys3"])

(coinbase 'k3 (read-keyset 'k3) 1.0)
(expect "coinbase should create accounts and credit them some amount" 2.0 (account-balance 'k3))

(pact-state true)
(env-chain-data { "chain-id" : "0" })
(env-hash (hash "burn-create"))

(expect-failure "cross-chain transfers fail for trivial or negative quantities" (cross-chain-transfer 'k1 "1" 'k2 (read-keyset 'k2) 0.0))
(expect-failure "cross-chain transfers fail for trivial or negative quantities" (cross-chain-transfer 'k1 "1" 'k2 (read-keyset 'k2) (- 1.0)))
(expect "burn side of cross-chain transfers succeed" "success" (let ((p (cross-chain-transfer 'k1 "1" 'k2 (read-keyset 'k2) 1.0))) "success"))

; make sure chain-id is enforced in the yield
(expect-failure "create side of cross-chain transfer fails yield on wrong chain"
        (continue-pact 1 false (hash "burn-create")
          { "create-account": 'k2
          , "create-account-guard": (read-keyset 'k2)
          , "quantity": 1.0
          }))

; successful path
(env-chain-data { "chain-id" : "1" })
(expect "create side of cross-chain transfer succeeds" "Write succeeded"
        (continue-pact 1 false (hash "burn-create")
          { "create-account": 'k2
          , "create-account-guard": (read-keyset 'k2)
          , "quantity": 1.0
          }))

; double spends are disallowed by construction
(expect-failure "cross-chain transfer pact prevents double spends"
                (continue-pact 1 false (hash "burn-create")))

;; account guard rotation
(expect
  "account info for 'k1 uses 'k1 keyset pre-rotation"
  "Account: 0.6 Guard: KeySet {keys: [keys1],pred: keys-all}"
  (let ((i (account-info 'k1)))
    (format "Account: {} Guard: {}" [(at 'balance i) (at 'guard i)])
    ))

;; account details will now feature rotated guard
(rotate-account-guard 'k1 (read-keyset 'k2))
(expect
  "account info for 'k1 uses 'k2 keyset after rotation"
  "Account: 0.6 Guard: KeySet {keys: [keys2],pred: keys-all}"
  (let ((i (account-info 'k1)))
    (format "Account: {} Guard: {}" [(at 'balance i) (at 'guard i)])
    ))

;; cover enforce-unit
(module T G (defcap G () true)
  (defconst UNIT_BAD 0.0000000000001)
  (defconst UNIT_GOOD 0.000000000001)
)
(expect "valid unit" true
  (enforce-unit 1.234))
(expect-failure "invalid precision"
  (enforce-unit 1.1234567890123))
(expect-failure "too small"
  (enforce-unit UNIT_BAD))
(expect "min value ok" true
  (enforce-unit UNIT_GOOD))
;;transfer
(expect "min transfer ok" "Write succeeded"
  (transfer 'k1 'k2 UNIT_GOOD))
(expect-failure "bad transfer fails"
  (transfer 'k1 'k2 UNIT_BAD))
;;transfer-and-create
(expect "min transfer-and-create ok" "Write succeeded"
  (transfer-and-create 'k1 'k2 (read-keyset 'k2) UNIT_GOOD))
(expect-failure "bad transfer-and-create fails"
  (transfer-and-create 'k1 'k2 (read-keyset 'k2) UNIT_BAD))
;;cross-chain-transfer (step 0 only covered)
(pact-state true)
(expect "min cross-chain-transfer step 1 succeeds" "success"
  (let ((s "success"))
    (cross-chain-transfer 'k1 "chain" 'k2 (read-keyset 'k2) UNIT_GOOD)
    s))
(pact-state true)
(expect-failure "bad cross-chain-transfer fails"
  (cross-chain-transfer 'k1 "chain" 'k2 (read-keyset 'k2) UNIT_BAD))
;;coinbase
(test-capability (COINBASE))
(expect "min coinbase succeeds" "Write succeeded"
  (coinbase 'k2 (read-keyset 'k2) UNIT_GOOD))
(expect-failure "bad coinbase fails"
  (coinbase 'k2 (read-keyset 'k2) UNIT_BAD))
;;buy-gas
(test-capability (FUND_TX))
(expect "min buy-gas succeeds" "Write succeeded"
  (buy-gas 'k1 UNIT_GOOD))
(expect-failure "bad buy-gas fails"
  (buy-gas 'k1 UNIT_BAD))
;;redeem-gas
(env-data { "fee" : UNIT_GOOD, "k2": ["keys2"]})
(expect "min redeem-gas succeeds" "Write succeeded"
  (redeem-gas 'k2 (read-keyset 'k2) 'k1 UNIT_GOOD))
(env-data { "fee" : UNIT_BAD, "k2": ["keys2"]})
(expect-failure "bad redeem-gas fails"
  (redeem-gas 'k2 (read-keyset 'k2) 'k1 UNIT_BAD))
