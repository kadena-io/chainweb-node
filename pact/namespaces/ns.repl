(env-exec-config ["DisablePact44"])
(begin-tx)
(env-data
 { 'ns-admin-keyset: ["admin"]
 , 'ns-operate-keyset: ["operate"]
 , 'ns-genesis-keyset: { "keys": [], "pred": "="} })


(define-keyset 'ns-admin-keyset (read-keyset 'ns-admin-keyset))
(define-keyset 'ns-operate-keyset (read-keyset 'ns-genesis-keyset))

(load "ns.pact")
(create-table registry)

(write-registry "kadena"
  (keyset-ref-guard 'ns-operate-keyset) true)
(write-registry "user" GUARD_FAILURE true)
(write-registry "free" GUARD_FAILURE true)

(define-namespace "kadena"
  (keyset-ref-guard 'ns-operate-keyset)
  (keyset-ref-guard 'ns-operate-keyset))

(define-namespace "user" GUARD_SUCCESS GUARD_FAILURE)
(define-namespace "free" GUARD_SUCCESS GUARD_FAILURE)
;;rotate to real operate keyset
(define-keyset 'ns-operate-keyset (read-keyset 'ns-operate-keyset))
(commit-tx)

(env-namespace-policy false (ns.validate))

(begin-tx)
(namespace 'user)
(env-keys [])

(module mod G
  (defcap G () (enforce false "disabled"))
  (defun foo () 1))

(namespace 'free)

(module mod G
  (defcap G () (enforce false "disabled"))
  (defun foo () 2))

(expect-failure
  "Cannot bring kadena ns into scope w/o operate admin"
  (namespace 'kadena))

(env-keys ["operate"])

(namespace 'kadena)

(module mod G
  (defcap G () (enforce false "disabled"))
  (defun foo () 3))

(commit-tx)

(expect "user.mod works" 1 (user.mod.foo))
(expect "free.mod works" 2 (free.mod.foo))
(expect "kadena.mod works" 3 (kadena.mod.foo))

(begin-tx)
(env-keys ["operate"])
(env-data
 { 'ns-admin-keyset: ["admin"]
 , 'ns-operate-keyset: ["operate"] })

(expect-failure "cannot redefine user"
  (define-namespace 'user ns.GUARD_FAILURE ns.GUARD_FAILURE))
(expect-failure "cannot redefine free"
  (define-namespace 'free ns.GUARD_FAILURE ns.GUARD_FAILURE))
(expect "can redefine kadena"
  "Namespace defined: kadena"
  (define-namespace 'kadena ns.GUARD_SUCCESS ns.GUARD_FAILURE))

(commit-tx)

(begin-tx)
(env-keys [])

(namespace 'kadena)

(module mod2 G
  (defcap G () (enforce false "disabled"))
  (defun foo () 4))
(commit-tx)
(begin-tx)

(expect "kadena.mod2 works" 4 (kadena.mod2.foo))

(use ns)
(env-keys ["operate"])
(expect-failure
  "cannot register empty name"
  (write-registry "" GUARD_SUCCESS true))

(expect-failure
  "cannot register >64 length name"
  (write-registry
    "1234567890123456789012345678901234567890123456789012345678901234567890"
    GUARD_SUCCESS true))

(expect-failure
  "must be latin1 charset"
  (write-registry "emilyÏ€" GUARD_SUCCESS true))

(commit-tx)
(begin-tx)

(env-exec-config [])
(env-data
 { "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9" :
   ["70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"]
 , 'multi : ["a", "b"]
 })

(expect
  "Principal namespace creation for k: accounts succeeds"
  "Register entry written"
  (ns.write-registry
   (create-principal
     (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"))
   (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9")
   true))

(expect
  "Principal namespace creation for w: accounts succeeds"
  "Register entry written"
  (ns.write-registry
   (create-principal (read-keyset 'multi))
   (read-keyset 'multi)
   true))

; write k: principal to registry
(ns.write-registry
   (create-principal
     (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"))
   (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9")
   true)

; write w: principal to registry
(ns.write-registry
   (create-principal (read-keyset 'multi))
   (read-keyset 'multi)
   true)

(define-namespace
  "k#70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"
  (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9")
  (read-keyset "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"))

(define-namespace
  "w#9lped_9eJpCtMWt7n8KN2QzFyaN-YXrD7uFAPePPmlU#keys-all"
  (read-keyset 'multi)
  (read-keyset 'multi))

;; only testing control flow here.
(env-exec-config ['DisablePact44])
(define-keyset 'multi)
(expect-failure
  "Non-k or w principals cannot create namespaces"
  "Unsupported"
  (ns.write-registry
   (create-principal (keyset-ref-guard 'multi))
   (read-keyset 'multi)
   true))

(commit-tx)
(begin-tx)
(env-exec-config [])
(env-keys
  [ "70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9"
  , "a"
  , "b"
  ]
  )

(namespace "k#70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9")
(module modK G
  (defcap G () true)
  (defun f () 1))

(namespace "w#9lped_9eJpCtMWt7n8KN2QzFyaN-YXrD7uFAPePPmlU#keys-all")
(module modW G
  (defcap G () true)
  (defun f () 2))

(commit-tx)
(begin-tx)

(expect
  "k: principal namespaces work"
  1
  (k#70c787fcfe6c6f4ec23d13c2e94682bc90952f7cec06c7dbac1c012b0b6678b9.modK.f))

(expect
  "w: principal namespaces work"
  2
  (w#9lped_9eJpCtMWt7n8KN2QzFyaN-YXrD7uFAPePPmlU#keys-all.modW.f))
