name: Build and publish application binaries

on:
  workflow_dispatch:
  push:
    branches:
    - master
    - ci/*
    - release-candidate/*

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}
  AWS_DEFAULT_REGION: us-east-1

  S3_ARTIFACT_BUCKET: kadena-cabal-cache
  S3_ARTIFACT_FOLDER: chainweb-node

jobs:

  # ########################################################################## #
  # Configure Workflow

  config:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      git-sha-short: ${{ steps.git-info.outputs.git-sha-short }}
      git-ref-short: ${{ steps.git-info.outputs.git-ref-short }}
      is-release: ${{ steps.git-info.outputs.is-release }}
      strip: ${{ steps.compile-flags.outputs.strip }}
      opt-level: ${{ steps.compile-flags.outputs.opt-level }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2.3.2
    - name: Git revision infos
      id: git-info
      run: |
        echo "::set-output name=git-sha-short::$(git rev-parse --short HEAD || true)"
        echo "::set-output name=is-release::${{ contains(github.event_name, 'release') }}"
        echo "::set-output name=git-ref-short::${GITHUB_REF#refs/heads/}"
    - name: Set optimization level and binary stripping
      id: compile-flags
      run: |
        if [[ "${{ steps.git-info.git-ref-short }}" = "master" || "${{ steps.git-info.git-ref-short }}" = "true" ]] ; then
          echo "::set-output name=opt-level::2"
          echo "::set-output name=strip::True"
        else
          echo "::set-output name=opt-level::1"
          echo "::set-output name=strip::False"
        fi
    - name: Create matrix
      id: set-matrix
      run: |
        MATRIX="$(jq -c '.' <<EOF
        {
          "ghc": ["8.6.5", "8.8.4", "8.10.2"],
          "cabal": ["3.2.0.0"],
          "os": ["ubuntu-16.04", "ubuntu-18.04", "ubuntu-20.04", "macOS-latest"],
          "cabalcache": ["true"],
          "exclude": [
            { "os": "macOS-latest", "ghc": "8.6.5" },
            { "os": "ubuntu-16.04", "ghc": "8.6.5" },
            { "os": "ubuntu-20.04", "ghc": "8.6.5" }
          ]
        }
        EOF
        )"
        echo "::set-output name=matrix::$( echo "$MATRIX" )"

  # ########################################################################## #
  # Synchronize Development Database
  #
  # Uploading artifacts is slow, but downloading is fast.
  # For the development database that pays off. For the mainnet database
  # the upload would take > 20 min.

  sync-chain-db:
    name: Synchronize chain database
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['development']
    env:
      DB_SNAPSHOT_URI: 's3://chainweb-chain-db/${{ matrix.chainwebVersion }}/rocksdb/'
    steps:
    - name: Sync chain database from S3
      run: aws s3 sync "$DB_SNAPSHOT_URI" db/0/rocksDb --delete --exclude=LOCK
    - name: Store chain database as artifact
      uses: actions/upload-artifact@v2
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db

  # ########################################################################## #
  # Run Build and Upload Artifacts

  build:
    name: Build
    needs: [config]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}

    env:
      OPT_LEVEL: ${{ needs.config.outputs.opt-level }}
      ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-sha-short }}.tar.gz

    steps:
    # Setup
    - name: Checkout repository
      uses: actions/checkout@v2
    - name: Install GHC and Cabal
      uses: actions/setup-haskell@v1
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Confirm GHC and Cabal installation
      run: |
        ghc --version
        cabal --version
    - name: Install non-Haskell dependencies (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get install -y librocksdb-dev z3
    - name: Install non-Haskell dependencies (macOS)
      if: contains(matrix.os, 'mac')
      run: |
        brew update && brew install rocksdb z3 gnu-tar
        # work around bug in macOS and github actions cache (cf. https://github.com/actions/cache/issues/403)
        echo PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH" >> $GITHUB_ENV
    - name: Create cabal.project.local
      run: |
        cat > cabal.project.local <<EOF
        package *
          documentation: False
          executable-stripping: ${{ needs.config.outputs.strip }}
          library-stripping: ${{ needs.config.outputs.strip }}
        package chainweb
          documentation: False
          optimization: ${{ needs.config.outputs.opt-level }}
          benchmarks: True
          tests: True
        package pact
          documentation: False
          optimization: ${{ needs.config.outputs.opt-level }}
        EOF
    - name: Append cabal.project.local for GHC-8.10
      if: contains(matrix.ghc, '8.10')
      run : |
        cat >> cabal.project.local <<EOF
        allow-newer:
          pact:*
          tocken-bucket:*
          servant-swagger:*
        constraints:
          base16-bytestring <1.0
    - uses: actions/cache@v2
      name: Cache dist-newstyle
      with:
        path: |
          ~/.cabal/packages
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-3-cabal

    # Build
    - name: Update package database
      run: cabal update
    - name: Configure build
      run: |
        cabal build all --dry-run
        cabal freeze
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      uses: larskuhtz/cabal-cache-action@ecc751af6d31b3ed5a3b4aefdefd0ed6ef4cb414
      with:
        bucket: "kadena-cabal-cache"
        region: "us-east-1"
        folder: "${{ matrix.os }}"
        aws_access_key_id: "${{ secrets.kadena_cabal_cache_aws_access_key_id }}"
        aws_secret_access_key: "${{ secrets.kadena_cabal_cache_aws_secret_access_key }}"
    - name: Install build dependencies
      run: cabal build chainweb --only-dependencies
    - name: Build chainweb library
      run: cabal build lib:chainweb
    - name: Build chainweb applications
      run: cabal build exe:chainweb-node test:chainweb-tests exe:cwtool chainweb:bench:bench

    # Checks
    - name: Check that working directly tree is clean
      run: |
        if ! git diff --exit-code; then
          echo "Git working tree is not clean. The build changed some file that is checked into git." 1>&2
          exit 1
        fi
    - name: Run ea and verify consistency of genesis headers
      run: |
        cabal run cwtool -- ea
        if ! git diff --exit-code; then
          echo "Inconsistent genesis headers detected. Did you forget to run ea?" 1>&2
          exit 1
        fi

    # Archive Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/chainweb

        # TODO use cabal install to prepare artificats
        export VER=$(grep '^version' chainweb.cabal | sed -e 's/.*: *//')
        if [ "${{ needs.config.outputs.opt-level }}" -gt 1 ] ; then
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-node artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-tests artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/cwtool artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/bench artifacts/chainweb
        else
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/chainweb-node artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/chainweb-tests artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/cwtool artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/bench artifacts/chainweb
        fi
        cp README.md artifacts/chainweb
        cp CHANGELOG.md artifacts/chainweb
        cp LICENSE artifacts/chainweb
        cp chainweb.cabal artifacts/chainweb
        cp cabal.project artifacts/chainweb
        cp cabal.project.local artifacts/chainweb
        cp cabal.project.freeze artifacts/chainweb
    - name: Create artifacts archive
      run: |
        echo ls ./artifacts
        ls ./artifacts
        echo ls ./artifacts/chainweb
        ls ./artifacts/chainweb
        echo "tar -C ./artifacts/ -czf $ARTIFACTS_ARCHIVE chainweb"
        tar -C ./artifacts/ -czf "$ARTIFACTS_ARCHIVE" chainweb
        echo ls ./artifacts
        ls ./artifacts
        echo ls .
        ls .
    - name: Safe artifacts
      uses: actions/upload-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: ${{ env.ARTIFACTS_ARCHIVE }}
        if-no-files-found: error

  # ########################################################################## #
  # Run Slow tests (Multinode test)

  slow-tests:
    name: Slow tests
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run slow tests
      timeout-minutes: 3
      run: |
          ulimit -n 10000
          cwtool slow-tests

  # ########################################################################## #
  # Run Benchmarks

  benchmarks:
    name: Benchmarks
    needs: [config, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      BENCH_FILE: results.${{ github.run_id }}.${{ github.run_number }}.json
      BENCH_BUCKET: kadena-cabal-cache
      BENCH_FOLDER: chainweb-benchmark-results/${{ matrix.ghc }}/${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run all benchmarks
      timeout-minutes: 6
      run: bench --json $BENCH_FILE +RTS -N
    - name: Upload results
      run: |
        aws s3 cp $BENCH_FILE s3://$BENCH_BUCKET/$BENCH_FOLDER/
        aws s3api put-object-acl --bucket $BENCH_BUCKET --key=$BENCH_FOLDER/$BENCH_FILE --acl public-read

  # ########################################################################## #
  # Validate Development headers

  validate-headers:
    name: Validate headers
    needs: [config, sync-chain-db, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download chain database artifact
      uses: actions/download-artifact@v2
      with:
        name: chain-db-development
        path: db
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Validate Headers
      timeout-minutes: 3
      uses: larskuhtz/chainweb-history-validation/.github/actions/validate-headers@master
      with:
        chainweb_version: development

  # ########################################################################## #
  # Validate Development pact history

  validate-pact-history:
    name: Validate pact history
    needs: [config, sync-chain-db, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download ${{ matrix.chainwebVersion }} chain database artifact
      uses: actions/download-artifact@v2
      with:
        name: chain-db-development
        path: db
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Validate Pact History
      timeout-minutes: 3
      uses: larskuhtz/chainweb-history-validation/.github/actions/validate-headers@master
      with:
        chainweb_version: development

  # ########################################################################## #
  # Run Unit Tests

  unit-tests:
    name: Unit tests
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    env:
      TEST_RESULT_FILE: test-results.${{ github.run_id }}.${{ github.run_number }}.json
      TEST_RESULT_BUCKET: kadena-cabal-cache
      TEST_RESULT_FOLDER: chainweb-test-results/ghc-${{ matrix.ghc }}/${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run Tests
      id: tests
      timeout-minutes: 10
      run: |
          ulimit -n 10000
          ulimit -a
          env
          if [[ "${{ runner.os }}" = "macOS" ]] ; then
            chainweb-tests --hide-successes --results-json test-results.json --pattern='! ( /RemotePactTest/ || /PactInProcApi/ || /PactReplay/ || /Rosetta.RestAPI/ )'
          else
            chainweb-tests --hide-successes --results-json test-results.json
          fi

    # Publish test results to S3
    - name: Upload test results
      if: always() && steps.tests.outcome != 'skipped' && steps.tests.outcome != 'cancelled'
      run: |
        cat > filter.jq <<EOF
            .gitRevision = "${{ github.sha }}" |
            .gitRef = "${{ needs.config.outputs.git-short-ref }}" |
            .githubRunId = ${{ github.run_id }} |
            .githubRunNumber = ${{ github.run_number }}
        EOF
        jq -f filter.jq test-results.json > $TEST_RESULT_FILE
        aws s3 cp $TEST_RESULT_FILE s3://$TEST_RESULT_BUCKET/$TEST_RESULT_FOLDER/
        aws s3api put-object-acl --bucket $TEST_RESULT_BUCKET --key=$TEST_RESULT_FOLDER/$TEST_RESULT_FILE --acl public-read

  # ########################################################################## #
  # Publish Artifiacts to S3

  publish:
    name: Publish
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    env:
      ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-sha-short }}.tar.gz
      BRANCH_ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-ref-short }}.tar.gz
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: .
    - name: Publish applications to S3
      run: |
        aws s3 cp $ARTIFACTS_ARCHIVE s3://$S3_ARTIFACT_BUCKET/$S3_ARTIFACT_FOLDER/
        aws s3api put-object-acl --bucket $S3_ARTIFACT_BUCKET --key=$S3_ARTIFACT_FOLDER/$ARTIFACTS_ARCHIVE --acl public-read
    - name: Publish applications to S3 for master builds
      if: ${{ needs.config.output.git-short-ref == 'master' }}
      run: |
        aws s3 cp s3://$S3_ARTIFACT_BUCKET/$S3_ARTIFACT_FOLDER/$ARTIFACTS_ARCHIVE s3://$S3_ARTIFACT_BUCKET/$S3_ARTIFACT_FOLDER/$BRANCH_ARTIFACTS_ARCHIVE
        aws s3api put-object-acl --bucket $S3_ARTIFACT_BUCKET --key=$S3_ARTIFACT_FOLDER/$BRANCH_ARTIFACTS_ARCHIVE --acl public-read

  # ########################################################################## #
  # Trigger mainnet history validation

  request-mainnet-validation:
    name: Request Mainnet history validation
    needs: [config, publish]
    runs-on: 'ubuntu-latest'

    steps:
    - name: trigger mainnet history validation
      if: ${{ needs.config.outputs.git-short-ref == 'master' }}
      uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.KADENA_BUILD_CI_TOKEN }}
        repository: kadena-io/chainweb-node
        event-type: request-mainnet-history-validation
        client-payload: |
          {
            "ref": "${{ github.ref }}",
            "sha": "${{ github.sha }}",
            "ghc_version": '8.10.2',
            "version": "${{ needs.config.outputs.git-short-ref }}",
            "os": "ubuntu-20.04"
            "chainweb_version": "mainnet01"
          }
