name: Build and publish application binaries

on:
  push:
    branches:
    - master
    - ci/*
    - github-ci
    - release-candidate/*

jobs:

  # Synchronize Mainnet01 Chain Database
  #
  sync-chain-db:
    name: Synchronize ${{ matrix.chainwebVersion }} chain database
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['mainnet01', 'development']

    steps:
    # Caches are limited to 5GB per repository. Currently the size of the db is 3.5GB
    # - name: Sync chain database from cache
    #   id: cache-chain-db
    #   uses: actions/cache@v1
    #   with:
    #     path: db
    #     key: chain-db-${{ matrix.chainwebVersion }}-
    #     restore-keys: |
    #       chain-db-${{ matrix.chainwebVersion }}-
    - name: Sync chain database from S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}
      run: |
        aws s3 sync "s3://chainweb-chain-db/${{ matrix.chainwebVersion }}/" db/ --delete --exclude=LOCK
    - name: Store chain database as artifact
      uses: actions/upload-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db

  # Run benchmarks and slow tests
  #
  slow-tests:
    name: Run slow tests and benchmarks
    needs: [sync-chain-db, build]
    runs-on: 'ubuntu-18.04'
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download chainweb application artifact
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.8.8.2.ubuntu-18.04
        path: bin
    - name: Validate block header database
      run: |
        chmod 755 ./bin/cwtool
        ./bin/cwtool slow-tests

  # Validate Mainnet01 Chain Database With chainweb-node
  #
  validate-header-db:
    name: Validate ${{ matrix.chainwebVersion }} block header db
    needs: [sync-chain-db, build]
    runs-on: 'ubuntu-18.04'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['mainnet01', 'development']
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download ${{ matrix.chainwebVersion }} chain database artifact
      uses: actions/download-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db
    - name: Download chainweb application artifact
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.8.8.2.ubuntu-18.04
        path: bin
    - name: Validate ${{ matrix.chainwebVersion }} block header database
      run: |
        chmod 755 ./bin/cwtool
        ./bin/cwtool header-dump --database=db/rocksdb --chainweb-version=${{ matrix.chainwebVersion }} -o none --validate

  # Validate Mainnet01 Chain Database With chainweb-node
  #
  validate-chain-db:
    name: Validate ${{ matrix.chainwebVersion }} history with build
    needs: [sync-chain-db, build]
    runs-on: 'ubuntu-18.04'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['mainnet01', 'development']
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download ${{ matrix.chainwebVersion }} chain database artifact
      uses: actions/download-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion}}
        path: db
    - name: Download chainweb application artifact
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.8.8.2.ubuntu-18.04
        path: bin
    - name: Create configuration file for validating the chainweb history
      run: |
        cat >> config.yaml <<EOF
          databaseDirectory: "db/rocksdb"
          resetChainDatabases: false
          chainweb:
            chainwebVersion: ${{ matrix.chainwebVersion }}
            validateHashesOnReplay: true
            p2p:
              peer:
                hostaddress:
                  hostname: localhost
                  port: 4445
              private: true
              ignoreBootstrapNodes: true
            transactionIndex:
              enabled: false
            headerStream: false
            mempoolP2p:
              enabled: false
            cuts:
              pruneChainDatabase: false
          logging:
            telemetryBackend:
              enabled: true
              configuration:
                handle: stdout
                color: "True"
            backend:
              handle: stdout
              color: "True"
            logger:
              log_level: info
            filter:
              rules:
              - key: component
                value: pact
                level: warn
              default: info
        EOF
    - name: Validate ${{ matrix.chainwebVersion }} history
      run: |
        chmod 755 ./bin/chainweb-node
        ./bin/chainweb-node --config-file=config.yaml | { sed -u -e '/start chainweb node/{p;q0};/\[Error\]/{p;q1}'; x=$?; killall chainweb-node ; exit $x ; }

  # Build Chainweb Node
  #
  build:
    name: Build master with ${{ matrix.ghc }} / ${{ matrix.cabal }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.6.5', '8.8.2']
        cabal: ['3.0']
        os: ['ubuntu-16.04', 'ubuntu-18.04', 'macOS-latest']
        cabalcache: ['true']
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}

      # Cabal Cache
      CABAL_CACHE: ./tmp/bin/cabal-cache
      CABAL_CACHE_BUCKET: kadena-cabal-cache
      SYNC_TO_CACHE: $CABAL_CACHE sync-to-archive --threads 16 --archive-uri s3://$CABAL_CACHE_BUCKET/${{ matrix.os }} --region us-east-1
      SYNC_FROM_CACHE: $CABAL_CACHE sync-from-archive --threads 16 --archive-uri s3://$CABAL_CACHE_BUCKET/${{ matrix.os }} --region us-east-1

      # Aritfacts
      ARTIFACT_BUCKET: kadena-cabal-cache

    steps:
    # Setup
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Install cabal-cache
      if: matrix.cabalcache == 'true'
      run: |
        [[ "${{ matrix.os }}" =~ ubuntu ]] && OS="linux" || OS="osx"
        mkdir -p "./tmp/bin"
        curl -Ls "https://github.com/haskell-works/cabal-cache/releases/download/v1.0.1.1/cabal-cache_x86_64_${OS}.tar.gz" | tar -xzC "./tmp/bin/"
    - name: Install Haskell (macOS)
      if: contains(matrix.os, 'macOS')
      run: |
        curl -sL https://haskell.futurice.com/haskell-on-macos.py | python3 - --make-dirs --paths.d --ghc-alias=${{ matrix.ghc }} --cabal-alias=3.0.0.0 install ghc-${{ matrix.ghc }} cabal-install-3.0.0.0
        ln -s /opt/cabal/3.0.0.0 /opt/cabal/3.0
    - name: Install Haskell (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
          sudo add-apt-repository ppa:hvr/ghc
          sudo apt-get update
          sudo apt-get install ghc-${{ matrix.ghc }}
    - name: Set GHC and Cabal version
      uses: actions/setup-haskell@v1
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Install non-Haskell dependencies (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
          sudo apt-get update
          sudo apt-get install -y git librocksdb-dev zlib1g-dev libtinfo-dev libsqlite3-dev libz3-dev z3
    - name: Install non-Haskell dependencies (macOS)
      if: contains(matrix.os, 'mac')
      run: |
        brew update
        brew install z3
        brew install sqlite
        brew install rocksdb
        brew install awscli
    - name: Append cabal.project
      run: |
        cat >> cabal.project <<EOF
        documentation: false
        executable-stripping: True
        library-stripping: True
        package chainweb
          documentation: false
          optimization: 2
          ghc-options: -j
        package pact
          documentation: false
          optimization: 2
          ghc-options: -j
        EOF
    - name: Append cabal.project (only ghc-8.8.*)
      if: matrix.ghc == '8.8.2'
      run: |
        cat >> cabal.project <<EOF
        package chainweb
          ghc-options: -Wwarn
          haddock-options: --optghc=-Wwarn
        package pact
          ghc-options: -Wwarn
          haddock-options: --optghc=-Wwarn
        source-repository-package
          type: git
          location: http://github.com/larskuhtz/ixset-typed.git
          tag: 335c8e31d39be873a429fc9814060bf928ad0ee9
        allow-newer:
          fake:*
          pact:*
          ixset-typed:*
          semigroups
          servant-swagger:swagger2
        EOF

    - uses: actions/cache@v1
      name: Cache dist-newstyle
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle

    # Build
    - name: Update package database
      run: cabal v2-update
    - name: Configure build
      run: 'grep -q "ghc-${{ matrix.ghc }}" dist-newstyle/cache/plan.json || cabal v2-configure'
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      run: eval $SYNC_FROM_CACHE
    - name: Install build dependencies
      run: |
          touch node/ChainwebNode.hs
          touch test/ChainwebTests.hs
          touch tools/cwtool/CwTool.hs
          cabal v2-build --only-dependencies
    - name: Build
      run: cabal v2-build
    - name: Run Tests
      run: cabal v2-run chainweb-tests -- --hide-successes --pattern='!/getPending high water marks/'
    - name: Sync cabal cache
      if: always() && (matrix.cabalcache == 'true')
      run: eval $SYNC_TO_CACHE

    # Publish Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/applications
        mkdir -p artifacts/docs
        export VER=$(grep '^version' chainweb.cabal | sed -e 's/.*: *//')
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-node artifacts/applications
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/cwtool artifacts/applications
        # rm -f dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-tests
    - name: Publish applications
      uses: actions/upload-artifact@v1
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: artifacts/applications

    # Publish to S3
    - name: Publish applications to S3
      run: |
        export BINFILE="chainweb.${{ matrix.ghc }}.${{ matrix.os }}.$(git rev-parse --short HEAD).tar.gz"
        tar -C ./artifacts/applications/ -czf $BINFILE chainweb-node
        aws s3 cp $BINFILE s3://$ARTIFACT_BUCKET/
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$BINFILE --acl public-read
    - name: Link latest-build application in S3
      if: contains(github.ref, 'master')
      run: |
        export BINFILE="chainweb.${{ matrix.ghc }}.${{ matrix.os }}.$(git rev-parse --short HEAD).tar.gz"
        export LATEST_BINFILE="chainweb.${{ matrix.ghc }}.${{ matrix.os }}.tar.gz"
        aws s3 cp s3://$ARTIFACT_BUCKET/$BINFILE s3://$ARTIFACT_BUCKET/$LATEST_BINFILE
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$LATEST_BINFILE --acl public-read
