name: Build and publish application binaries

on:
  workflow_dispatch:
    inputs:
      debugInfo:
         description: whether to create binaries with debugging info
         default: 'False'
      optimizationLevel:
        description: optimization level that is used to compile pact and chainweb-node
        default: '1'
  push:

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}
  AWS_DEFAULT_REGION: us-east-1

  S3_ARTIFACT_BUCKET: kadena-cabal-cache
  S3_ARTIFACT_FOLDER: chainweb-node

jobs:

  # ########################################################################## #
  # Configure Workflow

  config:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      git-sha-short: ${{ steps.git-info.outputs.git-sha-short }}
      git-ref-short: ${{ steps.git-info.outputs.git-ref-short }}
      is-release: ${{ steps.git-info.outputs.is-release }}
      debug-info: ${{ steps.compile-flags.outputs.debug-info }}
      opt-level: ${{ steps.compile-flags.outputs.opt-level }}
      tag-suffix: ${{ steps.compile-flags.outputs.tag-suffix }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2.3.2
    - name: Git revision infos
      id: git-info
      run: |
        echo "::set-output name=git-sha-short::${GITHUB_SHA:0:7}"
        echo "::set-output name=is-release::${{ contains(github.event_name, 'release') }}"
        echo "::set-output name=git-ref-short::${GITHUB_REF#refs/heads/}"
    - name: Set optimization level and debugging info
      id: compile-flags
      run: |
        TAG_SUFFIX=
        OPT_LEVEL=${{ github.event.inputs.optimizationLevel }}
        if [[ -n "$OPT_LEVEL" && "$OPT_LEVEL" != "1" ]] ; then
          echo "::set-output name=opt-level::$OPT_LEVEL"
          TAG_SUFFIX+=-opt$OPT_LEVEL
        else
          echo "::set-output name=opt-level::1"
        fi
        DEBUG_INFO=${{ github.event.inputs.debugInfo }}
        if [[ -n "$DEBUG_INFO" && "${DEBUG_INFO^^}" = "TRUE" ]] ; then
          echo "building binaries with debug symbols"
          echo "::set-output name=debug-info::True"
          TAG_SUFFIX+=-debug
        else
          echo "building binaries without debug symbols"
          echo "::set-output name=debug-info::False"
        fi
        echo "::set-output name=tag-suffix::$TAG_SUFFIX"
    - name: Create matrix
      id: set-matrix
      run: |
        MATRIX="$(jq -c '.' <<EOF
        {
          "ghc": ["8.10.7", "9.0.2"],
          "cabal": ["3.6"],
          "os": ["ubuntu-18.04", "ubuntu-20.04"],
          "cabalcache": ["true"],
          "exclude": [
            { 
              "ghc": "9.0.2",
              "cabal": "3.6",
              "os" : "ubuntu-20.04",
              "cabalcache": "true"
            }
          ]
        }
        EOF
        )"
        echo "::set-output name=matrix::$( echo "$MATRIX" )"
    - name: Log config
      run: |
        echo "::group::context"
        echo "GITHUB_SHA=${GITHUB_SHA}"
        echo "github.event_name=${{ github.event_name }}"
        echo "GITHUB_REF=${GITHUB_REF}"
        echo "::endgroup::"
        echo "::group::config"
        echo "config.outputs.git-sha-short=${{ steps.git-info.outputs.git-sha-short }}"
        echo "config.outputs.git-ref-short=${{ steps.git-info.outputs.git-ref-short }}"
        echo "config.outputs.is-release=${{ steps.git-info.outputs.is-release }}"
        echo "config.outputs.debug-info=${{ steps.compile-flags.outputs.debug-info }}"
        echo "config.outputs.opt-level=${{ steps.compile-flags.outputs.opt-level }}"
        echo "config.outputs.tag-suffix=${{ steps.compile-flags.outputs.tag-suffix }}"
        echo "config.outputs.matrix=${{ steps.set-matrix.outputs.matrix }}"
        echo "::endgroup::"

  # ########################################################################## #
  # Download Development Database for Testing
  #
  # Uploading artifacts is slow, but downloading is fast.
  # For the development database that pays off. For the mainnet database
  # the upload would take > 20 min.

  sync-chain-db:
    name: Download test chain database
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['development']
    env:
      DB_SNAPSHOT_URI: 's3://chainweb-chain-db/${{ matrix.chainwebVersion }}/pipeline-db/rocksDb'
    steps:
    - name: Sync chain database from S3
      run: aws s3 sync "$DB_SNAPSHOT_URI" db/0/rocksDb --delete --exclude=LOCK
    - name: Store chain database as artifact
      uses: actions/upload-artifact@v2
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db

  # ########################################################################## #
  # Build and Upload Artifacts

  build:
    name: Build
    needs: [config]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}

    env:
      OPT_LEVEL: ${{ needs.config.outputs.opt-level }}
      DEBUG_INFO: ${{ needs.config.outputs.debug-info }}
      ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-sha-short }}${{ needs.config.outputs.tag-suffix }}.tar.gz
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}

    steps:
    # Setup
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    # This only works if also the times of the cache are adjusted accordingly
    # to the time of the commit for the respective revision. This can be done
    # by adjusting the time of all files in the cache before the end of the task
    #
    # - name: Set all tracked file modification times to the time of their last commit
    #   run: |
    #     rev=HEAD
    #     for f in $(git ls-tree -r -t --full-name --name-only "$rev") ; do
    #       touch -d $(git log --pretty=format:%cI -1 "$rev" -- "$f") "$f";
    #     done
    - name: Install GHC and Cabal
      uses: haskell/actions/setup@v1.2.7
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Confirm GHC and Cabal installation
      run: |
        ghc --version
        cabal --version
    - name: Install non-Haskell dependencies (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: sudo apt-get install -y librocksdb-dev z3
    - name: Create cabal.project.local
      run: |
        cat > cabal.project.local <<EOF
        package *
          documentation: False
          debug-info: ${{ needs.config.outputs.debug-info }}
          executable-stripping: True
          library-stripping: True
        package chainweb
          documentation: False
          optimization: ${{ needs.config.outputs.opt-level }}
          benchmarks: True
          tests: True
          ghc-options: -Wno-unused-packages
        package pact
          documentation: False
          optimization: ${{ needs.config.outputs.opt-level }}
          ghc-options: -Wno-unused-packages
        EOF

    # dist cache
    - name: Create date file for dist-newstyle cache key
      run: |
        date +%Y-%j > /tmp/cache-key
    - uses: larskuhtz/always-upload-cache@3dc6e6c4eed0c594fbff7c4c2885c6106d1bfcf0
      name: Cache dist-newstyle
      with:
        path: |
          ~/.cabal/store
          dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-2-${{ hashFiles('/tmp/cache-key') }}-${{ hashFiles('cabal.*', '*.cabal', 'src/**', 'test/**') }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-2-${{ hashFiles('/tmp/cache-key') }}-
          ${{ matrix.os }}-${{ matrix.ghc }}-2-

    # Build
    - name: Delete Freeze file
      # we generate and archive a new freeze file during the build
      run: rm cabal.project.freeze
    - name: Update package database
      run: cabal update
    - name: Display outdated packages
      run: cabal outdated
    - name: Configure build
      run: |
        cabal build all --dry-run
        cabal freeze
    - name: Display Dependency Changes
      run: |
        diff -w <(git show HEAD:cabal.project.freeze) cabal.project.freeze || true
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      uses: larskuhtz/cabal-cache-action@ecc751af6d31b3ed5a3b4aefdefd0ed6ef4cb414
      with:
        bucket: "kadena-cabal-cache"
        region: "us-east-1"
        folder: "${{ matrix.os }}"
        aws_access_key_id: "${{ secrets.kadena_cabal_cache_aws_access_key_id }}"
        aws_secret_access_key: "${{ secrets.kadena_cabal_cache_aws_secret_access_key }}"
    - name: Install build dependencies
      run: cabal build chainweb --only-dependencies
    - name: Build chainweb library
      run: cabal build lib:chainweb
    - name: Build chainweb applications
      run: cabal build exe:chainweb-node test:chainweb-tests exe:cwtool chainweb:bench:bench

    # Checks
    - name: Check that working directory tree is clean
      run: |
        # the freeze file has likely has changed
        mv cabal.project.freeze cabal.project.freeze.backup
        git checkout -- cabal.project.freeze || true
        if ! git diff --exit-code; then
          echo "Git working tree is not clean. The build changed some file that is checked into git." 1>&2
          exit 1
        fi
        mv cabal.project.freeze.backup cabal.project.freeze
    - name: Run ea and verify consistency of genesis headers
      run: |
        cabal run cwtool -- ea
        # the freeze file has likely has changed
        mv cabal.project.freeze cabal.project.freeze.backup
        git checkout -- cabal.project.freeze || true
        if ! git diff --exit-code; then
          echo "Inconsistent genesis headers detected. Did you forget to run ea?" 1>&2
          exit 1
        fi
        mv cabal.project.freeze.backup cabal.project.freeze

    # Archive Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/chainweb

        # TODO use cabal install to prepare artificats
        export VER=$(grep '^version' chainweb.cabal | sed -e 's/.*: *//')
        if [ "${{ needs.config.outputs.opt-level }}" -gt 1 ] ; then
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-node artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-tests artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/cwtool artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/bench artifacts/chainweb
        else
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/chainweb-node artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/chainweb-tests artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/cwtool artifacts/chainweb
          cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/build/*/bench artifacts/chainweb
        fi
        cp README.md artifacts/chainweb
        cp CHANGELOG.md artifacts/chainweb
        cp LICENSE artifacts/chainweb
        cp chainweb.cabal artifacts/chainweb
        cp cabal.project artifacts/chainweb
        cp cabal.project.local artifacts/chainweb
        cp cabal.project.freeze artifacts/chainweb
    - name: Create artifacts archive
      run: |
        echo "tar -C ./artifacts/ -czf $ARTIFACTS_ARCHIVE chainweb"
        tar -C ./artifacts/ -czf "$ARTIFACTS_ARCHIVE" chainweb
        ls ./artifacts
    - name: Safe artifacts
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: ${{ env.ARTIFACTS_ARCHIVE }}
        if-no-files-found: error

  # ########################################################################## #
  # Run Slow tests (Multinode test)

  slow-tests:
    name: Slow tests
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    env:
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run slow tests
      timeout-minutes: 5
      run: |
          ulimit -n 10000
          cwtool slow-tests

  # ########################################################################## #
  # Run Benchmarks

  benchmarks:
    name: Benchmarks
    needs: [config, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      BENCH_FILE: results.${{ github.run_id }}.${{ github.run_number }}.json
      BENCH_BUCKET: kadena-cabal-cache
      BENCH_FOLDER: chainweb-benchmark-results/${{ matrix.ghc }}/${{ matrix.os }}
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run all benchmarks
      timeout-minutes: 12
      run: bench --json $BENCH_FILE +RTS -N
    - name: Upload results
      run: |
        aws s3 cp $BENCH_FILE s3://$BENCH_BUCKET/$BENCH_FOLDER/
        aws s3api put-object-acl --bucket $BENCH_BUCKET --key=$BENCH_FOLDER/$BENCH_FILE --acl public-read

  # ########################################################################## #
  # Validate Devnet Database and Replay Pact History

  validate-devnet-database:
    name: Validate Devnet Database Snapshot and Replay Pact History
    needs: [config, sync-chain-db, build]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    runs-on: ${{ matrix.os }}
    env:
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download ${{ matrix.chainwebVersion }} chain database artifact
      uses: actions/download-artifact@v2
      with:
        name: chain-db-development
        path: db
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Write chainweb-node configuration
      run: |
        cat >> config.yaml <<EOF
          databaseDirectory: "db"
          chainweb:
            onlySyncPact: true
            chainwebVersion: development
            validateHashesOnReplay: true
            p2p:
              peer:
                interface: localhost
                hostaddress:
                  port: 4445
              private: true
              ignoreBootstrapNodes: true
            transactionIndex:
              enabled: false
            mempoolP2p:
              enabled: false
            cuts:
              pruneChainDatabase: headers-checked
          logging:
            telemetryBackend:
              enabled: false
              configuration:
                color: 'true'
            backend:
              color: 'true'
            filter:
              rules:
              - value: mempool
                key: component
                level: warn
              - value: connection-manager
                key: component
                level: warn
              - value: sync
                key: sub-component
                level: warn
              - value: MempoolAccess
                key: sub-component
                level: warn
              - value: PactService
                key: logger
                level: warn
              - value: Checkpointer
                key: logger
                level: warn
              default: info
        EOF
    - name: Validate database and replay pact transactions
      timeout-minutes: 6
      env:
        DISABLE_POW_VALIDATION: 1
      run: |
        chainweb-node +RTS -T -H1G -A64M -RTS \
          --config-file=config.yaml \
          --log-level=info

  # ########################################################################## #
  # Run Unit Tests

  unit-tests:
    name: Unit tests
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    env:
      TEST_RESULT_FILE: test-results.${{ github.run_id }}.${{ github.run_number }}.json
      TEST_RESULT_BUCKET: kadena-cabal-cache
      TEST_RESULT_FOLDER: chainweb-test-results/ghc-${{ matrix.ghc }}/${{ matrix.os }}
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .
    - name: Install chainweb from artifacts
      uses: ./.github/actions/install-chainweb-from-artifacts
      with:
        os: ${{ matrix.os }}
        ghc: ${{ matrix.ghc }}
    - name: Run Tests
      id: tests
      timeout-minutes: 10
      run: |
          ulimit -n 10000
          chainweb-tests --hide-successes --results-json test-results.json

    # Publish test results to S3
    - name: Upload test results
      if: always() && steps.tests.outcome != 'skipped' && steps.tests.outcome != 'cancelled'
      run: |
        cat > filter.jq <<EOF
            .gitRevision = "${{ github.sha }}" |
            .gitRef = "${{ needs.config.outputs.git-short-ref }}" |
            .githubRunId = ${{ github.run_id }} |
            .githubRunNumber = ${{ github.run_number }}
        EOF
        jq -f filter.jq test-results.json > $TEST_RESULT_FILE
        aws s3 cp $TEST_RESULT_FILE s3://$TEST_RESULT_BUCKET/$TEST_RESULT_FOLDER/
        aws s3api put-object-acl --bucket $TEST_RESULT_BUCKET --key=$TEST_RESULT_FOLDER/$TEST_RESULT_FILE --acl public-read

  # ########################################################################## #
  # Publish Artifiacts to S3

  publish:
    name: Publish
    needs: [config, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.config.outputs.matrix) }}
    env:
      ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-sha-short }}${{ needs.config.outputs.tag-suffix }}.tar.gz
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .
    - name: Publish applications to S3
      run: |
        aws s3 cp $ARTIFACTS_ARCHIVE s3://$S3_ARTIFACT_BUCKET/$S3_ARTIFACT_FOLDER/
        aws s3api put-object-acl --bucket $S3_ARTIFACT_BUCKET --key=$S3_ARTIFACT_FOLDER/$ARTIFACTS_ARCHIVE --acl public-read

  # ########################################################################## #
  # Build and publish docker image

  docker-image:
    name: Build and publish docker image
    needs: [config, build]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # TODO when adding more than one build, use a different package name or
        # different tags
        ghc: ["8.10.7"]
        os: ["ubuntu-20.04"]
    env:
      GHC_VERSION: ${{ matrix.ghc }}
      OS: ${{ matrix.os }}
      OPT_LEVEL: ${{ needs.config.outputs.opt-level }}
      DEBUG_INFO: ${{ needs.config.outputs.debug-info }}
      GIT_SHA_SHORT: ${{ needs.config.outputs.git-sha-short }}
      COMPILER: ghc-${{ matrix.ghc }}
      ARTIFACTS_NAME: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
      ARTIFACTS_ARCHIVE: chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ needs.config.outputs.git-sha-short }}${{ needs.config.outputs.tag-suffix }}.tar.gz

    steps:
    - name: Get build artifacts
      uses: actions/download-artifact@v2
      with:
        name: ${{ env.ARTIFACTS_NAME }}
        path: .

    - name: Extract artifacts
      run: |
        tar -xzf "$ARTIFACTS_ARCHIVE"

    - name: Create Dockerfile
      run: |
        cat > Dockerfile <<EOF
        FROM ubuntu:${OS#ubuntu-}
        LABEL com.chainweb.docker.image.compiler="$COMPILER"
        LABEL com.chainweb.docker.image.os="${OS}"
        LABEL com.chainweb.docker.image.optimization="$OPT_LEVEL"
        LABEL com.chainweb.docker.image.debug-info="$DEBUG_INFO"
        LABEL com.chainweb.docker.image.revision="$GIT_SHA_SHORT"
        RUN apt-get update && apt-get install -y librocksdb-dev ca-certificates locales && rm -rf /var/lib/apt/lists/* && locale-gen en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
        ENV LANG=en_US.UTF-8
        WORKDIR /chainweb
        COPY chainweb/chainweb-node .
        COPY chainweb/LICENSE .
        COPY chainweb/README.md .
        COPY chainweb/CHANGELOG.md .
        COPY chainweb/chainweb.cabal .
        COPY chainweb/cabal.project .
        COPY chainweb/cabal.project.local .
        COPY chainweb/cabal.project.freeze .
        STOPSIGNAL SIGTERM
        ENTRYPOINT /chainweb/chainweb-node
        EOF

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v3
      with:
        images: ghcr.io/kadena-io/chainweb-node
        flavor: |
          suffix=${{ needs.config.outputs.tag-suffix }}
        tags: |
          type=sha
          type=ref,event=branch
          type=ref,event=tag
          type=ref,event=pr

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: kadena-build
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        file: ./Dockerfile
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

  integration-tests:
    name: Run Integration Tests from remote repo
    needs: [ config, docker-image ]
    runs-on: ubuntu-latest 

    env:
      GIT_SHA_SHORT: ${{ needs.config.outputs.git-sha-short }}

    steps:
    - name: Start remote integration tests
      uses: aurelien-baudet/workflow-dispatch@93e95b157d791ae7f42aef8f8a0d3d723eba1c31
      with:
        workflow: Integration Tests on devnet chain
        token: ${{ secrets.GH_WORKFLOW_PAT_FOR_TESTS }}
        inputs: '{ "chainweb_node_container_id" : "sha-${{ needs.config.outputs.git-sha-short }}" }'
        ref: refs/heads/master
        repo: kadena-io/integration-tests
        display-workflow-run-url: true
        wait-for-completion: false # here you could make this pipeline wait them out
        
