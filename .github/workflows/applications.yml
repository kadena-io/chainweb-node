name: Build and publish application binaries

on:
  push:
    branches:
    - master
    - ci/*
    - github-ci
    - release-candidate/*
    tags:
    - '[0-9].[0-9]+'
  release:
    types:
    - created

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.kadena_cabal_cache_aws_access_key_id }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.kadena_cabal_cache_aws_secret_access_key }}

jobs:

  # Synchronize Mainnet01 Chain Database
  #
  sync-chain-db:
    name: Synchronize chain database
    runs-on: 'ubuntu-latest'
    strategy:
      fail-fast: false
      matrix:
        chainwebVersion: ['mainnet01', 'development']

    steps:
    - name: Sync chain database from S3
      run: |
        aws s3 sync "s3://chainweb-chain-db/${{ matrix.chainwebVersion }}/rocksdb/" db/rocksdb/ --delete --exclude=LOCK
    - name: Store chain database as artifact
      uses: actions/upload-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db

  # Run benchmarks and slow tests
  #
  slow-tests:
    name: Slow tests
    needs: [sync-chain-db, build]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'ubuntu-18.04' ]
        ghc: ['8.6.5', '8.8.3', '8.10.1']
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: bin
    - name: Validate block header database
      run: |
        chmod 755 ./bin/cwtool
        ./bin/cwtool slow-tests

  run-benchmarks:
    name: Benchmarks
    needs: [build]
    runs-on: 'ubuntu-18.04'
    env:
      BENCH_FILE: results.${{ github.run_id }}.${{ github.run_number }}.json
      BENCH_BUCKET: kadena-cabal-cache
      BENCH_FOLDER: chainweb-benchmark-results/ghc-8.8.3/ubuntu-18.04
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.8.8.3.ubuntu-18.04
        path: bin
    - name: Run all benchmarks
      run: |
        chmod 755 ./bin/bench
        ./bin/bench --json $BENCH_FILE +RTS -N
    - name: Upload results
      run: |
        aws s3 cp $BENCH_FILE s3://$BENCH_BUCKET/$BENCH_FOLDER/
        aws s3api put-object-acl --bucket $BENCH_BUCKET --key=$BENCH_FOLDER/$BENCH_FILE --acl public-read

  # Validate Mainnet01 Chain Database With chainweb-node
  #
  validate-header-db:
    name: Validate headers
    needs: [sync-chain-db, build]
    runs-on: 'ubuntu-18.04'
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.6.5', '8.8.3', '8.10.1']
        chainwebVersion: ['development']
        include:
        - ghc: '8.8.3'
          chainwebVersion: 'mainnet01'
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download chain database artifact
      uses: actions/download-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion }}
        path: db
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.${{ matrix.ghc }}.ubuntu-18.04
        path: bin
    - name: Validate block header database
      run: |
        chmod 755 ./bin/cwtool
        ./bin/cwtool header-dump --database=db/rocksdb --chainweb-version=${{ matrix.chainwebVersion }} -o none --validate

  # Validate Mainnet01 Chain Database With chainweb-node
  #
  validate-chain-db:
    name: Validate pact history
    needs: [sync-chain-db, build]
    runs-on: 'ubuntu-18.04'
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.6.5', '8.8.3', '8.10.1']
        chainwebVersion: ['development']
        include:
        - ghc: '8.8.3'
          chainwebVersion: 'mainnet01'
    steps:
    - name: Install non-Haskell dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y librocksdb-dev
    - name: Download ${{ matrix.chainwebVersion }} chain database artifact
      uses: actions/download-artifact@v1
      with:
        name: chain-db-${{ matrix.chainwebVersion}}
        path: db
    - name: Download build artifacts
      uses: actions/download-artifact@v1
      with:
        name: chainweb-applications.${{ matrix.ghc }}.ubuntu-18.04
        path: bin
    - name: Write chainweb-node configuration file
      run: |
        cat >> config.yaml <<EOF
          databaseDirectory: "db/rocksdb"
          chainweb:
            chainwebVersion: ${{ matrix.chainwebVersion }}
            validateHashesOnReplay: true
            p2p:
              peer:
                hostaddress:
                  hostname: localhost
                  port: 4445
              private: true
              ignoreBootstrapNodes: true
            transactionIndex:
              enabled: false
            headerStream: false
            mempoolP2p:
              enabled: false
            cuts:
              pruneChainDatabase: false
          logging:
            telemetryBackend:
              enabled: true
              configuration:
                handle: stdout
                color: "True"
            backend:
              handle: stdout
              color: "True"
            logger:
              log_level: info
            filter:
              rules:
              - key: component
                value: pact
                level: warn
              default: info
        EOF
    - name: Validate pact history
      run: |
        chmod 755 ./bin/chainweb-node
        ./bin/chainweb-node --config-file=config.yaml | {
          sed -u -e '/start chainweb node/{p;q0};/\[Error\]/{p;q1}' ;
          x=$? ;
          echo "finished with exit code $x" ;
          killall -q chainweb-node || true ;
          exit $x ;
        }

  # Build Chainweb Node
  #
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ghc: ['8.6.5', '8.8.3', '8.10.1']
        cabal: ['3.2.0.0']
        os: ['ubuntu-16.04', 'ubuntu-18.04', 'macOS-latest']
        cabalcache: ['true']
    env:
      ARTIFACT_BUCKET: kadena-cabal-cache
      ARTIFACT_FOLDER: chainweb-node

    steps:

    # Setup
    - name: Checkout repository
      uses: actions/checkout@v1
    - name: Create env variables for git objects
      run: |
        echo "::set-env name=GIT_TAG::$(git describe --tags --exact-match)"
        echo "::set-env name=GIT_REF_SHORT::$(git symbolic-ref -q --short HEAD)"
        echo "::set-env name=GIT_SHA_SHORT::$(git rev-parse --short HEAD)"

    - name: Install GHC and Cabal
      uses: haskell-CI/setup@8f15d2f80373bad639e90c95dace7265800c6921
      with:
         ghc-version: ${{ matrix.ghc }}
         cabal-version: ${{ matrix.cabal }}
    - name: Install non-Haskell dependencies (ubuntu)
      if: contains(matrix.os, 'ubuntu')
      run: |
          sudo apt-get update
          sudo apt-get install -y git librocksdb-dev zlib1g-dev libtinfo-dev libsqlite3-dev
    - name: Install non-Haskell dependencies (macOS)
      if: contains(matrix.os, 'mac')
      run: |
        brew update
        brew install sqlite
        brew install rocksdb
    - name: Create cabal.project.local
      run: |
        cat > cabal.project.local <<EOF
        documentation: False
        executable-stripping: True
        library-stripping: True
        package chainweb
          documentation: False
          optimization: 2
          benchmarks: True
          tests: True
        package pact
          documentation: False
          optimization: 2
        EOF
    - name: Append cabal.project.local for GHC-8.10
      if: contains(matrix.ghc, '8.10')
      run : |
        cat >> cabal.project.local <<EOF
        package chainweb
          ghc-options: -Wwarn
        package cassava
          flags: -bytestring--lt-0_10_4
        allow-newer:
          *:base
          *:template-haskell
          *:lens
          *:haskeline
          *:Cabal
          *:ghc-prim
          thyme:*
          *:optics-core
          *:optics-extra
          *:optics-th
          *:process
    - uses: actions/cache@v1
      name: Cache dist-newstyle
      with:
        path: dist-newstyle
        key: ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-${{ github.sha }}
        restore-keys: |
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle-
          ${{ matrix.os }}-${{ matrix.ghc }}-dist-newstyle

    # Build
    - name: Update package database
      run: cabal v2-update
    - name: Configure build
      run: |
        cabal v2-build all --dry-run
        cabal v2-freeze
    - name: Sync from cabal cache
      if: matrix.cabalcache == 'true'
      uses: larskuhtz/cabal-cache-action@21220b9f6499bb12cb0b4b926d6faa9c46a7b146
      with:
        bucket: "kadena-cabal-cache"
        region: "us-east-1"
        folder: "${{ matrix.os }}"
        aws_access_key_id: "${{ secrets.kadena_cabal_cache_aws_access_key_id }}"
        aws_secret_access_key: "${{ secrets.kadena_cabal_cache_aws_secret_access_key }}"
    - name: Install build dependencies
      run: cabal v2-build chainweb --only-dependencies
    - name: Build chainweb library
      run: cabal v2-build lib:chainweb
    - name: Build chainweb applications
      run: cabal v2-build exe:chainweb-node test:chainweb-tests exe:cwtool chainweb:bench:bench

    # Tests
    - name: Run Tests
      run: cabal v2-run chainweb-tests -- --hide-successes
    - name: Check that working directly tree is clean
      run: |
        if ! git diff --exit-code; then
          echo "Git working tree is not clean. The build changed some file that is checked into git." 1>&2
          exit 1
        fi
    - name: Run ea and verify consistency of genesis headers
      run: |
        cabal v2-run cwtool -- ea
        if ! git diff --exit-code; then
          echo "Inconsistent genesis headers detected. Did you forget to run ea?" 1>&2
          exit 1
        fi

    # Publish Artifacts
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts/applications
        mkdir -p artifacts/docs
        export VER=$(grep '^version' chainweb.cabal | sed -e 's/.*: *//')
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/chainweb-node artifacts/applications
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/cwtool artifacts/applications
        cp dist-newstyle/build/*/ghc-${{ matrix.ghc }}/chainweb-${VER}/opt/build/*/bench artifacts/applications
        cp README.md artifacts/applications
        cp CHANGELOG.md artifacts/applications
        cp LICENSE artifacts/applications
        cp chainweb.cabal artifacts/applications
        cp cabal.project artifacts/applications
        cp cabal.project.local artifacts/applications
        cp cabal.project.freeze artifacts/applications
    - name: Safe artifacts
      uses: actions/upload-artifact@v1
      with:
        name: chainweb-applications.${{ matrix.ghc }}.${{ matrix.os }}
        path: artifacts/applications

    # Publish to S3
    - name: Set up S3 environment
      run: |
        echo "::set-env name=BINFILE::chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_SHA_SHORT }}.tar.gz"
        echo "::set-env name=BRANCH_BINFILE::chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_REF_SHORT }}.tar.gz"
        echo "::set-env name=TAG_BINFILE::chainweb.${{ matrix.ghc }}.${{ matrix.os }}.${{ env.GIT_TAG }}.tar.gz"

    - name: Publish applications to S3
      run: |
        tar -C ./artifacts/applications/ -czf $BINFILE chainweb-node
        aws s3 cp $BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$BINFILE --acl public-read
    - name: Public applicaitons to S3 for master builds
      if: env.GIT_REF_SHORT == 'master'
      run: |
        aws s3 cp s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BRANCH_BINFILE
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$BRANCH_BINFILE --acl public-read
    - name: Public applicaitons to S3 for release tag builds
      if: contains(github.event_name, 'release') || startsWith(env.GIT_TAG, '1.')
      run: |
        aws s3 cp s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$BINFILE s3://$ARTIFACT_BUCKET/$ARTIFACT_FOLDER/$TAG_BINFILE
        aws s3api put-object-acl --bucket $ARTIFACT_BUCKET --key=$ARTIFACT_FOLDER/$TAG_BINFILE --acl public-read
