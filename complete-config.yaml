# This provides a complete chainweb-node configuration file. As long as not
# noted otherwise values are set to the default.
#
# The default configuration file of any of chainweb-node can be generated by
# calling chainweb-node with the option '--print-config'.
#
# An existing, possibly outdated, configuration file 'myconfig.yaml' can be upgraded to match a
# new chainweb-node version by running chainweb-node as:
#
# 'chainweb-node --config-file=myconfig.yaml --print-config > newconfig.yaml'
#
# A documented list of command line options can be optained by calling 
# chainweb-node with the command line option '--help'.

# --- General Settings --- #

chainweb:
  # The defining value of the network. To change this means being on a
  # completely independent Chainweb.
  chainwebVersion: mainnet01

  # All unrestricted database read access in in local pact calls.
  allowReadsInLocal: false

  # Enables the Rosetta API
  rosetta: false

  # The number of requests allowed per second per client to certain endpoints.
  # If these limits are crossed, you will receive a 429 HTTP error.
  throttling:
    # Overall limit.
    global: 200.0
    # Pact `/local` calls.
    local: 0.1
    # `/mining/work` calls.
    mining: 5
    # `PUT /cut/peer` calls.
    putPeer: 21

  # Revalidate payload hashes when replaying pact history. This can be used to
  # verify the consistency of the chain database with respect to payload
  # validation when rebuilding the pact database.
  validateHashesOnReplay: false

  # The length of the pact service queue (per chain).
  pactQueueSize: 2000

  # Settings for how a Node can provide work for remote miners.
  mining:
    # Settings for how a Node can provide work for remote miners.
    coordination:
      enabled: false
      # `private` or `public`. `public` is considered deprecated.
      mode: private
      # The number of `/mining/work` calls that can be made in total over a 5
      # minute period.
      limit: 1200
      # limits the number of open mining update streams
      updateStreamLimit: 2000
      # timeout after which mining update stream are closed by the server.
      # The connection is left open so that clients can reconnect without
      # overhead.
      updateStreamTimeout: 240
      # When `mode: private`, this is a list of miner account names who are
      # allowed to have work generated for them.
      miners: []

    # Enables single-core mining in the node process. ONLY USED FOR TESTING.
    # This feature may be removed in future versions.
    nodeMining:
      miner:
        account: ''
        predicate: keys-all
        public-keys: []
      enabled: false

  p2p:
    # Your node's network identity.
    peer:
      # Filepath to the `fullchain.pem` of the certificate of your domain.
      # If `null`, this will be auto-generated.
      # Only one of `certifcateChain` or `certificateChainFile` is used.
      certificateChainFile: null
      # The certificate chain of your domain. If `null`, this is auto-generated.
      # Only one of `certifcateChain` or `certificateChainFile` is used.
      certificateChain: null
      # Filepath to the `privkey.pem` of the certificate of your domain.
      # If `null`, this will be auto-generated. Only one of `key` or `keyFile` is used.
      keyFile: null
      # The private key of the certificate of your domain. If `null`, this will
      # be auto-generated. Only one of `key` or `keyFile` is used.
      key: null
      # Network interface that the node listens on. `*` means that the node
      # listens on all available interfaces.
      interface: '*'

      # You. Your node must be reachable from the public internet. If the node
      # is in a local network behind a NAT device / router, you must configure
      # appropriate port forwarding and the external and internal ports must be
      # the same.
      hostaddress:
        # This should be your public IP or domain name. It must be reachable
        # from the internet.
        hostname: localhost
        # The port you'd like to run the Node on. Any port is fine as long as it
        # is publicly available.
        port: 0

    # the maximum number of peers that this node maintains
    maxPeerCount: 50

    # When `true`, only communicates with peers specified in the `peers` list.
    # Intended for "focused" catch up.
    private: false

    # When this is set to true, any builtin bootstrap nodes are ignored. In that
    # case you must configure a set of initial peers. Otherwise the node won't
    # be able to join the network.
    ignoreBootstrapNodes: false

    # The maximum number of peers to connect to at any one time.
    maxSessionCount: 10

    # The number of seconds to spend connected to a single peer.
    # Don't alter this unless you know what you're doing.
    sessionTimeout: 240

    # Initial peers to connect to in order to join the network for the first time.
    # These will share more peers and block data to your Node.
    peers:

    # This is the list of bootstrap nodes that is operated by Kadena. We
    # recommend to use these nodes as trusted initial entry points into the P2P
    # network. But any other *trusted* node in the network will work.
    - address:
        hostname: us-w1.chainweb.com
        port: 443
    - address:
        hostname: us-e1.chainweb.com
        port: 443
    - address:
        hostname: jp1.chainweb.com
        port: 443
    - address:
        hostname: fr1.chainweb.com
        port: 443
    - address:
        hostname: us-w2.chainweb.com
        port: 443
    - address:
        hostname: us-e2.chainweb.com
        port: 443
    - address:
        hostname: jp2.chainweb.com
        port: 443
    - address:
        hostname: fr2.chainweb.com
        port: 443
    - address:
        hostname: us-w3.chainweb.com
        port: 443
    - address:
        hostname: us-e3.chainweb.com
        port: 443
    - address:
        hostname: jp3.chainweb.com
        port: 443
    - address:
        hostname: fr3.chainweb.com
        port: 443

  # Enables the transaction index. This is required for all production nodes.
  transactionIndex:
    enabled: true
    configuration: {}

  # The gas limit for newly mined blocks. Only relevant for mining nodes and
  # pools.
  gasLimitOfBlock: 150000

  # A limit of the number of blocks per chain that this node is willing to
  # discard during a chain reorg. Any reorg with a fork point of larger depth
  # would cause the node process to exit and would require manual intervention.
  reorgLimit: 480

  # If `true`, allow your node to feed data to a block explorer.
  headerStream: false

  # Configuration of the P2P network for mempools
  mempoolP2p:
    enabled: true
    configuration:
      pollInterval: 30
      maxSessionCount: 6
      sessionTimeout: 300

  # Whether the mempool reintroduces orphaned transactions.
  reintroTxs: true

  # Related to Cut DB management and synchronization between peers.
  cuts:
    # If `true`, delete block data that is not part of the main chain on node
    # startup. Possible values are:
    # -   none: no data is deleted
    # -   headers: orphan block headers are deleted, but payloads are kept (fast)
    # -   headers-checked: like headers, but also verifies the complete chain
    #     Merkle tree, including payloads. (several minutes)
    # -   full: like headers, but also deletes unused payloads (30 min)
    pruneChainDatabase: headers

    # The amount of microseconds to wait before abandoning an attempt to fully
    # sync a Cut from some peer.
    # Don't alter this unless you know what you're doing.
    fetchTimeout: 3000000

    # Force your node back to a certain Cut height, and have it resync from there.
    # This requires disabling the rewind protection and shouldn't be used in 
    # production.
    initialCutHeightLimit: null

# --- Logging --- #

logging:
  # All structural (JSON, etc.) logs.
  telemetryBackend:
    enabled: true
    configuration:
      # the output handle
      handle: stdout
      # enable colored logs. 'auto' uses colors when the output handle is a
      # terminal.
      color: auto
      # `text` or `json`
      format: text
  # Simple text logs.
  backend:
    # the output handle
    handle: stdout
    # enable colored logs. 'auto' uses colors when the output handle is a
    # terminal.
    color: auto
     # `text` or `json`
    format: text
  logger:
    # The overall log level.
    log_level: info
    # The size of the log message queue.
    queue_size: 1000
    # Time to wait in milliseconds after a logger backend failure occured
    exception_wait: 1000
    # Timeout for flushing the log message queue on exit
    exit_timeout: 1000000
    # Additional log scope tags that are added to all log messages
    scope: []
    # Maximal number of backend failures before and exception is raised
    exception_limit: 10
    # What to do with log messages when the logger queue is full. The default is
    # to discard messages and log the number of discarded messages. Alternative
    # values are 'block' and 'raise'.
    policy: discard

  # An indentifier for the node that is added to all log messages
  clusterId: null

  # Additional filter for log messages
  filter:
    # Rules for filtering logs. The filter rules apply only to already generated 
    # log messages. For instance, if the global log level is 'warn', a filter rules
    # with level 'info' has no effect.
    rules:
      # The following are a set of example rules
      - key: component
        value: cut-monitor
        level: info
      - key: component
        value: pact-tx-replay
        level: info
      - key: component
        value: connection-manager
        level: info
      - key: component
        value: miner
        level: info
      - key: component
        value: local-handler
        level: info
    # the default log level that is used for all log messages that don't match
    # any of the rules.
    default: debug

# --- Miscellaneous Settings --- #

# The directory location of the databases. The default is operating system dependent.
databaseDirectory: null

# If `true`, deletes your entire database upon startup.
resetChainDatabases: false

