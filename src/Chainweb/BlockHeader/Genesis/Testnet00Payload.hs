{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.Testnet00Payload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - 
  - eyJobFR4TG9ncyI6IjJjYzdiNmJlMmFjYjc1MjZhYmU4YTg2ODk3NDY4N2IwYzg3NjkyZTFlMDY3NWFiNGQ2ZjFiMzMwMzBiYTdiZGI2ODI3NGIxYWFlMDBlNTI4YmI4NmQxNDM5Nzg2MGJjNjBhZTQwYmQzMjVmMWY0MzFhNGZiYjEzODczNDI3Njg2IiwiaGxDb21tYW5kUmVzdWx0Ijp7InN0YXR1cyI6InN1Y2Nlc3MiLCJkYXRhIjoiVGFibGVDcmVhdGVkIn19
- - eyJoYXNoIjoiZjQyNTlhNDhmODE5NTZmNzFmOGRhMzczODUwYjNlYmZlYzNiNjUwNTQ5Y2RiNGE4ZTNjNWZmYmYyMzQzMjM3ZDQzMTVmNTE4ODcxMzQwNTc3YWE1YzI2ZjgyNTYyZWUzMDQ5NGZhOTdiNTlmNTIxNjA2YzI4ODdjN2UyYzliOWIiLCJzaWdzIjpbXSwiY21kIjoie1wicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1wic2VuZGVyMDdcIjpbXCI0YzMxZGM5ZWU3ZjI0MTc3Zjc4YjZmNTE4MDEyYTIwODMyNmUyYWYxZjM3YmIwYTI0MDViNTA1NmQwY2FkNjI4XCJdLFwic2VuZGVyMDFcIjpbXCI2YmUyZjQ4NWE3YWY3NWZlZGI0YjdmMTUzYTkwM2Y3ZTYwMDBjYTRhYTUwMTE3OWM5MWEyNDUwYjc3N2JkMmE3XCJdLFwic2VuZGVyMDZcIjpbXCI1ZmZjMWY3ZmVmN2E0NDczODYyNTc2MmY3NWE0MjI5NDU0OTUxZTAzZjJhZmM2ZjgxMzA5YzBjMWJkZjllZTZmXCJdLFwic2VuZGVyMDBcIjpbXCIzNjg4MjBmODBjMzI0YmJjN2MyYjA2MTA2ODhhN2RhNDNlMzlmOTFkMTE4NzMyNjcxY2Q5Yzc1MDBmZjQzY2NhXCJdLFwic2VuZGVyMDVcIjpbXCJmMDlkOGY2Mzk0YWVhNDI1ZmU2NzgzZDg4Y2Q4MTM2M2Q4MDE3ZjE2YWZkMzcxMWM1NzViZTBmNWNkNWM5YmI5XCJdLFwic2VuZGVyMDRcIjpbXCIyZDcwYWE0ZjY5N2MzYTNiOGRkNmQ5Nzc0NWFjMDc0ZWRjZmQwZWI2NWMzNzc3NGNkZTI1MTM1NDgzYmVhNzFlXCJdLFwibXVsdGktMDItMDMtMDQtYW55XCI6e1wicHJlZFwiOlwia2V5cy1hbnlcIixcImtleXNcIjpbXCIzYTlkZDUzMmQ3M2RhY2UxOTVkYmI2NGQxZGJhNjU3MmZiNzgzZDBmZGQzMjQ2ODVlMzJmYmRhMmY4OWY5OWE2XCIsXCI0M2YyYWRiMWRlMTkyMDAwY2IzNzc3YmFjYzdmOTgzYjY2MTRmZDljMTcxNWNkNDRjZDQ4NGI2ZDNhMGQzNGM4XCIsXCIyZDcwYWE0ZjY5N2MzYTNiOGRkNmQ5Nzc0NWFjMDc0ZWRjZmQwZWI2NWMzNzc3NGNkZTI1MTM1NDgzYmVhNzFlXCJdfSxcInNlbmRlcjA5XCI6W1wiYzU5ZDk4NDBiMGI2NjA5MDgzNjU0NmI3ZWI0YTczNjA2MjU3NTI3ZWM4YzJiNDgyMzAwZmQyMjkyNjRiMDdlNlwiXSxcInNlbmRlcjAzXCI6W1wiNDNmMmFkYjFkZTE5MjAwMGNiMzc3N2JhY2M3Zjk4M2I2NjE0ZmQ5YzE3MTVjZDQ0Y2Q0ODRiNmQzYTBkMzRjOFwiXSxcIm11bHRpLTAwLTAxXCI6W1wiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwiLFwiNmJlMmY0ODVhN2FmNzVmZWRiNGI3ZjE1M2E5MDNmN2U2MDAwY2E0YWE1MDExNzljOTFhMjQ1MGI3NzdiZDJhN1wiXSxcInNlbmRlcjA4XCI6W1wiNjNiMmViYTRlZDcwZDQ2MTJkM2U3YmM5MGRiMmZiZjRjNzZmN2IwNzQzNjNlODZkNzNmMGJjNjE3ZjhlOGI4MVwiXSxcInNlbmRlcjAyXCI6W1wiM2E5ZGQ1MzJkNzNkYWNlMTk1ZGJiNjRkMWRiYTY1NzJmYjc4M2QwZmRkMzI0Njg1ZTMyZmJkYTJmODlmOTlhNlwiXX0sXCJjb2RlXCI6XCIoY29pbi5jb2luYmFzZSBcXFwic2VuZGVyMDBcXFwiIChyZWFkLWtleXNldCBcXFwic2VuZGVyMDBcXFwiKSAxMDAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInNlbmRlcjAxXFxcIiAocmVhZC1rZXlzZXQgXFxcInNlbmRlcjAxXFxcIikgMTAxMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJzZW5kZXIwMlxcXCIgKHJlYWQta2V5c2V0IFxcXCJzZW5kZXIwMlxcXCIpIDEwMjAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic2VuZGVyMDNcXFwiIChyZWFkLWtleXNldCBcXFwic2VuZGVyMDNcXFwiKSAxMDMwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInNlbmRlcjA0XFxcIiAocmVhZC1rZXlzZXQgXFxcInNlbmRlcjA0XFxcIikgMTA0MC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJzZW5kZXIwNVxcXCIgKHJlYWQta2V5c2V0IFxcXCJzZW5kZXIwNVxcXCIpIDEwNTAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic2VuZGVyMDZcXFwiIChyZWFkLWtleXNldCBcXFwic2VuZGVyMDZcXFwiKSAxMDYwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInNlbmRlcjA3XFxcIiAocmVhZC1rZXlzZXQgXFxcInNlbmRlcjA3XFxcIikgMTA3MC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJzZW5kZXIwOFxcXCIgKHJlYWQta2V5c2V0IFxcXCJzZW5kZXIwOFxcXCIpIDEwODAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic2VuZGVyMDlcXFwiIChyZWFkLWtleXNldCBcXFwic2VuZGVyMDlcXFwiKSAxMDkwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm11bHRpLTAwLTAxXFxcIiAocmVhZC1rZXlzZXQgXFxcIm11bHRpLTAwLTAxXFxcIikgMTAwMS4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJtdWx0aS0wMi0wMy0wNC1hbnlcXFwiIChyZWFkLWtleXNldCBcXFwibXVsdGktMDItMDMtMDQtYW55XFxcIikgMTIzNC4wKVwifX0sXCJtZXRhXCI6e1wiZ2FzTGltaXRcIjowLFwiY2hhaW5JZFwiOlwiXCIsXCJnYXNQcmljZVwiOjAsXCJzZW5kZXJcIjpcIlwiLFwiZmVlXCI6MH0sXCJub25jZVwiOlwiXFxcInRlc3RuZXQwMC1ncmFudHNcXFwiXCJ9In0
  - eyJobFR4TG9ncyI6Ijc5Y2NhN2QyMmRhZjNkYjI4MzY5ZDY0NjY3NWRhMjY5ZjMyNjY1MzUzYzhlYjEwZTMyZGNlMGY1YTgyNGI2YTZjMGM2ZTA0ODE3ZDFhYjYwMDY3YTdhZTU4MWRmNDdlZDJkZjIzZGJhOTMxZDU5MWYwNWY0ZTk0MWQ2YWZjYjNiIiwiaGxDb21tYW5kUmVzdWx0Ijp7InN0YXR1cyI6InN1Y2Nlc3MiLCJkYXRhIjoiV3JpdGUgc3VjY2VlZGVkIn19
minerData: eyJtIjoiTm9NaW5lciIsImtzIjpbXSwia3AiOiI8In0
transactionsHash: zsyS6laO9hKq44nnnvrZr-h8jGGlf5F6Zs6SoTWxgPg
outputsHash: x6SbmNSv8Hj2Mh2Aa64WmUOHpxmbqHRKjcCSlabwSLo
payloadHash: CHA3p5VxKz7j4RjMq-d242idyyg2ZhwIwMS53IlBIVc
coinbase: eyJobFR4TG9ncyI6ImUxNWE4Y2FhYzIzOTk0ZTdmMTQ2OWE2N2I5ZGViZTU0MzU5YzM2YzUzYzI3YjU2MDE0MjI1ZjViNjc1NzNmMDM5YzAyNGJkNGY4OGYxNDliOWNhOWY2N2QxOWJmYTllYmRkNTk5Y2M1ODgyMDY5NTMwMzE1ZjQ3NDUzZmJlMzJiIiwiaGxDb21tYW5kUmVzdWx0Ijp7InN0YXR1cyI6InN1Y2Nlc3MiLCJkYXRhIjoiTk9fQ09JTkJBU0UifX0

|]
