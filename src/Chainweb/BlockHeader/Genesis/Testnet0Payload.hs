{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.Testnet0Payload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - eyJoYXNoIjoieGNpRjdxLWI0enloTzBRR0x3Y0pTT3VlRjctWjcyeUhlNHRMT0pjU3I5VSIsInNpZ3MiOltdLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6bnVsbCxcImNvZGVcIjpcIihpbnRlcmZhY2UgZnVuZ2libGUtdjFcXG5cXG4gIFxcXCIgU3RhbmRhcmQgZm9yIGZ1bmdpYmxlIGNvaW5zIGFuZCB0b2tlbnMgYXMgc3BlY2lmaWVkIGluIEtJUC0wMDAyLiBcXFwiXFxuXFxuICAgOyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXFxuICAgOyBTY2hlbWFcXG5cXG4gICAoZGVmc2NoZW1hIGFjY291bnQtZGV0YWlsc1xcbiAgICBAZG9jIFxcXCJTY2hlbWEgZm9yIHJlc3VsdHMgb2YgJ2FjY291bnQnIG9wZXJhdGlvbi5cXFwiXFxuICAgIEBtb2RlbCBbIChpbnZhcmlhbnQgKCE9IFxcXCJcXFwiIHNlbmRlcikpIF1cXG5cXG4gICAgYWNjb3VudDpzdHJpbmdcXG4gICAgYmFsYW5jZTpkZWNpbWFsXFxuICAgIGd1YXJkOmd1YXJkKVxcblxcbiAgIChkZWZzY2hlbWEgdHJhbnNmZXItc2NoZW1hXFxuICAgIEBkb2MgXFxcIlNjaGVtYSBmb3IgVFJBTlNGRVItbWdyLiBGdXR1cmUgcGFjdCB3aWxsIGFsbG93IHNjaGVtYSBpbmZlcnJlbmNlLlxcXCJcXG4gICAgQG1vZGVsXFxuICAgICAgWyAoaW52YXJpYW50ICghPSBcXFwiXFxcIiBzZW5kZXIpKVxcbiAgICAgICAgKGludmFyaWFudCAoIT0gXFxcIlxcXCIgcmVjZWl2ZXIpKVxcbiAgICAgICAgKGludmFyaWFudCAoIT0gc2VuZGVyIHJlY2VpdmVyKSlcXG4gICAgICAgIChpbnZhcmlhbnQgKD4gYW1vdW50IDAuMCkpXFxuICAgICAgXVxcblxcbiAgICBzZW5kZXI6c3RyaW5nXFxuICAgIHJlY2VpdmVyOnN0cmluZ1xcbiAgICBhbW91bnQ6ZGVjaW1hbClcXG5cXG4gICA7IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4gICA7IENhcHNcXG5cXG4gICAoZGVmY2FwIFRSQU5TRkVSOmJvb2xcXG4gICAgICggc2VuZGVyOnN0cmluZ1xcbiAgICAgICByZWNlaXZlcjpzdHJpbmdcXG4gICAgICAgYW1vdW50OmRlY2ltYWxcXG4gICAgIClcXG4gICAgIEBkb2MgXFxcIiBNYW5hZ2VkIGNhcGFiaWxpdHkgc2VhbGluZyBBTU9VTlQgZm9yIHRyYW5zZmVyIGZyb20gU0VOREVSIHRvIFxcXFxcXG4gICAgICAgICAgXFxcXCBSRUNFSVZFUi4gUGVybWl0cyBhbnkgbnVtYmVyIG9mIHRyYW5zZmVycyB1cCB0byBBTU9VTlQuXFxcIlxcbiAgICAgQG1hbmFnZWQgVFJBTlNGRVItbWdyXFxuICAgICApXFxuXFxuICAgKGRlZnVuIFRSQU5TRkVSLW1ncjpvYmplY3R7dHJhbnNmZXItc2NoZW1hfVxcbiAgICAgKCBtYW5hZ2VkOm9iamVjdHt0cmFuc2Zlci1zY2hlbWF9XFxuICAgICAgIHJlcXVlc3RlZDpvYmplY3R7dHJhbnNmZXItc2NoZW1hfVxcbiAgICAgKVxcbiAgICAgQGRvYyBcXFwiIE1hbmFnZXMgVFJBTlNGRVIgY2FwYWJpbGl0eS4gUkVRVUVTVEVEIHNob3VsZCBtYXRjaCBNQU5BR0VEIG9uIFxcXFxcXG4gICAgICAgICAgXFxcXCBzZW5kZXIgYW5kIHJlY2VpdmVyLiBBTU9VTlQgc2hvdWxkIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IG1hbmFnZWQsIFxcXFxcXG4gICAgICAgICAgXFxcXCBhbmQgbGluZWFybHkgbWFuYWdlZCBzdWNoIHRoYXQgYSByZXF1ZXN0IGZvciAxLjAgYW1vdW50IG9uIGEgMy4wIFxcXFxcXG4gICAgICAgICAgXFxcXCBtYW5hZ2VkIHF1YW50aXR5IGVtaXRzIE1BTkFHRUQgd2l0aCB1cGRhdGVkIGFtb3VudCAyLjAuXFxcIlxcbiAgICAgKVxcblxcbiAgIDsgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbiAgIDsgRnVuY3Rpb25hbGl0eVxcblxcbiAgIChkZWZ1biB0cmFuc2Zlci1jcmVhdGU6c3RyaW5nXFxuICAgICAoIHNlbmRlcjpzdHJpbmdcXG4gICAgICAgcmVjZWl2ZXI6c3RyaW5nXFxuICAgICAgIHJlY2VpdmVyLWd1YXJkOmd1YXJkXFxuICAgICAgIGFtb3VudDpkZWNpbWFsXFxuICAgICApXFxuICAgICBAZG9jIFxcXCIgVHJhbnNmZXIgQU1PVU5UIGJldHdlZW4gYWNjb3VudHMgU0VOREVSIGFuZCBSRUNFSVZFUi4gXFxcXFxcbiAgICAgICAgICBcXFxcIEZhaWxzIGlmIFNFTkRFUiBkb2VzIG5vdCBleGlzdC4gSWYgUkVDRUlWRVIgZXhpc3RzLCBndWFyZCBcXFxcXFxuICAgICAgICAgIFxcXFwgbXVzdCBtYXRjaCBleGlzdGluZyB2YWx1ZS4gSWYgUkVDRUlWRVIgZG9lcyBub3QgZXhpc3QsIFxcXFxcXG4gICAgICAgICAgXFxcXCBSRUNFSVZFUiBhY2NvdW50IGlzIGNyZWF0ZWQgdXNpbmcgUkVDRUlWRVItR1VBUkQuIFxcXFxcXG4gICAgICAgICAgXFxcXCBTdWJqZWN0IHRvIG1hbmFnZW1lbnQgYnkgVFJBTlNGRVIgY2FwYWJpbGl0eS5cXFwiXFxuICAgICBAbW9kZWwgWyAocHJvcGVydHkgKD4gYW1vdW50IDAuMCkpXFxuICAgICAgICAgICAgICAocHJvcGVydHkgKCE9IHNlbmRlciBcXFwiXFxcIikpXFxuICAgICAgICAgICAgICAocHJvcGVydHkgKCE9IHJlY2VpdmVyIFxcXCJcXFwiKSlcXG4gICAgICAgICAgICAgIChwcm9wZXJ0eSAoIT0gc2VuZGVyIHJlY2VpdmVyKSlcXG4gICAgICAgICAgICBdXFxuICAgICApXFxuXFxuICAgKGRlZnBhY3QgdHJhbnNmZXItY3Jvc3NjaGFpbjpzdHJpbmdcXG4gICAgICggc2VuZGVyOnN0cmluZ1xcbiAgICAgICByZWNlaXZlcjpzdHJpbmdcXG4gICAgICAgcmVjZWl2ZXItZ3VhcmQ6Z3VhcmRcXG4gICAgICAgdGFyZ2V0LWNoYWluOnN0cmluZ1xcbiAgICAgICBhbW91bnQ6ZGVjaW1hbFxcbiAgICAgKVxcbiAgICAgQGRvYyBcXFwiIDItc3RlcCBwYWN0IHRvIHRyYW5zZmVyIEFNT1VOVCBmcm9tIFNFTkRFUiBvbiBjdXJyZW50IGNoYWluIFxcXFxcXG4gICAgICAgICAgXFxcXCB0byBSRUNFSVZFUiBvbiBUQVJHRVQtQ0hBSU4gdmlhIFNQViBwcm9vZi4gXFxcXFxcbiAgICAgICAgICBcXFxcIFRBUkdFVC1DSEFJTiBtdXN0IGJlIGRpZmZlcmVudCB0aGFuIGN1cnJlbnQgY2hhaW4gaWQuIFxcXFxcXG4gICAgICAgICAgXFxcXCBGaXJzdCBzdGVwIGRlYml0cyBBTU9VTlQgY29pbnMgaW4gU0VOREVSIGFjY291bnQgYW5kIHlpZWxkcyBcXFxcXFxuICAgICAgICAgIFxcXFwgUkVDRUlWRVIsIFJFQ0VJVkVSX0dVQVJEIGFuZCBBTU9VTlQgdG8gVEFSR0VULUNIQUlOLiBcXFxcXFxuICAgICAgICAgIFxcXFwgU2Vjb25kIHN0ZXAgY29udGludWF0aW9uIGlzIHNlbnQgaW50byBUQVJHRVQtQ0hBSU4gd2l0aCBwcm9vZiBcXFxcXFxuICAgICAgICAgIFxcXFwgb2J0YWluZWQgZnJvbSB0aGUgc3B2ICdvdXRwdXQnIGVuZHBvaW50IG9mIENoYWlud2ViLiBcXFxcXFxuICAgICAgICAgIFxcXFwgUHJvb2YgaXMgdmFsaWRhdGVkIGFuZCBSRUNFSVZFUiBpcyBjcmVkaXRlZCB3aXRoIEFNT1VOVCBcXFxcXFxuICAgICAgICAgIFxcXFwgY3JlYXRpbmcgYWNjb3VudCB3aXRoIFJFQ0VJVkVSX0dVQVJEIGFzIG5lY2Vzc2FyeS5cXFwiXFxuICAgICBAbW9kZWwgWyAocHJvcGVydHkgKD4gYW1vdW50IDAuMCkpXFxuICAgICAgICAgICAgICAocHJvcGVydHkgKCE9IHNlbmRlciBcXFwiXFxcIikpXFxuICAgICAgICAgICAgICAocHJvcGVydHkgKCE9IHJlY2VpdmVyIFxcXCJcXFwiKSlcXG4gICAgICAgICAgICAgIChwcm9wZXJ0eSAoIT0gc2VuZGVyIHJlY2VpdmVyKSlcXG4gICAgICAgICAgICAgIChwcm9wZXJ0eSAoIT0gdGFyZ2V0LWNoYWluIFxcXCJcXFwiKSlcXG4gICAgICAgICAgICBdXFxuICAgICApXFxuXFxuICAgKGRlZnVuIGdldC1iYWxhbmNlOmRlY2ltYWxcXG4gICAgICggYWNjb3VudDpzdHJpbmcgKVxcbiAgICAgXFxcIiBHZXQgYmFsYW5jZSBmb3IgQUNDT1VOVC4gRmFpbHMgaWYgYWNjb3VudCBkb2VzIG5vdCBleGlzdC5cXFwiXFxuICAgICApXFxuXFxuICAgKGRlZnVuIGRldGFpbHM6b2JqZWN0e2FjY291bnQtZGV0YWlsc31cXG4gICAgICggYWNjb3VudDogc3RyaW5nIClcXG4gICAgIFxcXCIgR2V0IGFuIG9iamVjdCB3aXRoIGRldGFpbHMgb2YgQUNDT1VOVC4gXFxcXFxcbiAgICAgXFxcXCBGYWlscyBpZiBhY2NvdW50IGRvZXMgbm90IGV4aXN0LlxcXCJcXG4gICAgIClcXG5cXG4gICAoZGVmdW4gcHJlY2lzaW9uOmludGVnZXJcXG4gICAgICgpXFxuICAgICBcXFwiUmV0dXJuIHRoZSBtYXhpbXVtIGFsbG93ZWQgZGVjaW1hbCBwcmVjaXNpb24uXFxcIlxcbiAgICAgKVxcblxcbiAgIChkZWZ1biBlbmZvcmNlLXVuaXQ6Ym9vbFxcbiAgICAgKCBhbW91bnQ6ZGVjaW1hbCApXFxuICAgICBcXFwiIEVuZm9yY2UgbWluaW11bSBwcmVjaXNpb24gYWxsb3dlZCBmb3IgdHJhbnNhY3Rpb25zLlxcXCJcXG4gICAgIClcXG5cXG4gICAoZGVmdW4gY3JlYXRlLWFjY291bnQ6c3RyaW5nXFxuICAgICAoIGFjY291bnQ6c3RyaW5nXFxuICAgICAgIGd1YXJkOmd1YXJkXFxuICAgICApXFxuICAgICBcXFwiIENyZWF0ZSBBQ0NPVU5UIHdpdGggMC4wIGJhbGFuY2UsIHdpdGggR1VBUkQgY29udHJvbGxpbmcgYWNjZXNzLlxcXCJcXG4gICAgIClcXG5cXG4gICAoZGVmdW4gcm90YXRlOnN0cmluZ1xcbiAgICAgKCBhY2NvdW50OnN0cmluZ1xcbiAgICAgICBuZXctZ3VhcmQ6Z3VhcmRcXG4gICAgIClcXG4gICAgIFxcXCIgUm90YXRlIGd1YXJkIGZvciBBQ0NPVU5ULiBUcmFuc2FjdGlvbiBpcyB2YWxpZGF0ZWQgYWdhaW5zdCBcXFxcXFxuICAgICBcXFxcIGV4aXN0aW5nIGd1YXJkIGJlZm9yZSBpbnN0YWxsaW5nIG5ldyBndWFyZC4gXFxcIlxcbiAgICAgKVxcblxcbilcXG5cIn19LFwic2lnbmVyc1wiOltdLFwibWV0YVwiOntcImNyZWF0aW9uVGltZVwiOjAsXCJ0dGxcIjoxNzI4MDAsXCJnYXNMaW1pdFwiOjAsXCJjaGFpbklkXCI6XCJcIixcImdhc1ByaWNlXCI6MCxcInNlbmRlclwiOlwiXCJ9LFwibm9uY2VcIjpcIlxcXCJnZW5lc2lzLTAxXFxcIlwifSJ9
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IkxvYWRlZCBpbnRlcmZhY2UgZnVuZ2libGUtdjEifSwicmVxS2V5IjoieGNpRjdxLWI0enloTzBRR0x3Y0pTT3VlRjctWjcyeUhlNHRMT0pjU3I5VSIsImxvZ3MiOiJwdjlxVFdiUWZTRWo2TGNDTFljVUdFOElZU0lkVTNqMXZpR1dIZk8xRTNNIiwibWV0YURhdGEiOm51bGwsImNvbnRpbnVhdGlvbiI6bnVsbCwidHhJZCI6MH0
- - 
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IlRhYmxlQ3JlYXRlZCJ9LCJyZXFLZXkiOiJTSXA4dzlTT29ldU9GVnNvVzlPQU93WjFyNEJYWUJQUi1iOVJnc2lJdU9FIiwibG9ncyI6IlZiRmQzYXhqR0JQMkJuYmhCS0lwM2pZVUMtYVRvZWNMb0poTENOYXczMFkiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoxfQ
- - eyJoYXNoIjoiLVJkZzVidlB1bjlvTlYtQ2l2OWNqLUE3YVhfRVhMczlSQVNSdFRPb2djVSIsInNpZ3MiOlt7InNpZyI6Ijc5ZGMwMjg2NzFjOTVlZjQ2NmJkYTQ3ZGVmNmM0OGE2YWJmNWFjMDExZDA2MzM3MzFlYzFjNmFlYTc5NzFiOTZlY2NlZDkyOGQ1NTk2ZTZiNGIzNWI2MDdhZDNkYWQzMzAzZmMyZjg4ZjA3YzRmZDFiNDdiYmVhYzZjYzIzYTA4In1dLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1wibnMtYWRtaW4ta2V5c2V0XCI6W1wiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwiXSxcIm5zLW9wZXJhdGUta2V5c2V0XCI6W1wiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwiXX0sXCJjb2RlXCI6XCJcXG4oZGVmaW5lLWtleXNldCAnbnMtYWRtaW4ta2V5c2V0IChyZWFkLWtleXNldCAnbnMtYWRtaW4ta2V5c2V0KSlcXG4oZGVmaW5lLWtleXNldCAnbnMtb3BlcmF0ZS1rZXlzZXQgKHJlYWQta2V5c2V0ICducy1vcGVyYXRlLWtleXNldCkpXFxuXFxuKG1vZHVsZSBucyAnbnMtYWRtaW4ta2V5c2V0XFxuICBcXFwiQWRtaW5pc3RlcnMgZGVmaW5pdGlvbiBvZiBuZXcgbmFtZXNwYWNlcyBpbiBDaGFpbndlYi5cXFwiXFxuXFxuICAoZGVmc2NoZW1hIHJlZy1lbnRyeVxcbiAgICBhZG1pbi1ndWFyZDpndWFyZFxcbiAgICBhY3RpdmU6Ym9vbClcXG5cXG4gIChkZWZ0YWJsZSByZWdpc3RyeTp7cmVnLWVudHJ5fSlcXG5cXG4gIChkZWZjYXAgT1BFUkFURSAoKVxcbiAgICAoZW5mb3JjZS1rZXlzZXQgJ25zLW9wZXJhdGUta2V5c2V0KSlcXG5cXG4gIChkZWZjb25zdCBHVUFSRF9TVUNDRVNTIChjcmVhdGUtdXNlci1ndWFyZCAoc3VjY2VzcykpKVxcbiAgKGRlZmNvbnN0IEdVQVJEX0ZBSUxVUkUgKGNyZWF0ZS11c2VyLWd1YXJkIChmYWlsdXJlKSkpXFxuXFxuICAoZGVmdW4gc3VjY2VzcyAoKVxcbiAgICB0cnVlKVxcbiAgKGRlZnVuIGZhaWx1cmUgKClcXG4gICAgKGVuZm9yY2UgZmFsc2UgXFxcIkRpc2FibGVkXFxcIikpXFxuXFxuICAoZGVmdW4gdmFsaWRhdGUtbmFtZSAobmFtZSlcXG4gICAgKGVuZm9yY2UgKCE9IFxcXCJcXFwiIG5hbWUpIFxcXCJFbXB0eSBuYW1lIG5vdCBhbGxvd2VkXFxcIilcXG4gICAgKGVuZm9yY2UgKDwgKGxlbmd0aCBuYW1lKSA2NCkgXFxcIk5hbWUgbXVzdCBiZSBsZXNzIHRoYW4gNjQgY2hhcmFjdGVycyBsb25nXFxcIilcXG4gICAgKGVuZm9yY2UgKGlzLWNoYXJzZXQgQ0hBUlNFVF9MQVRJTjEgbmFtZSlcXG4gICAgICAgICAgICAgXFxcIk5hbWUgbXVzdCBiZSBpbiBsYXRpbjEgY2hhcnNldFxcXCIpKVxcblxcbiAgKGRlZnVuIHZhbGlkYXRlOmJvb2xcXG4gICAgICAoIG5zLW5hbWU6c3RyaW5nXFxuICAgICAgICBucy1hZG1pbjpndWFyZFxcbiAgICAgICAgKVxcbiAgICBcXFwiIE1hbmFnZXMgbmFtZXNwYWNlIGluc3RhbGwgZm9yIENoYWlud2ViLiBSZXF1aXJlcyBhY3RpdmUgcm93IGluIHJlZ2lzdHJ5IFxcXFxcXG4gICAgXFxcXCBmb3IgTlMtTkFNRSB3aXRoIGd1YXJkIG1hdGNoaW5nIE5TLUFETUlOLlxcXCJcXG5cXG4gICAgKHZhbGlkYXRlLW5hbWUgbnMtbmFtZSlcXG5cXG4gICAgKHdpdGgtZGVmYXVsdC1yZWFkIHJlZ2lzdHJ5IG5zLW5hbWVcXG4gICAgICB7ICdhZG1pbi1ndWFyZCA6IG5zLWFkbWluXFxuICAgICAgLCAnYWN0aXZlIDogZmFsc2UgfVxcbiAgICAgIHsgJ2FkbWluLWd1YXJkIDo9IGFnXFxuICAgICAgLCAnYWN0aXZlIDo9IGlzLWFjdGl2ZSB9XFxuXFxuICAgICAgICAoZW5mb3JjZSBpcy1hY3RpdmUgXFxcIkluYWN0aXZlIG9yIHVucmVnaXN0ZXJlZCBuYW1lc3BhY2VcXFwiKVxcbiAgICAgICAgKGVuZm9yY2UgKD0gbnMtYWRtaW4gYWcpIFxcXCJBZG1pbiBndWFyZCBtdXN0IG1hdGNoIGd1YXJkIGluIHJlZ2lzdHJ5XFxcIilcXG5cXG4gICAgICAgIHRydWUpKVxcblxcbiAgKGRlZnVuIHdyaXRlLXJlZ2lzdHJ5OnN0cmluZ1xcbiAgICAgICggbnMtbmFtZTpzdHJpbmdcXG4gICAgICAgIGd1YXJkOmd1YXJkXFxuICAgICAgICBhY3RpdmU6Ym9vbFxcbiAgICAgICAgKVxcbiAgICBcXFwiIFdyaXRlIGVudHJ5IHdpdGggR1VBUkQgYW5kIEFDVElWRSBpbnRvIHJlZ2lzdHJ5IGZvciBOQU1FLiBcXFxcXFxuICAgIFxcXFwgR3VhcmRlZCBieSBvcGVyYXRlIGtleXNldC4gXFxcIlxcblxcbiAgICAod2l0aC1jYXBhYmlsaXR5IChPUEVSQVRFKVxcblxcbiAgICAgICh2YWxpZGF0ZS1uYW1lIG5zLW5hbWUpXFxuXFxuICAgICAgKHdyaXRlIHJlZ2lzdHJ5IG5zLW5hbWVcXG4gICAgICAgIHsgJ2FkbWluLWd1YXJkOiBndWFyZFxcbiAgICAgICAgLCAnYWN0aXZlOiBhY3RpdmUgfSlcXG5cXG4gICAgICBcXFwiUmVnaXN0ZXIgZW50cnkgd3JpdHRlblxcXCIpKVxcblxcbiAgKGRlZnVuIHF1ZXJ5Om9iamVjdHtyZWctZW50cnl9XFxuICAgICAgKCBucy1uYW1lOnN0cmluZyApXFxuICAgIChyZWFkIHJlZ2lzdHJ5IG5zLW5hbWUpKVxcblxcbiAgKVxcblxcbihjcmVhdGUtdGFibGUgcmVnaXN0cnkpXFxuXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJrYWRlbmFcXFwiXFxuICAoa2V5c2V0LXJlZi1ndWFyZCAnbnMtb3BlcmF0ZS1rZXlzZXQpIHRydWUpXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJ1c2VyXFxcIiBHVUFSRF9GQUlMVVJFIHRydWUpXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJmcmVlXFxcIiBHVUFSRF9GQUlMVVJFIHRydWUpXFxuXFxuKGRlZmluZS1uYW1lc3BhY2UgXFxcImthZGVuYVxcXCJcXG4gIChrZXlzZXQtcmVmLWd1YXJkICducy1vcGVyYXRlLWtleXNldClcXG4gIChrZXlzZXQtcmVmLWd1YXJkICducy1vcGVyYXRlLWtleXNldCkpXFxuXFxuKGRlZmluZS1uYW1lc3BhY2UgXFxcInVzZXJcXFwiIEdVQVJEX1NVQ0NFU1MgR1VBUkRfRkFJTFVSRSlcXG4oZGVmaW5lLW5hbWVzcGFjZSBcXFwiZnJlZVxcXCIgR1VBUkRfU1VDQ0VTUyBHVUFSRF9GQUlMVVJFKVxcblwifX0sXCJzaWduZXJzXCI6W3tcInB1YktleVwiOlwiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwifV0sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcImxvYWQtbnMtcHJvZG5ldC1zZW5kZXIwMFxcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5hbWVzcGFjZSBkZWZpbmVkOiBmcmVlIn0sInJlcUtleSI6Ii1SZGc1YnZQdW45b05WLUNpdjljai1BN2FYX0VYTHM5UkFTUnRUT29nY1UiLCJsb2dzIjoiRGpTbTlEWEZSZGo4RjVGSXpPOWpMNUVUbDFuNGhYN3c2NHhiRGRGb1VJayIsIm1ldGFEYXRhIjpudWxsLCJjb250aW51YXRpb24iOm51bGwsInR4SWQiOjJ9
- - eyJoYXNoIjoiU3ZuMEs5QzF0UzdwMTlzWEJtS0xWS2IwS2RNOXFraEl3OFlRTS1KdGxVYyIsInNpZ3MiOltdLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1wiZW1pbHlcIjpbXCI3N2E0OTQ3YzQzY2RiNGI0ZmRlZjAwYjEwZGM4NDQ2YzBlNTkxYjczMzY2ODYxMDQ4YzE5NWJiNmE1OWJmNWI5XCJdfSxcImNvZGVcIjpcIlxcbihkZWZpbmUta2V5c2V0IFxcXCJlbWlseVxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbWlseVxcXCIpKVxcbihjb2luLmNyZWF0ZS1hbGxvY2F0aW9uLWFjY291bnQgXFxcImVtaWx5XFxcIiAodGltZSBcXFwiMjAyMC0xMC0zMVQwMDowMDowMFpcXFwiKSBcXFwiZW1pbHlcXFwiIDIwMDAwMC4wKVwifX0sXCJzaWduZXJzXCI6W10sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcInByb2RuZXQtZ3JhbnRzXFxcIlwifSJ9
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJTdm4wSzlDMXRTN3AxOXNYQm1LTFZLYjBLZE05cWtoSXc4WVFNLUp0bFVjIiwibG9ncyI6InQzX3dfdWtRc2Fzc3V2M243SThqdV9aR0xsQU1TTzk0MXVha1ZjeU8wNHMiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjozfQ
- - eyJoYXNoIjoiNFAwZ1V4eUFuUDJJX285aWRpM0RwNUstWlVwWXU2b3VTSFpkN0Z1ZUtaRSIsInNpZ3MiOltdLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1widG9ueVwiOltcIjcyNzM2MGMzMmUwODgxMmZmNWYwNGNiMWU3NWNkOWMwYmE2YjcyNjg0MDg4NjE2MDEwYWY0MTFkMGYxNGM1NGFcIl0sXCJlbWlseVwiOltcIjc3YTQ5NDdjNDNjZGI0YjRmZGVmMDBiMTBkYzg0NDZjMGU1OTFiNzMzNjY4NjEwNDhjMTk1YmI2YTU5YmY1YjlcIl0sXCJjb2xpblwiOltcImRiNzc2NzkzYmUwZmNmOGU3NmM3NWJkYjM1YTM2ZTY3ZjI5ODExMWRjNjE0NWM2NjY5M2IwMTMzMTkyZTI2MTZcIl0sXCJtb25pY2FcIjpbXCI3YWM3MTFjNWQ0NTk4MzA3ZmE2YWIzZTUwNTFlNmViN2RiYzdjOGMwNWVkZTViZWE3NWJlODc2ZTM4NzhkZmY4XCJdLFwibWlndWVsXCI6W1wiOTVkMDQyOWU0NWJhMDc1YWE2ZmRhODEyNjNkZjU4MzlkNTIwMjBjNDIxMjIyMjBkOWQ4NDFhNGNlMmY0MjJkY1wiXSxcInRheWxvclwiOltcIjdlYjcyMmQxM2EzZjJkNzg1NDgyYWVmMmJjOGJiNDlkOTY4NDliZDVkMzk1YTQwY2VkOGIwNWJmZTA2OGY0NGJcIl0sXCJtYXJrXCI6W1wiZTlkZDMzNzYxMzk3OTkxYTMxN2U3Y2QyNGU4MmRmNGQxZTEyYTMwMDYyYTI0MmM5ZTFjNWY2YTE5MzA1MTZkY1wiXSxcImFuYWdoYVwiOltcIjBkOGRjYWUzYjZmZDgwNWM1NTJlYTNiY2E5M2Q5Nzg3NjI0MzExZjc4NGY5OTJiZTNhMWVjZDQ0NjEwMmNjZDlcIl0sXCJhbmRyZXdcIjpbXCI3ZDdhMDliNzQxZTY3MjYyMTk3MDlmN2FiOTc5MGM2OWY4Y2QxMmIxMDI2ZDAwOTBhYzdjNTJlOWFhMGFiNzRiXCJdLFwiYW5hc3Rhc2lhXCI6W1wiMWVjNzRkZTcyNGIzYzcwMDczN2Q5OTkwNmFiYTQ4ZGJlZDZiOTAxNDBiYmM2NDEzM2M1NTg1NzFiMTg4ODNjM1wiXSxcImVtbWFudWVsXCI6W1wiYTc4NGE1Mjk4NDIyOWVkMjhiNzAzODEwY2Q0NTI1NjU3NTlkODg0MjA4NzVhNWRiMjU3ZmE4ZTgwNmFjOWRlNVwiXSxcImJlblwiOltcImQ4ZTUxMmIyZDA4YWZhZjIwYzU5YWFmMmEwZGI1NzI2MmMzMTk2NWU0MzEwZTMzMGMxYWQ4MDc1ZWNhYTM2NDdcIl0sXCJkb3VnXCI6W1wiZGVhNjQ3MDA5Mjk1ZGMwMTViYTZlNjM1OWI4NWJhZmUwOWQyY2U5MzVhMDNjM2IzZjc3NTQ0MmQ1MzkwMjVcIl0sXCJ2aXZcIjpbXCIyM2Q0YjRlOGNiMzAzZmVlYmNhZmE5MzA3MzFkNGI4OTEzNjk1YmQwZDkyYzNiNTM1OTUwNjUxOWNlYmYxNTZhXCJdLFwiamVmZlwiOltcIjk4OTNhYmQzYzg1ODg5ZGZhMzUxYzVlZTg2MTdlNWMxOTBmYTNhODhjZTQ1YTZhZWNjMTQ1MGM2YTY4NzFlN2VcIl0sXCJmcmFuY2VzY29cIjpbXCI0YjBmMjliOWUwYTk5NjU4N2U1YjU1MjQ3MzFjOTFlY2YwMmVjYWE4YjdlNzBlNWY4ZjE4ODFjNWYwYzE4ZmMxXCJdLFwic3R1YXJ0XCI6W1wiMGUzMTgwZGQ0YWU5ZDQzODVhMjFkN2NhOTVjYzcyMjliMGY2YjJjYTllMGY0ODYxZGQ0ZWVkNjg1MDA0ZGY2NlwiXSxcImxlYWhcIjpbXCIyMTY2NDMxMzdmYjVmNmExMjdkYmIxMDYzNzAyY2JiN2MxZjE1MzQ1MWExYWQ0YWZhOWY5MmU3NzQ0N2NjMzMwXCJdLFwid2lsbFwiOltcIjgzMGFkNzczNTEwYWIwZjVhMGQ0NTY0YjdiMzFkMmIwYjFiYTdmZDVhMTE2ZjY2NTk4YTFjNjNjYzIxNDJmZDVcIl0sXCJsaW5kYVwiOltcImUxMDAyZGIwODk0Mjk5YmIzNzIzOGJhYjAyMTcwMTgwYzBhZTU2ZjU5MzIxNjliYjJmY2Y3NTYwNTlmZWExNzVcIl0sXCJoZWVreXVuXCI6W1wiMDkwNGY1OTcyYjJiYzI2M2NhM2M1NmI2YjlmYjg4NDY0YWNiYWM0OTBjMjIxOTdjMDBhNzc4YzliNzBjMjBjZFwiXSxcInJlYmVjY2FcIjpbXCIyZmVhNDNmN2M4MGJhNzVkMjE3M2M3ZDgzMjI4NzA5YjE0NGM1N2M1ZTg2MzQ3YzgyMDczMWUwMjViZDdmMmJjXCJdfSxcImNvZGVcIjpcIihjb2luLmNvaW5iYXNlIFxcXCJhbmFnaGFcXFwiIChyZWFkLWtleXNldCBcXFwiYW5hZ2hhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImFuYXN0YXNpYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJhbmFzdGFzaWFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiYW5kcmV3XFxcIiAocmVhZC1rZXlzZXQgXFxcImFuZHJld1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJiZW5cXFwiIChyZWFkLWtleXNldCBcXFwiYmVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImNvbGluXFxcIiAocmVhZC1rZXlzZXQgXFxcImNvbGluXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImRvdWdcXFwiIChyZWFkLWtleXNldCBcXFwiZG91Z1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbWlseVxcXCIgKGtleXNldC1yZWYtZ3VhcmQgXFxcImVtaWx5XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImVtbWFudWVsXFxcIiAocmVhZC1rZXlzZXQgXFxcImVtbWFudWVsXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImZyYW5jZXNjb1xcXCIgKHJlYWQta2V5c2V0IFxcXCJmcmFuY2VzY29cXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiaGVla3l1blxcXCIgKHJlYWQta2V5c2V0IFxcXCJoZWVreXVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImplZmZcXFwiIChyZWFkLWtleXNldCBcXFwiamVmZlxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJsZWFoXFxcIiAocmVhZC1rZXlzZXQgXFxcImxlYWhcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibGluZGFcXFwiIChyZWFkLWtleXNldCBcXFwibGluZGFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibWFya1xcXCIgKHJlYWQta2V5c2V0IFxcXCJtYXJrXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1pZ3VlbFxcXCIgKHJlYWQta2V5c2V0IFxcXCJtaWd1ZWxcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibW9uaWNhXFxcIiAocmVhZC1rZXlzZXQgXFxcIm1vbmljYVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJyZWJlY2NhXFxcIiAocmVhZC1rZXlzZXQgXFxcInJlYmVjY2FcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic3R1YXJ0XFxcIiAocmVhZC1rZXlzZXQgXFxcInN0dWFydFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ0YXlsb3JcXFwiIChyZWFkLWtleXNldCBcXFwidGF5bG9yXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInRvbnlcXFwiIChyZWFkLWtleXNldCBcXFwidG9ueVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ2aXZcXFwiIChyZWFkLWtleXNldCBcXFwidml2XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIndpbGxcXFwiIChyZWFkLWtleXNldCBcXFwid2lsbFxcXCIpIDUwMC4wKVwifX0sXCJzaWduZXJzXCI6W10sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcInByb2RuZXQtZ3JhbnRzXFxcIlwifSJ9
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiI0UDBnVXh5QW5QMklfbzlpZGkzRHA1Sy1aVXBZdTZvdVNIWmQ3RnVlS1pFIiwibG9ncyI6IlEtbjA0bjdHQ3hWemgySmR1SW96ckVTUGVWNGM0NTlvT2JZVWRnSVh3WmciLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjo0fQ
minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
transactionsHash: 5wVAAeYV7PPIm31XcVqeqOsPivSfY-U4riB7PiDxtCc
outputsHash: 9wiWKNfl5Cil6bRs3S6mwB27Vakfu8ycoXRiaysA1gw
payloadHash: Ta67xxlTCyl4b-v9MqAyqaVmV2HuzfrpNGUgMnucRlQ
coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5PX0NPSU5CQVNFIn0sInJlcUtleSI6IkRsZFJ3Q2JsUTdMb3F5NndZSm5hb2RIbDMwZDNqM2VILXF0RnpmRXY0NmciLCJsb2dzIjpudWxsLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjpudWxsfQ

|]
