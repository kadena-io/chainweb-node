{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.TestnetPayload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - eyJoYXNoIjoiN0dFZGdTV3Bid2ZwZk91OUlSYnU5N2RhMEk2Vng2U2VCWENsWGY0TC1MNCIsInNpZ3MiOltdLCJjbWQiOiJ7XCJwYXlsb2FkXCI6e1wiZXhlY1wiOntcImRhdGFcIjpudWxsLFwiY29kZVwiOlwiKGludGVyZmFjZSBjb2luLXNpZ1xcblxcbiAgXFxcIidjb2luLXNpZycgcmVwcmVzZW50cyB0aGUgS2FkZW5hIENvaW4gQ29udHJhY3QgaW50ZXJmYWNlLiBUaGlzIGNvbnRyYWN0ICAgICBcXFxcXFxuICBcXFxccHJvdmlkZXMgYm90aCB0aGUgdGhlIGdlbmVyYWwgaW50ZXJmYWNlIGZvciBhIEthZGVuYSdzIHRva2VuLCBzdXBwbHlpbmcgYSAgIFxcXFxcXG4gIFxcXFx0cmFuc2ZlciBmdW5jdGlvbiwgY29pbmJhc2UsIGFjY291bnQgY3JlYXRpb24gYW5kIGJhbGFuY2UgcXVlcnkuXFxcIlxcblxcbiAgKGRlZnVuIGNyZWF0ZS1hY2NvdW50OnN0cmluZyAoYWNjb3VudDpzdHJpbmcgZ3VhcmQ6Z3VhcmQpXFxuICAgIEBkb2MgXFxcIkNyZWF0ZSBhbiBhY2NvdW50IGZvciBBQ0NPVU5ULCB3aXRoIEdVQVJEIGNvbnRyb2xsaW5nIGFjY2VzcyB0byB0aGUgIFxcXFxcXG4gICAgXFxcXGFjY291bnQuXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIHRyYW5zZmVyOnN0cmluZyAoc2VuZGVyOnN0cmluZyByZWNlaXZlcjpzdHJpbmcgYW1vdW50OmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIlRyYW5zZmVyIEFNT1VOVCBiZXR3ZWVuIGFjY291bnRzIFNFTkRFUiBhbmQgUkVDRUlWRVIgb24gdGhlIHNhbWUgICAgXFxcXFxcbiAgICBcXFxcY2hhaW4uIFRoaXMgZmFpbHMgaWYgZWl0aGVyIFNFTkRFUiBvciBSRUNFSVZFUiBkb2VzIG5vdCBleGlzdC4gICAgICAgICAgIFxcXFxcXG4gICAgXFxcXENyZWF0ZS1vbi10cmFuc2ZlciBjYW4gYmUgZG9uZSB1c2luZyB0aGUgJ3RyYW5zZmVyLWFuZC1jcmVhdGUnIGZ1bmN0aW9uLlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgICAgICAgICAocHJvcGVydHkgKG5vdCAoPSBzZW5kZXIgcmVjZWl2ZXIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIHRyYW5zZmVyLWFuZC1jcmVhdGU6c3RyaW5nXFxuICAgICggc2VuZGVyOnN0cmluZ1xcbiAgICAgIHJlY2VpdmVyOnN0cmluZ1xcbiAgICAgIHJlY2VpdmVyLWd1YXJkOmd1YXJkXFxuICAgICAgYW1vdW50OmRlY2ltYWwgKVxcblxcbiAgICBAZG9jIFxcXCJUcmFuc2ZlciBBTU9VTlQgYmV0d2VlbiBhY2NvdW50cyBTRU5ERVIgYW5kIFJFQ0VJVkVSIG9uIHRoZSBzYW1lICAgIFxcXFxcXG4gICAgXFxcXGNoYWluLiBUaGlzIGZhaWxzIGlmIFNFTkRFUiBkb2VzIG5vdCBleGlzdC4gSWYgdGhlIFJFQ0VJVkVSIGFjY291bnQgZG9lcyBcXFxcXFxuICAgIFxcXFxub3QgZXhpc3QsIHRoZW4gaXQgaXMgY3JlYXRlZCBhbmQgYXNzb2NpYXRlZCB3aXRoIFJFQ0VJVkVSLUdVQVJELlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgICAgICAgICAocHJvcGVydHkgKG5vdCAoPSBzZW5kZXIgcmVjZWl2ZXIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIGFjY291bnQtYmFsYW5jZTpkZWNpbWFsIChhY2NvdW50OnN0cmluZylcXG4gICAgQGRvYyBcXFwiQ2hlY2sgYW4gYWNjb3VudCdzIGJhbGFuY2VcXFwiXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAobm90ICg9IGFjY291bnQgXFxcIlxcXCIpKSkgXVxcbiAgICApXFxuXFxuICAoZGVmdW4gYWNjb3VudC1pbmZvOm9iamVjdCAoYWNjb3VudDpzdHJpbmcpXFxuICAgIEBkb2MgXFxcIkdldCBhbGwgb2YgYW4gYWNjb3VudCdzIGluZm8uIFRoaXMgaW5jbHVkZXMgdGhlIGJhbGFuY2UgYW5kIHRoZSAgICAgXFxcXFxcbiAgICBcXFxcZ3VhcmQuXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF0pXFxuXFxuICAoZGVmdW4gcm90YXRlLWFjY291bnQtZ3VhcmQ6c3RyaW5nIChhY2NvdW50OnN0cmluZyBuZXctZ3VhcmQ6Z3VhcmQpXFxuICAgIEBkb2MgXFxcIlJvdGF0ZSBndWFyZCBhc3NvY2lhdGVkIHdpdGggQUNDT1VOVCB0byBuZXcgZ3VhcmQgTkVXLUdVQVJEXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIGNvaW5iYXNlOnN0cmluZyAoYWRkcmVzczpzdHJpbmcgYWRkcmVzcy1ndWFyZDpndWFyZCBhbW91bnQ6ZGVjaW1hbClcXG4gICAgQGRvYyBcXFwiTWludCBzb21lIG51bWJlciBvZiB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gc29tZSBhZGRyZXNzXFxcIlxcblxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKD4gYW1vdW50IDAuMCkpXFxuICAgICAgICAgICAgIChwcm9wZXJ0eSAobm90ICg9IGFkZHJlc3MgXFxcIlxcXCIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbilcXG5cIn19LFwic2lnbmVyc1wiOltdLFwibWV0YVwiOntcImNyZWF0aW9uVGltZVwiOjAsXCJ0dGxcIjowLFwiZ2FzTGltaXRcIjowLFwiY2hhaW5JZFwiOlwiXCIsXCJnYXNQcmljZVwiOjAsXCJzZW5kZXJcIjpcIlwifSxcIm5vbmNlXCI6XCJcXFwiZ2VuZXNpcy0wMVxcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiIxaWtIaGlwSUhUakpVWm1xSkQ5RzZ1MjAtNllLcVIzc3JlZnhxZ2p3NXRzIiwibG9ncyI6IkMwZUIyU1dOODh4RG5tZ2lSOGJwQk42VmtzZWNQNl9CSHFGVk1jbjVTV2MiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoyfQ
- - 
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IlRhYmxlQ3JlYXRlZCJ9LCJyZXFLZXkiOiJmSWpkRmZOUXFoX1JnLWxXZmNLX1o4UC1KMU0yeHE1RjlfdkZLcUlaTUJjIiwibG9ncyI6IjRLVjRZZGpJcmF1OGdoSFhpOF9DaXkwT3VfbmNoSUxZMzc0aUZ6emUzVnMiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoxfQ
- - eyJoYXNoIjoiMWlrSGhpcElIVGpKVVptcUpEOUc2dTIwLTZZS3FSM3NyZWZ4cWdqdzV0cyIsInNpZ3MiOltdLCJjbWQiOiJ7XCJwYXlsb2FkXCI6e1wiZXhlY1wiOntcImRhdGFcIjp7XCJ0b255XCI6W1wiNzI3MzYwYzMyZTA4ODEyZmY1ZjA0Y2IxZTc1Y2Q5YzBiYTZiNzI2ODQwODg2MTYwMTBhZjQxMWQwZjE0YzU0YVwiXSxcImVtaWx5XCI6W1wiNzdhNDk0N2M0M2NkYjRiNGZkZWYwMGIxMGRjODQ0NmMwZTU5MWI3MzM2Njg2MTA0OGMxOTViYjZhNTliZjViOVwiXSxcImNvbGluXCI6W1wiZGI3NzY3OTNiZTBmY2Y4ZTc2Yzc1YmRiMzVhMzZlNjdmMjk4MTExZGM2MTQ1YzY2NjkzYjAxMzMxOTJlMjYxNlwiXSxcIm1vbmljYVwiOltcIjdhYzcxMWM1ZDQ1OTgzMDdmYTZhYjNlNTA1MWU2ZWI3ZGJjN2M4YzA1ZWRlNWJlYTc1YmU4NzZlMzg3OGRmZjhcIl0sXCJtaWd1ZWxcIjpbXCI5NWQwNDI5ZTQ1YmEwNzVhYTZmZGE4MTI2M2RmNTgzOWQ1MjAyMGM0MjEyMjIyMGQ5ZDg0MWE0Y2UyZjQyMmRjXCJdLFwidGF5bG9yXCI6W1wiN2ViNzIyZDEzYTNmMmQ3ODU0ODJhZWYyYmM4YmI0OWQ5Njg0OWJkNWQzOTVhNDBjZWQ4YjA1YmZlMDY4ZjQ0YlwiXSxcIm1hcmtcIjpbXCJlOWRkMzM3NjEzOTc5OTFhMzE3ZTdjZDI0ZTgyZGY0ZDFlMTJhMzAwNjJhMjQyYzllMWM1ZjZhMTkzMDUxNmRjXCJdLFwiYW5hZ2hhXCI6W1wiMGQ4ZGNhZTNiNmZkODA1YzU1MmVhM2JjYTkzZDk3ODc2MjQzMTFmNzg0Zjk5MmJlM2ExZWNkNDQ2MTAyY2NkOVwiXSxcImFuZHJld1wiOltcIjdkN2EwOWI3NDFlNjcyNjIxOTcwOWY3YWI5NzkwYzY5ZjhjZDEyYjEwMjZkMDA5MGFjN2M1MmU5YWEwYWI3NGJcIl0sXCJhbmFzdGFzaWFcIjpbXCIxZWM3NGRlNzI0YjNjNzAwNzM3ZDk5OTA2YWJhNDhkYmVkNmI5MDE0MGJiYzY0MTMzYzU1ODU3MWIxODg4M2MzXCJdLFwiY3JvZXN1c1wiOltcIjI5OTNmNzk1ZDEzM2ZhNWQwZmQ4NzdhNjQxY2FiYzhiMjhjZDM2MTQ3ZjY2Njk4OGNhY2JhYTQzNzlkMWZmOTNcIl0sXCJlbW1hbnVlbFwiOltcImE3ODRhNTI5ODQyMjllZDI4YjcwMzgxMGNkNDUyNTY1NzU5ZDg4NDIwODc1YTVkYjI1N2ZhOGU4MDZhYzlkZTVcIl0sXCJiZW5cIjpbXCJkOGU1MTJiMmQwOGFmYWYyMGM1OWFhZjJhMGRiNTcyNjJjMzE5NjVlNDMxMGUzMzBjMWFkODA3NWVjYWEzNjQ3XCJdLFwiZG91Z1wiOltcImRlYTY0NzAwOTI5NWRjMDE1YmE2ZTYzNTliODViYWZlMDlkMmNlOTM1YTAzYzNiZjgzZjc3NTQ0MmQ1MzkwMjVcIl0sXCJ2aXZcIjpbXCIyM2Q0YjRlOGNiMzAzZmVlYmNhZmE5MzA3MzFkNGI4OTEzNjk1YmQwZDkyYzNiNTM1OTUwNjUxOWNlYmYxNTZhXCJdLFwiamVmZlwiOltcImQ0ZDhhZmJjOWE5NTZhNmYzYTMyYWY2MTA0NmRiOThhNmE0MjY2NzA5Mzc0YjAzZDE3ZDQ4Y2FjYmNlMTY0NzZcIl0sXCJmcmFuY2VzY29cIjpbXCI0YjBmMjliOWUwYTk5NjU4N2U1YjU1MjQ3MzFjOTFlY2YwMmVjYWE4YjdlNzBlNWY4ZjE4ODFjNWYwYzE4ZmMxXCJdLFwic3R1YXJ0XCI6W1wiMGUzMTgwZGQ0YWU5ZDQzODVhMjFkN2NhOTVjYzcyMjliMGY2YjJjYTllMGY0ODYxZGQ0ZWVkNjg1MDA0ZGY2NlwiXSxcImxlYWhcIjpbXCIyMTY2NDMxMzdmYjVmNmExMjdkYmIxMDYzNzAyY2JiN2MxZjE1MzQ1MWExYWQ0YWZhOWY5MmU3NzQ0N2NjMzMwXCJdLFwid2lsbFwiOltcIjgzMGFkNzczNTEwYWIwZjVhMGQ0NTY0YjdiMzFkMmIwYjFiYTdmZDVhMTE2ZjY2NTk4YTFjNjNjYzIxNDJmZDVcIl0sXCJsaW5kYVwiOltcImUxMDAyZGIwODk0Mjk5YmIzNzIzOGJhYjAyMTcwMTgwYzBhZTU2ZjU5MzIxNjliYjJmY2Y3NTYwNTlmZWExNzVcIl0sXCJoZWVreXVuXCI6W1wiMDkwNGY1OTcyYjJiYzI2M2NhM2M1NmI2YjlmYjg4NDY0YWNiYWM0OTBjMjIxOTdjMDBhNzc4YzliNzBjMjBjZFwiXX0sXCJjb2RlXCI6XCIoY29pbi5jb2luYmFzZSBcXFwiY3JvZXN1c1xcXCIgKHJlYWQta2V5c2V0IFxcXCJjcm9lc3VzXFxcIikgOTAwMDAwMDAwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJhbmFnaGFcXFwiIChyZWFkLWtleXNldCBcXFwiYW5hZ2hhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImFuYXN0YXNpYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJhbmFzdGFzaWFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiYW5kcmV3XFxcIiAocmVhZC1rZXlzZXQgXFxcImFuZHJld1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJiZW5cXFwiIChyZWFkLWtleXNldCBcXFwiYmVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImNvbGluXFxcIiAocmVhZC1rZXlzZXQgXFxcImNvbGluXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImRvdWdcXFwiIChyZWFkLWtleXNldCBcXFwiZG91Z1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbWlseVxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbWlseVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbW1hbnVlbFxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbW1hbnVlbFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJmcmFuY2VzY29cXFwiIChyZWFkLWtleXNldCBcXFwiZnJhbmNlc2NvXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImhlZWt5dW5cXFwiIChyZWFkLWtleXNldCBcXFwiaGVla3l1blxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJqZWZmXFxcIiAocmVhZC1rZXlzZXQgXFxcImplZmZcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibGVhaFxcXCIgKHJlYWQta2V5c2V0IFxcXCJsZWFoXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImxpbmRhXFxcIiAocmVhZC1rZXlzZXQgXFxcImxpbmRhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1hcmtcXFwiIChyZWFkLWtleXNldCBcXFwibWFya1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJtaWd1ZWxcXFwiIChyZWFkLWtleXNldCBcXFwibWlndWVsXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1vbmljYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJtb25pY2FcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic3R1YXJ0XFxcIiAocmVhZC1rZXlzZXQgXFxcInN0dWFydFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ0YXlsb3JcXFwiIChyZWFkLWtleXNldCBcXFwidGF5bG9yXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInRvbnlcXFwiIChyZWFkLWtleXNldCBcXFwidG9ueVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ2aXZcXFwiIChyZWFkLWtleXNldCBcXFwidml2XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIndpbGxcXFwiIChyZWFkLWtleXNldCBcXFwid2lsbFxcXCIpIDUwMC4wKVwifX0sXCJzaWduZXJzXCI6W10sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjAsXCJnYXNMaW1pdFwiOjAsXCJjaGFpbklkXCI6XCJcIixcImdhc1ByaWNlXCI6MCxcInNlbmRlclwiOlwiXCJ9LFwibm9uY2VcIjpcIlxcXCJwcm9kbmV0LWdyYW50c1xcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IkxvYWRlZCBpbnRlcmZhY2UgY29pbi1zaWcifSwicmVxS2V5IjoiN0dFZGdTV3Bid2ZwZk91OUlSYnU5N2RhMEk2Vng2U2VCWENsWGY0TC1MNCIsImxvZ3MiOiJPRHFPT1VNVzZwOTUzVW5kUDlmQzhpS3ZwemszY3d5MEp2elpzVDBnSy1vIiwibWV0YURhdGEiOm51bGwsImNvbnRpbnVhdGlvbiI6bnVsbCwidHhJZCI6MH0
minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
transactionsHash: 8eHQM26lo0sTNk8ec2fmn4GJiLY99lNCF3ZgGDL8Sno
outputsHash: jwXIOVCr-AqjIViFDZwtQKYLF7CRYwi5pfQvAtIylbU
payloadHash: Od83xlP992NsbQQUqHJB9U_2DKrq4dB4vBoMZtdEzUM
coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5PX0NPSU5CQVNFIn0sInJlcUtleSI6IkRsZFJ3Q2JsUTdMb3F5NndZSm5hb2RIbDMwZDNqM2VILXF0RnpmRXY0NmciLCJsb2dzIjpudWxsLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjpudWxsfQ

|]
