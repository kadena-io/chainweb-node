{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.TestnetPayload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - eyJoYXNoIjoiN0dFZGdTV3Bid2ZwZk91OUlSYnU5N2RhMEk2Vng2U2VCWENsWGY0TC1MNCIsInNpZ3MiOltdLCJjbWQiOiJ7XCJwYXlsb2FkXCI6e1wiZXhlY1wiOntcImRhdGFcIjpudWxsLFwiY29kZVwiOlwiKGludGVyZmFjZSBjb2luLXNpZ1xcblxcbiAgXFxcIidjb2luLXNpZycgcmVwcmVzZW50cyB0aGUgS2FkZW5hIENvaW4gQ29udHJhY3QgaW50ZXJmYWNlLiBUaGlzIGNvbnRyYWN0ICAgICBcXFxcXFxuICBcXFxccHJvdmlkZXMgYm90aCB0aGUgdGhlIGdlbmVyYWwgaW50ZXJmYWNlIGZvciBhIEthZGVuYSdzIHRva2VuLCBzdXBwbHlpbmcgYSAgIFxcXFxcXG4gIFxcXFx0cmFuc2ZlciBmdW5jdGlvbiwgY29pbmJhc2UsIGFjY291bnQgY3JlYXRpb24gYW5kIGJhbGFuY2UgcXVlcnkuXFxcIlxcblxcbiAgKGRlZnVuIGNyZWF0ZS1hY2NvdW50OnN0cmluZyAoYWNjb3VudDpzdHJpbmcgZ3VhcmQ6Z3VhcmQpXFxuICAgIEBkb2MgXFxcIkNyZWF0ZSBhbiBhY2NvdW50IGZvciBBQ0NPVU5ULCB3aXRoIEdVQVJEIGNvbnRyb2xsaW5nIGFjY2VzcyB0byB0aGUgIFxcXFxcXG4gICAgXFxcXGFjY291bnQuXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIHRyYW5zZmVyOnN0cmluZyAoc2VuZGVyOnN0cmluZyByZWNlaXZlcjpzdHJpbmcgYW1vdW50OmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIlRyYW5zZmVyIEFNT1VOVCBiZXR3ZWVuIGFjY291bnRzIFNFTkRFUiBhbmQgUkVDRUlWRVIgb24gdGhlIHNhbWUgICAgXFxcXFxcbiAgICBcXFxcY2hhaW4uIFRoaXMgZmFpbHMgaWYgZWl0aGVyIFNFTkRFUiBvciBSRUNFSVZFUiBkb2VzIG5vdCBleGlzdC4gICAgICAgICAgIFxcXFxcXG4gICAgXFxcXENyZWF0ZS1vbi10cmFuc2ZlciBjYW4gYmUgZG9uZSB1c2luZyB0aGUgJ3RyYW5zZmVyLWFuZC1jcmVhdGUnIGZ1bmN0aW9uLlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgICAgICAgICAocHJvcGVydHkgKG5vdCAoPSBzZW5kZXIgcmVjZWl2ZXIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIHRyYW5zZmVyLWFuZC1jcmVhdGU6c3RyaW5nXFxuICAgICggc2VuZGVyOnN0cmluZ1xcbiAgICAgIHJlY2VpdmVyOnN0cmluZ1xcbiAgICAgIHJlY2VpdmVyLWd1YXJkOmd1YXJkXFxuICAgICAgYW1vdW50OmRlY2ltYWwgKVxcblxcbiAgICBAZG9jIFxcXCJUcmFuc2ZlciBBTU9VTlQgYmV0d2VlbiBhY2NvdW50cyBTRU5ERVIgYW5kIFJFQ0VJVkVSIG9uIHRoZSBzYW1lICAgIFxcXFxcXG4gICAgXFxcXGNoYWluLiBUaGlzIGZhaWxzIGlmIFNFTkRFUiBkb2VzIG5vdCBleGlzdC4gSWYgdGhlIFJFQ0VJVkVSIGFjY291bnQgZG9lcyBcXFxcXFxuICAgIFxcXFxub3QgZXhpc3QsIHRoZW4gaXQgaXMgY3JlYXRlZCBhbmQgYXNzb2NpYXRlZCB3aXRoIFJFQ0VJVkVSLUdVQVJELlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgICAgICAgICAocHJvcGVydHkgKG5vdCAoPSBzZW5kZXIgcmVjZWl2ZXIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIGFjY291bnQtYmFsYW5jZTpkZWNpbWFsIChhY2NvdW50OnN0cmluZylcXG4gICAgQGRvYyBcXFwiQ2hlY2sgYW4gYWNjb3VudCdzIGJhbGFuY2VcXFwiXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAobm90ICg9IGFjY291bnQgXFxcIlxcXCIpKSkgXVxcbiAgICApXFxuXFxuICAoZGVmdW4gYWNjb3VudC1pbmZvOm9iamVjdCAoYWNjb3VudDpzdHJpbmcpXFxuICAgIEBkb2MgXFxcIkdldCBhbGwgb2YgYW4gYWNjb3VudCdzIGluZm8uIFRoaXMgaW5jbHVkZXMgdGhlIGJhbGFuY2UgYW5kIHRoZSAgICAgXFxcXFxcbiAgICBcXFxcZ3VhcmQuXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF0pXFxuXFxuICAoZGVmdW4gcm90YXRlLWFjY291bnQtZ3VhcmQ6c3RyaW5nIChhY2NvdW50OnN0cmluZyBuZXctZ3VhcmQ6Z3VhcmQpXFxuICAgIEBkb2MgXFxcIlJvdGF0ZSBndWFyZCBhc3NvY2lhdGVkIHdpdGggQUNDT1VOVCB0byBuZXcgZ3VhcmQgTkVXLUdVQVJEXFxcIlxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKG5vdCAoPSBhY2NvdW50IFxcXCJcXFwiKSkpIF1cXG4gICAgKVxcblxcbiAgKGRlZnVuIGNvaW5iYXNlOnN0cmluZyAoYWRkcmVzczpzdHJpbmcgYWRkcmVzcy1ndWFyZDpndWFyZCBhbW91bnQ6ZGVjaW1hbClcXG4gICAgQGRvYyBcXFwiTWludCBzb21lIG51bWJlciBvZiB0b2tlbnMgYW5kIGFsbG9jYXRlIHRoZW0gdG8gc29tZSBhZGRyZXNzXFxcIlxcblxcbiAgICBAbW9kZWwgWyAocHJvcGVydHkgKD4gYW1vdW50IDAuMCkpXFxuICAgICAgICAgICAgIChwcm9wZXJ0eSAobm90ICg9IGFkZHJlc3MgXFxcIlxcXCIpKSlcXG4gICAgICAgICAgIF1cXG4gICAgKVxcblxcbilcXG5cIn19LFwic2lnbmVyc1wiOltdLFwibWV0YVwiOntcImNyZWF0aW9uVGltZVwiOjAsXCJ0dGxcIjoxNzI4MDAsXCJnYXNMaW1pdFwiOjAsXCJjaGFpbklkXCI6XCJcIixcImdhc1ByaWNlXCI6MCxcInNlbmRlclwiOlwiXCJ9LFwibm9uY2VcIjpcIlxcXCJnZW5lc2lzLTAxXFxcIlwifSJ9
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IkxvYWRlZCBpbnRlcmZhY2UgY29pbi1zaWcifSwicmVxS2V5IjoiN0dFZGdTV3Bid2ZwZk91OUlSYnU5N2RhMEk2Vng2U2VCWENsWGY0TC1MNCIsImxvZ3MiOiJPRHFPT1VNVzZwOTUzVW5kUDlmQzhpS3ZwemszY3d5MEp2elpzVDBnSy1vIiwibWV0YURhdGEiOm51bGwsImNvbnRpbnVhdGlvbiI6bnVsbCwidHhJZCI6MH0
- - eyJoYXNoIjoieUdUakRFcXFQNC0zMEhuY1dYN1U1aFJsaWdDNU1YQm0zN1N5c05FZExmbyIsInNpZ3MiOltdLCJjbWQiOiJ7XCJwYXlsb2FkXCI6e1wiZXhlY1wiOntcImRhdGFcIjpudWxsLFwiY29kZVwiOlwiKG1vZHVsZSBjb2luIEdPVkVSTkFOQ0VcXG5cXG4gIEBkb2MgXFxcIidjb2luJyByZXByZXNlbnRzIHRoZSBLYWRlbmEgQ29pbiBDb250cmFjdC4gVGhpcyBjb250cmFjdCBwcm92aWRlcyBib3RoIHRoZSBcXFxcXFxuICBcXFxcYnV5L3JlZGVlbSBnYXMgc3VwcG9ydCBpbiB0aGUgZm9ybSBvZiAnZnVuZC10eCcsIGFzIHdlbGwgYXMgdHJhbnNmZXIsICAgICAgIFxcXFxcXG4gIFxcXFxjcmVkaXQsIGRlYml0LCBjb2luYmFzZSwgYWNjb3VudCBjcmVhdGlvbiBhbmQgcXVlcnksIGFzIHdlbGwgYXMgU1BWIGJ1cm4gICAgXFxcXFxcbiAgXFxcXGNyZWF0ZS4gVG8gYWNjZXNzIHRoZSBjb2luIGNvbnRyYWN0LCB5b3UgbWF5IHVzZSBpdHMgZnVsbHktcXVhbGlmaWVkIG5hbWUsICBcXFxcXFxuICBcXFxcb3IgaXNzdWUgdGhlICcodXNlIGNvaW4pJyBjb21tYW5kIGluIHRoZSBib2R5IG9mIGEgbW9kdWxlIGRlY2xhcmF0aW9uLlxcXCJcXG5cXG4gIEBtb2RlbCBbXFxuICAgIChkZWZwcm9wZXJ0eSBjb25zZXJ2ZXMtbWFzc1xcbiAgICAgICg9IChjb2x1bW4tZGVsdGEgY29pbi10YWJsZSAnYmFsYW5jZSkgMC4wKSlcXG4gIF1cXG5cXG4gIChpbXBsZW1lbnRzIGNvaW4tc2lnKVxcblxcbiAgOyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbiAgOyBTY2hlbWFzIGFuZCBUYWJsZXNcXG5cXG4gIChkZWZzY2hlbWEgY29pbi1zY2hlbWFcXG4gICAgYmFsYW5jZTpkZWNpbWFsXFxuICAgIGd1YXJkOmd1YXJkKVxcbiAgKGRlZnRhYmxlIGNvaW4tdGFibGU6e2NvaW4tc2NoZW1hfSlcXG5cXG4gIDsgdGhlIHNoYXBlIG9mIGEgY3Jvc3MtY2hhaW4gdHJhbnNmZXIgKHVzZWQgZm9yIHR5cGVjaGVja2luZylcXG4gIChkZWZzY2hlbWEgdHJhbnNmZXItc2NoZW1hXFxuICAgIGNyZWF0ZS1hY2NvdW50OnN0cmluZ1xcbiAgICBjcmVhdGUtYWNjb3VudC1ndWFyZDpndWFyZFxcbiAgICBxdWFudGl0eTpkZWNpbWFsXFxuICAgIClcXG5cXG4gIDsgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cXG4gIDsgQ2FwYWJpbGl0aWVzXFxuXFxuICAoZGVmY2FwIFRSQU5TRkVSICgpXFxuICAgIFxcXCJBdXRvbm9tb3VzIGNhcGFiaWxpdHkgdG8gcHJvdGVjdCBkZWJpdCBhbmQgY3JlZGl0IGFjdGlvbnNcXFwiXFxuICAgIHRydWUpXFxuXFxuICAoZGVmY2FwIENPSU5CQVNFICgpXFxuICAgIFxcXCJNYWdpYyBjYXBhYmlsaXR5IHRvIHByb3RlY3QgbWluZXIgcmV3YXJkXFxcIlxcbiAgICB0cnVlKVxcblxcbiAgKGRlZmNhcCBGVU5EX1RYICgpXFxuICAgIFxcXCJNYWdpYyBjYXBhYmlsaXR5IHRvIGV4ZWN1dGUgZ2FzIHB1cmNoYXNlcyBhbmQgcmVkZW1wdGlvbnNcXFwiXFxuICAgIHRydWUpXFxuXFxuICAoZGVmY2FwIEFDQ09VTlRfR1VBUkQgKGFjY291bnQpXFxuICAgIFxcXCJMb29rdXAgYW5kIGVuZm9yY2UgZ3VhcmRzIGFzc29jaWF0ZWQgd2l0aCBhbiBhY2NvdW50XFxcIlxcbiAgICAod2l0aC1yZWFkIGNvaW4tdGFibGUgYWNjb3VudCB7IFxcXCJndWFyZFxcXCIgOj0gZyB9XFxuICAgICAgKGVuZm9yY2UtZ3VhcmQgZykpKVxcblxcbiAgKGRlZmNhcCBHT1ZFUk5BTkNFICgpXFxuICAgIChlbmZvcmNlIGZhbHNlIFxcXCJFbmZvcmNlIG5vbi11cGdyYWRlYWJpbGl0eSBleGNlcHQgaW4gdGhlIGNhc2Ugb2YgYSBoYXJkIGZvcmtcXFwiKSlcXG5cXG4gIChkZWZjb25zdCBNSU5JTVVNX1BSRUNJU0lPTiAxMlxcbiAgICBcXFwiTWluaW11bSBhbGxvd2VkIHByZWNpc2lvbiBmb3IgY29pbiB0cmFuc2FjdGlvbnNcXFwiKVxcblxcbiAgKGRlZnVuIGVuZm9yY2UtdW5pdCAoYW1vdW50OmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIkVuZm9yY2UgbWluaW11bSBwcmVjaXNpb24gYWxsb3dlZCBmb3IgY29pbiB0cmFuc2FjdGlvbnNcXFwiXFxuICAgIChlbmZvcmNlXFxuICAgICAgKD0gKGZsb29yIGFtb3VudCBNSU5JTVVNX1BSRUNJU0lPTilcXG4gICAgICAgICBhbW91bnQpXFxuICAgICAgKGZvcm1hdCBcXFwiQW1vdW50IHZpb2xhdGVzIG1pbmltdW0gcHJlY2lzaW9uOiB7fVxcXCIgW2Ftb3VudF0pKVxcbiAgKVxcblxcbiAgOyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxcbiAgOyBDb2luIENvbnRyYWN0XFxuXFxuICAoZGVmdW4gYnV5LWdhczpzdHJpbmcgKHNlbmRlcjpzdHJpbmcgdG90YWw6ZGVjaW1hbClcXG4gICAgQGRvYyBcXFwiVGhpcyBmdW5jdGlvbiBkZXNjcmliZXMgdGhlIG1haW4gJ2dhcyBidXknIG9wZXJhdGlvbi4gQXQgdGhpcyBwb2ludCBcXFxcXFxuICAgIFxcXFxNSU5FUiBoYXMgYmVlbiBjaG9zZW4gZnJvbSB0aGUgcG9vbCwgYW5kIHdpbGwgYmUgdmFsaWRhdGVkLiBUaGUgU0VOREVSICAgXFxcXFxcbiAgICBcXFxcb2YgdGhpcyB0cmFuc2FjdGlvbiBoYXMgc3BlY2lmaWVkIGEgZ2FzIGxpbWl0IExJTUlUIChtYXhpbXVtIGdhcykgZm9yICAgIFxcXFxcXG4gICAgXFxcXHRoZSB0cmFuc2FjdGlvbiwgYW5kIHRoZSBwcmljZSBpcyB0aGUgc3BvdCBwcmljZSBvZiBnYXMgYXQgdGhhdCB0aW1lLiAgICBcXFxcXFxuICAgIFxcXFxUaGUgZ2FzIGJ1eSB3aWxsIGJlIGV4ZWN1dGVkIHByaW9yIHRvIGV4ZWN1dGluZyBTRU5ERVIncyBjb2RlLlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IHRvdGFsIDAuMCkpXFxuICAgICAgICAgICAgIChwcm9wZXJ0eSAobm90ICg9IHNlbmRlciBcXFwiXFxcIikpKSBdXFxuXFxuICAgIChlbmZvcmNlIChub3QgKD0gc2VuZGVyIFxcXCJcXFwiKSlcXG4gICAgICBcXFwic2VuZGVyIG5hbWUgbXVzdCBiZSBub24tZW1wdHlcXFwiKVxcblxcbiAgICAoZW5mb3JjZS11bml0IHRvdGFsKVxcblxcbiAgICAoZW5mb3JjZSAoPiB0b3RhbCAwLjApXFxuICAgICAgXFxcImdhcyBzdXBwbHkgbXVzdCBiZSBhIHBvc2l0aXZlIHF1YW50aXR5XFxcIilcXG5cXG4gICAgKHJlcXVpcmUtY2FwYWJpbGl0eSAoRlVORF9UWCkpXFxuICAgICh3aXRoLWNhcGFiaWxpdHkgKFRSQU5TRkVSKVxcbiAgICAgIChkZWJpdCBzZW5kZXIgdG90YWwpKVxcbiAgICApXFxuXFxuICAoZGVmdW4gcmVkZWVtLWdhczpzdHJpbmcgKG1pbmVyOnN0cmluZyBtaW5lci1ndWFyZDpndWFyZCBzZW5kZXI6c3RyaW5nIHRvdGFsOmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIlRoaXMgZnVuY3Rpb24gZGVzY3JpYmVzIHRoZSBtYWluICdyZWRlZW0gZ2FzJyBvcGVyYXRpb24uIEF0IHRoaXMgICAgXFxcXFxcbiAgICBcXFxccG9pbnQsIHRoZSBTRU5ERVIncyB0cmFuc2FjdGlvbiBoYXMgYmVlbiBleGVjdXRlZCwgYW5kIHRoZSBnYXMgdGhhdCAgICAgIFxcXFxcXG4gICAgXFxcXHdhcyBjaGFyZ2VkIGhhcyBiZWVuIGNhbGN1bGF0ZWQuIE1JTkVSIHdpbGwgYmUgY3JlZGl0ZWQgdGhlIGdhcyBjb3N0LCAgICBcXFxcXFxuICAgIFxcXFxhbmQgU0VOREVSIHdpbGwgcmVjZWl2ZSB0aGUgcmVtYWluZGVyIHVwIHRvIHRoZSBsaW1pdFxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5ICg-IHRvdGFsIDAuMCkpXFxuICAgICAgICAgICAgIChwcm9wZXJ0eSAobm90ICg9IHNlbmRlciBcXFwiXFxcIikpKSBdXFxuXFxuICAgIChlbmZvcmNlIChub3QgKD0gc2VuZGVyIFxcXCJcXFwiKSlcXG4gICAgICBcXFwic2VuZGVyIG5hbWUgbXVzdCBiZSBub24tZW1wdHlcXFwiKVxcblxcbiAgICAoZW5mb3JjZS11bml0IHRvdGFsKVxcblxcbiAgICAocmVxdWlyZS1jYXBhYmlsaXR5IChGVU5EX1RYKSlcXG4gICAgKHdpdGgtY2FwYWJpbGl0eSAoVFJBTlNGRVIpXFxuICAgICAgKGxldCogKChmZWUgKHJlYWQtZGVjaW1hbCBcXFwiZmVlXFxcIikpXFxuICAgICAgICAgICAgIChyZWZ1bmQgKC0gdG90YWwgZmVlKSkpXFxuXFxuICAgICAgICAoZW5mb3JjZS11bml0IGZlZSlcXG5cXG4gICAgICAgIChlbmZvcmNlICg-PSBmZWUgMC4wKVxcbiAgICAgICAgICBcXFwiZmVlIG11c3QgYmUgYSBub24tbmVnYXRpdmUgcXVhbnRpdHlcXFwiKVxcblxcbiAgICAgICAgKGVuZm9yY2UgKD49IHJlZnVuZCAwLjApXFxuICAgICAgICAgIFxcXCJyZWZ1bmQgbXVzdCBiZSBhIG5vbi1uZWdhdGl2ZSBxdWFudGl0eVxcXCIpXFxuXFxuICAgICAgICA7IGRpcmVjdGx5IHVwZGF0ZSBpbnN0ZWFkIG9mIGNyZWRpdFxcbiAgICAgICAgKGlmICg-IHJlZnVuZCAwLjApXFxuICAgICAgICAgICh3aXRoLXJlYWQgY29pbi10YWJsZSBzZW5kZXJcXG4gICAgICAgICAgICB7IFxcXCJiYWxhbmNlXFxcIiA6PSBiYWxhbmNlIH1cXG4gICAgICAgICAgICAodXBkYXRlIGNvaW4tdGFibGUgc2VuZGVyXFxuICAgICAgICAgICAgICB7IFxcXCJiYWxhbmNlXFxcIjogKCsgYmFsYW5jZSByZWZ1bmQpIH0pXFxuICAgICAgICAgICAgKVxcbiAgICAgICAgICBcXFwibm9vcFxcXCIpXFxuXFxuICAgICAgICAoaWYgKD4gZmVlIDAuMClcXG4gICAgICAgICAgKGNyZWRpdCBtaW5lciBtaW5lci1ndWFyZCBmZWUpXFxuICAgICAgICAgIFxcXCJub29wXFxcIilcXG4gICAgICAgICkpXFxuICAgIClcXG5cXG4gIChkZWZ1biBjcmVhdGUtYWNjb3VudDpzdHJpbmcgKGFjY291bnQ6c3RyaW5nIGd1YXJkOmd1YXJkKVxcbiAgICBAZG9jIFxcXCJDcmVhdGUgYW4gYWNjb3VudCBmb3IgQUNDT1VOVCwgd2l0aCBHVUFSRCBjb250cm9sbGluZyBhY2Nlc3MgdG8gdGhlICBcXFxcXFxuICAgIFxcXFxhY2NvdW50LlxcXCJcXG5cXG4gICAgQG1vZGVsIFsgKHByb3BlcnR5IChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpKSBdXFxuXFxuICAgIChlbmZvcmNlIChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpXFxuICAgICAgXFxcImFjY291bnQgbmFtZSBtdXN0IGJlIG5vbi1lbXB0eVxcXCIpXFxuXFxuICAgIChpbnNlcnQgY29pbi10YWJsZSBhY2NvdW50XFxuICAgICAgeyBcXFwiYmFsYW5jZVxcXCIgOiAwLjBcXG4gICAgICAsIFxcXCJndWFyZFxcXCIgICA6IGd1YXJkXFxuICAgICAgfSlcXG4gICAgKVxcblxcbiAgKGRlZnVuIGFjY291bnQtYmFsYW5jZTpkZWNpbWFsIChhY2NvdW50OnN0cmluZylcXG4gICAgQGRvYyBcXFwiQ2hlY2sgYW4gYWNjb3VudCdzIGJhbGFuY2UuXFxcIlxcbiAgICAod2l0aC1yZWFkIGNvaW4tdGFibGUgYWNjb3VudFxcbiAgICAgIHsgXFxcImJhbGFuY2VcXFwiIDo9IGJhbGFuY2UgfVxcbiAgICAgIGJhbGFuY2VcXG4gICAgICApXFxuICAgIClcXG5cXG4gIChkZWZ1biBhY2NvdW50LWluZm86b2JqZWN0IChhY2NvdW50OnN0cmluZylcXG4gICAgQGRvYyBcXFwiR2V0IGFsbCBvZiBhbiBhY2NvdW50J3MgaW5mby4gIFRoaXMgaW5jbHVkZXMgdGhlIGJhbGFuY2UgYW5kIHRoZSAgICBcXFxcXFxuICAgIFxcXFxndWFyZC5cXFwiXFxuICAgIChyZWFkIGNvaW4tdGFibGUgYWNjb3VudClcXG4gICAgKVxcblxcbiAgKGRlZnVuIHJvdGF0ZS1hY2NvdW50LWd1YXJkOnN0cmluZyAoYWNjb3VudDpzdHJpbmcgbmV3LWd1YXJkOmd1YXJkKVxcbiAgICBAZG9jIFxcXCJSb3RhdGUgZ3VhcmQgYXNzb2NpYXRlZCB3aXRoIEFDQ09VTlRcXFwiXFxuXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAobm90ICg9IGFjY291bnQgXFxcIlxcXCIpKSkgXVxcblxcbiAgICAoZW5mb3JjZSAobm90ICg9IGFjY291bnQgXFxcIlxcXCIpKVxcbiAgICAgIFxcXCJhY2NvdW50IG5hbWUgbXVzdCBiZSBub24tZW1wdHlcXFwiKVxcblxcbiAgICAod2l0aC1yZWFkIGNvaW4tdGFibGUgYWNjb3VudFxcbiAgICAgIHsgXFxcImd1YXJkXFxcIiA6PSBvbGQtZ3VhcmQgfVxcblxcbiAgICAgIChlbmZvcmNlLWd1YXJkIG9sZC1ndWFyZClcXG5cXG4gICAgICAodXBkYXRlIGNvaW4tdGFibGUgYWNjb3VudFxcbiAgICAgICAgeyBcXFwiZ3VhcmRcXFwiIDogbmV3LWd1YXJkIH1cXG4gICAgICAgICkpKVxcblxcblxcbiAgKGRlZnVuIHRyYW5zZmVyOnN0cmluZyAoc2VuZGVyOnN0cmluZyByZWNlaXZlcjpzdHJpbmcgYW1vdW50OmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIlRyYW5zZmVyIEFNT1VOVCBiZXR3ZWVuIGFjY291bnRzIFNFTkRFUiBhbmQgUkVDRUlWRVIgb24gdGhlIHNhbWUgICAgXFxcXFxcbiAgICBcXFxcY2hhaW4uIFRoaXMgZmFpbHMgaWYgZWl0aGVyIFNFTkRFUiBvciBSRUNFSVZFUiBkb2VzIG5vdCBleGlzdC4gICAgICAgICAgIFxcXFxcXG4gICAgXFxcXENyZWF0ZS1vbi10cmFuc2ZlciBjYW4gYmUgZG9uZSB1c2luZyB0aGUgJ3RyYW5zZmVyLWFuZC1jcmVhdGUnIGZ1bmN0aW9uLlxcXCJcXG5cXG4gICAgQG1vZGVsIFtcXG4gICAgICAocHJvcGVydHkgY29uc2VydmVzLW1hc3MpXFxuICAgICAgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgIChwcm9wZXJ0eSAobm90ICg9IHNlbmRlciBcXFwiXFxcIikpKVxcbiAgICAgIChwcm9wZXJ0eSAobm90ICg9IHJlY2VpdmVyIFxcXCJcXFwiKSkpXFxuICAgIF1cXG5cXG4gICAgKGVuZm9yY2UgKG5vdCAoPSBzZW5kZXIgcmVjZWl2ZXIpKVxcbiAgICAgIFxcXCJzZW5kZXIgY2Fubm90IGJlIHRoZSByZWNlaXZlciBvZiBhIHRyYW5zZmVyXFxcIilcXG5cXG4gICAgKGVuZm9yY2UgKCE9IFxcXCJcXFwiIHNlbmRlcikgXFxcImVtcHR5IHNlbmRlclxcXCIpXFxuICAgIChlbmZvcmNlICghPSBcXFwiXFxcIiByZWNlaXZlcikgXFxcImVtcHR5IHNlbmRlclxcXCIpXFxuXFxuICAgIChlbmZvcmNlICg-IGFtb3VudCAwLjApXFxuICAgICAgXFxcInRyYW5zZmVyIGFtb3VudCBtdXN0IGJlIHBvc2l0aXZlXFxcIilcXG5cXG4gICAgKGVuZm9yY2UtdW5pdCBhbW91bnQpXFxuXFxuICAgICh3aXRoLWNhcGFiaWxpdHkgKFRSQU5TRkVSKVxcbiAgICAgIChkZWJpdCBzZW5kZXIgYW1vdW50KVxcbiAgICAgICh3aXRoLXJlYWQgY29pbi10YWJsZSByZWNlaXZlclxcbiAgICAgICAgeyBcXFwiZ3VhcmRcXFwiIDo9IGcgfVxcblxcbiAgICAgICAgKGNyZWRpdCByZWNlaXZlciBnIGFtb3VudCkpXFxuICAgICAgKVxcbiAgICApXFxuXFxuICAoZGVmdW4gdHJhbnNmZXItYW5kLWNyZWF0ZTpzdHJpbmdcXG4gICAgKCBzZW5kZXI6c3RyaW5nXFxuICAgICAgcmVjZWl2ZXI6c3RyaW5nXFxuICAgICAgcmVjZWl2ZXItZ3VhcmQ6Z3VhcmRcXG4gICAgICBhbW91bnQ6ZGVjaW1hbCApXFxuXFxuICAgIEBkb2MgXFxcIlRyYW5zZmVyIGJldHdlZW4gYWNjb3VudHMgU0VOREVSIGFuZCBSRUNFSVZFUiBvbiB0aGUgc2FtZSBjaGFpbi4gICAgXFxcXFxcbiAgICBcXFxcVGhpcyBmYWlscyBpZiB0aGUgU0VOREVSIGFjY291bnQgZG9lcyBub3QgZXhpc3QuIElmIHRoZSBSRUNFSVZFUiBhY2NvdW50IFxcXFxcXG4gICAgXFxcXGRvZXMgbm90IGV4aXN0LCBpdCBpcyBjcmVhdGVkIGFuZCBhc3NvY2lhdGVkIHdpdGggR1VBUkQuXFxcIlxcblxcbiAgICBAbW9kZWwgW1xcbiAgICAgIDsocHJvcGVydHkgY29uc2VydmVzLW1hc3MpIDs7IGZhaWxzIG9uIG1pc3Npbmcgcm93LCBGViBwcm9ibGVtXFxuICAgICAgKHByb3BlcnR5ICg-IGFtb3VudCAwLjApKVxcbiAgICAgIChwcm9wZXJ0eSAobm90ICg9IHNlbmRlciBcXFwiXFxcIikpKVxcbiAgICAgIChwcm9wZXJ0eSAobm90ICg9IHJlY2VpdmVyIFxcXCJcXFwiKSkpXFxuICAgIF1cXG5cXG4gICAgKGVuZm9yY2UgKCE9IHNlbmRlciByZWNlaXZlcilcXG4gICAgICBcXFwic2VuZGVyIGNhbm5vdCBiZSB0aGUgcmVjZWl2ZXIgb2YgYSB0cmFuc2ZlclxcXCIpXFxuXFxuICAgIChlbmZvcmNlICghPSBcXFwiXFxcIiBzZW5kZXIpIFxcXCJlbXB0eSBzZW5kZXJcXFwiKVxcbiAgICAoZW5mb3JjZSAoIT0gXFxcIlxcXCIgcmVjZWl2ZXIpIFxcXCJlbXB0eSBzZW5kZXJcXFwiKVxcblxcbiAgICAoZW5mb3JjZSAoPiBhbW91bnQgMC4wKVxcbiAgICAgIFxcXCJ0cmFuc2ZlciBhbW91bnQgbXVzdCBiZSBwb3NpdGl2ZVxcXCIpXFxuXFxuICAgIChlbmZvcmNlLXVuaXQgYW1vdW50KVxcblxcbiAgICAod2l0aC1jYXBhYmlsaXR5IChUUkFOU0ZFUilcXG4gICAgICAoZGViaXQgc2VuZGVyIGFtb3VudClcXG4gICAgICAoY3JlZGl0IHJlY2VpdmVyIHJlY2VpdmVyLWd1YXJkIGFtb3VudCkpXFxuICAgIClcXG5cXG4gIChkZWZ1biBjb2luYmFzZTpzdHJpbmcgKGFkZHJlc3M6c3RyaW5nIGFkZHJlc3MtZ3VhcmQ6Z3VhcmQgYW1vdW50OmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIkludGVybmFsIGZ1bmN0aW9uIGZvciB0aGUgaW5pdGlhbCBjcmVhdGlvbiBvZiBjb2lucy4gIFRoaXMgZnVuY3Rpb24gXFxcXFxcbiAgICBcXFxcY2Fubm90IGJlIHVzZWQgb3V0c2lkZSBvZiB0aGUgY29pbiBjb250cmFjdC5cXFwiXFxuICAgIChyZXF1aXJlLWNhcGFiaWxpdHkgKENPSU5CQVNFKSlcXG4gICAgKGVuZm9yY2UtdW5pdCBhbW91bnQpXFxuICAgICh3aXRoLWNhcGFiaWxpdHkgKFRSQU5TRkVSKVxcbiAgICAgIChjcmVkaXQgYWRkcmVzcyBhZGRyZXNzLWd1YXJkIGFtb3VudCkpXFxuICAgIClcXG5cXG4gIChkZWZwYWN0IGZ1bmQtdHggKHNlbmRlcjpzdHJpbmcgbWluZXI6c3RyaW5nIG1pbmVyLWd1YXJkOmd1YXJkIHRvdGFsOmRlY2ltYWwpXFxuICAgIEBkb2MgXFxcIidmdW5kLXR4JyBpcyBhIHNwZWNpYWwgcGFjdCB0byBmdW5kIGEgdHJhbnNhY3Rpb24gaW4gdHdvIHN0ZXBzLCAgICAgXFxcXFxcbiAgICBcXFxcd2l0aCB0aGUgYWN0dWFsIHRyYW5zYWN0aW9uIHRyYW5zcGlyaW5nIGluIHRoZSBtaWRkbGU6ICAgICAgICAgICAgICAgICAgIFxcXFxcXG4gICAgXFxcXCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxuICAgIFxcXFwgIDEpIEEgYnV5aW5nIHBoYXNlLCBkZWJpdGluZyB0aGUgc2VuZGVyIGZvciB0b3RhbCBnYXMgYW5kIGZlZSwgeWllbGRpbmcgXFxcXFxcbiAgICBcXFxcICAgICBUWF9NQVhfQ0hBUkdFLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXG4gICAgXFxcXCAgMikgQSBzZXR0bGVtZW50IHBoYXNlLCByZXN1bWluZyBUWF9NQVhfQ0hBUkdFLCBhbmQgYWxsb2NhdGluZyB0byB0aGUgICBcXFxcXFxuICAgIFxcXFwgICAgIGNvaW5iYXNlIGFjY291bnQgZm9yIHVzZWQgZ2FzIGFuZCBmZWUsIGFuZCBzZW5kZXIgYWNjb3VudCBmb3IgYmFsLSAgXFxcXFxcbiAgICBcXFxcICAgICBhbmNlICh1bnVzZWQgZ2FzLCBpZiBhbnkpLlxcXCJcXG4gICAgQG1vZGVsIFtcXG4gICAgICAocHJvcGVydHkgKD4gdG90YWwgMC4wKSlcXG4gICAgICA7KHByb3BlcnR5IGNvbnNlcnZlcy1tYXNzKSBub3Qgc3VwcG9ydGVkIHlldFxcbiAgICBdXFxuXFxuICAgIChzdGVwIChidXktZ2FzIHNlbmRlciB0b3RhbCkpXFxuICAgIChzdGVwIChyZWRlZW0tZ2FzIG1pbmVyIG1pbmVyLWd1YXJkIHNlbmRlciB0b3RhbCkpXFxuICAgIClcXG5cXG4gIChkZWZ1biBkZWJpdDpzdHJpbmcgKGFjY291bnQ6c3RyaW5nIGFtb3VudDpkZWNpbWFsKVxcbiAgICBAZG9jIFxcXCJEZWJpdCBBTU9VTlQgZnJvbSBBQ0NPVU5UIGJhbGFuY2VcXFwiXFxuXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAoPiBhbW91bnQgMC4wKSlcXG4gICAgICAgICAgICAgKHByb3BlcnR5IChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpKSBdXFxuXFxuICAgIChlbmZvcmNlIChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpXFxuICAgICAgXFxcImFjY291bnQgbmFtZSBtdXN0IGJlIG5vbi1lbXB0eVxcXCIpXFxuXFxuICAgIChlbmZvcmNlICg-IGFtb3VudCAwLjApXFxuICAgICAgXFxcImRlYml0IGFtb3VudCBtdXN0IGJlIHBvc2l0aXZlXFxcIilcXG5cXG4gICAgKHJlcXVpcmUtY2FwYWJpbGl0eSAoVFJBTlNGRVIpKVxcbiAgICAod2l0aC1jYXBhYmlsaXR5IChBQ0NPVU5UX0dVQVJEIGFjY291bnQpXFxuICAgICAgKHdpdGgtcmVhZCBjb2luLXRhYmxlIGFjY291bnRcXG4gICAgICAgIHsgXFxcImJhbGFuY2VcXFwiIDo9IGJhbGFuY2UgfVxcblxcbiAgICAgICAgKGVuZm9yY2UgKDw9IGFtb3VudCBiYWxhbmNlKSBcXFwiSW5zdWZmaWNpZW50IGZ1bmRzXFxcIilcXG4gICAgICAgICh1cGRhdGUgY29pbi10YWJsZSBhY2NvdW50XFxuICAgICAgICAgIHsgXFxcImJhbGFuY2VcXFwiIDogKC0gYmFsYW5jZSBhbW91bnQpIH1cXG4gICAgICAgICAgKSkpXFxuICAgIClcXG5cXG5cXG4gIChkZWZ1biBjcmVkaXQ6c3RyaW5nIChhY2NvdW50OnN0cmluZyBndWFyZDpndWFyZCBhbW91bnQ6ZGVjaW1hbClcXG4gICAgQGRvYyBcXFwiQ3JlZGl0IEFNT1VOVCB0byBBQ0NPVU5UIGJhbGFuY2VcXFwiXFxuXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAoPiBhbW91bnQgMC4wKSlcXG4gICAgICAgICAgICAgKHByb3BlcnR5IChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpKSBdXFxuXFxuICAgIChlbmZvcmNlIChub3QgKD0gYWNjb3VudCBcXFwiXFxcIikpXFxuICAgICAgXFxcImFjY291bnQgbmFtZSBtdXN0IGJlIG5vbi1lbXB0eVxcXCIpXFxuXFxuICAgIChlbmZvcmNlICg-IGFtb3VudCAwLjApXFxuICAgICAgXFxcImNyZWRpdCBhbW91bnQgbXVzdCBiZSBwb3NpdGl2ZVxcXCIpXFxuXFxuICAgIChyZXF1aXJlLWNhcGFiaWxpdHkgKFRSQU5TRkVSKSlcXG4gICAgKHdpdGgtZGVmYXVsdC1yZWFkIGNvaW4tdGFibGUgYWNjb3VudFxcbiAgICAgIHsgXFxcImJhbGFuY2VcXFwiIDogMC4wLCBcXFwiZ3VhcmRcXFwiIDogZ3VhcmQgfVxcbiAgICAgIHsgXFxcImJhbGFuY2VcXFwiIDo9IGJhbGFuY2UsIFxcXCJndWFyZFxcXCIgOj0gcmV0ZyB9XFxuICAgICAgOyB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBhbiBleGlzdGluZyBndWFyZCB3aXRoIHRoZSB1c2VyLXN1cHBsaWVkIG9uZVxcbiAgICAgIChlbmZvcmNlICg9IHJldGcgZ3VhcmQpXFxuICAgICAgICBcXFwiYWNjb3VudCBndWFyZHMgZG8gbm90IG1hdGNoXFxcIilcXG5cXG4gICAgICAod3JpdGUgY29pbi10YWJsZSBhY2NvdW50XFxuICAgICAgICB7IFxcXCJiYWxhbmNlXFxcIiA6ICgrIGJhbGFuY2UgYW1vdW50KVxcbiAgICAgICAgLCBcXFwiZ3VhcmRcXFwiICAgOiByZXRnXFxuICAgICAgICB9KVxcbiAgICAgICkpXFxuXFxuICAoZGVmcGFjdCBjcm9zcy1jaGFpbi10cmFuc2ZlclxcbiAgICAoIGRlbGV0ZS1hY2NvdW50OnN0cmluZ1xcbiAgICAgIGNyZWF0ZS1jaGFpbi1pZDpzdHJpbmdcXG4gICAgICBjcmVhdGUtYWNjb3VudDpzdHJpbmdcXG4gICAgICBjcmVhdGUtYWNjb3VudC1ndWFyZDpndWFyZFxcbiAgICAgIHF1YW50aXR5OmRlY2ltYWwgKVxcblxcbiAgICBAZG9jIFxcXCJUcmFuc2ZlciBRVUFOVElUWSBjb2lucyBmcm9tIERFTEVURS1BQ0NPVU5UIG9uIGN1cnJlbnQgY2hhaW4gdG8gICAgICAgICAgIFxcXFxcXG4gICAgICAgICBcXFxcQ1JFQVRFLUFDQ09VTlQgb24gQ1JFQVRFLUNIQUlOLUlELiBUYXJnZXQgY2hhaW4gaWQgbXVzdCBub3QgYmUgdGhlICAgICAgICBcXFxcXFxuICAgICAgICAgXFxcXGN1cnJlbnQgY2hhaW4taWQuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcbiAgICAgICAgIFxcXFwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXG4gICAgICAgICBcXFxcU3RlcCAxOiBCdXJuIFFVQU5USVRZLW1hbnkgY29pbnMgZm9yIERFTEVURS1BQ0NPVU5UIG9uIHRoZSBjdXJyZW50IGNoYWluLCBcXFxcXFxuICAgICAgICAgXFxcXGFuZCBwcm9kdWNlIGFuIFNQViByZWNlaXB0IHdoaWNoIG1heSBiZSBtYW51YWxseSByZWRlZW1lZCBmb3IgYW4gU1BWICAgICAgXFxcXFxcbiAgICAgICAgIFxcXFxwcm9vZi4gT25jZSBhIHByb29mIGlzIG9idGFpbmVkLCB0aGUgdXNlciBtYXkgY2FsbCAnY3JlYXRlLWNvaW4nIGFuZCAgICAgIFxcXFxcXG4gICAgICAgICBcXFxcY29uc3VtZSB0aGUgcHJvb2Ygb24gQ1JFQVRFLUNIQUlOLUlELCBjcmVkaXRpbmcgQ1JFQVRFLUFDQ09VTlQgUVVBTlRJVFktICBcXFxcXFxuICAgICAgICAgXFxcXG1hbnkgY29pbnMuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcbiAgICAgICAgIFxcXFwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXG4gICAgICAgICBcXFxcU3RlcCAyOiBDb25zdW1lIGFuIFNQViBwcm9vZiBmb3IgYSBudW1iZXIgb2YgY29pbnMsIGFuZCBjcmVkaXQgdGhlICAgICAgICBcXFxcXFxuICAgICAgICAgXFxcXGFjY291bnQgYXNzb2NpYXRlZCB3aXRoIHRoZSBwcm9vZiB0aGUgcXVhbnRpZnkgb2YgY29pbnMgYnVybmVkIG9uIHRoZSAgICAgXFxcXFxcbiAgICAgICAgIFxcXFxzb3VyY2UgY2hhaW4gYnkgdGhlIGJ1cm4gYWNjb3VudC4gTm90ZTogbXVzdCBiZSBjYWxsZWQgb24gdGhlIGNvcnJlY3QgICAgIFxcXFxcXG4gICAgICAgICBcXFxcY2hhaW4gaWQgYXMgc3BlY2lmaWVkIGluIHRoZSBwcm9vZi5cXFwiXFxuXFxuICAgIEBtb2RlbCBbIChwcm9wZXJ0eSAoPiBxdWFudGl0eSAwLjApKVxcbiAgICAgICAgICAgICAocHJvcGVydHkgKG5vdCAoPSBjcmVhdGUtY2hhaW4taWQgXFxcIlxcXCIpKSlcXG4gICAgICAgICAgICAgKHByb3BlcnR5IChub3QgKD0gZGVsZXRlLWFjY291bnQgXFxcIlxcXCIpKSlcXG4gICAgICAgICAgICAgKHByb3BlcnR5IChub3QgKD0gY3JlYXRlLWFjY291bnQgXFxcIlxcXCIpKSkgXVxcblxcbiAgICAoc3RlcFxcbiAgICAgICh3aXRoLWNhcGFiaWxpdHkgKFRSQU5TRkVSKVxcblxcbiAgICAgICAgKGVuZm9yY2UgKG5vdCAoPSBkZWxldGUtYWNjb3VudCBcXFwiXFxcIikpXFxuICAgICAgICAgIFxcXCJkZWxldGUtYWNjb3VudCBuYW1lIG11c3QgYmUgbm9uLWVtcHR5XFxcIilcXG4gICAgICAgIChlbmZvcmNlIChub3QgKD0gY3JlYXRlLWFjY291bnQgXFxcIlxcXCIpKVxcbiAgICAgICAgICBcXFwiY3JlYXRlLWFjY291bnQgbmFtZSBtdXN0IGJlIG5vbi1lbXB0eVxcXCIpXFxuXFxuICAgICAgICAoZW5mb3JjZSAoIT0gXFxcIlxcXCIgY3JlYXRlLWNoYWluLWlkKSBcXFwiZW1wdHkgY3JlYXRlLWNoYWluLWlkXFxcIilcXG4gICAgICAgIChlbmZvcmNlIChub3QgKD0gKGF0ICdjaGFpbi1pZCAoY2hhaW4tZGF0YSkpIGNyZWF0ZS1jaGFpbi1pZCkpXFxuICAgICAgICAgIFxcXCJjYW5ub3QgcnVuIGNyb3NzLWNoYWluIHRyYW5zZmVycyB0byB0aGUgc2FtZSBjaGFpblxcXCIpXFxuXFxuICAgICAgICAoZW5mb3JjZSAoPiBxdWFudGl0eSAwLjApXFxuICAgICAgICAgIFxcXCJ0cmFuc2ZlciBxdWFudGl0eSBtdXN0IGJlIHBvc2l0aXZlXFxcIilcXG5cXG4gICAgICAgIChlbmZvcmNlLXVuaXQgcXVhbnRpdHkpXFxuXFxuICAgICAgICAoZGViaXQgZGVsZXRlLWFjY291bnQgcXVhbnRpdHkpXFxuICAgICAgICAobGV0XFxuICAgICAgICAgICgocmV0djpvYmplY3R7dHJhbnNmZXItc2NoZW1hfVxcbiAgICAgICAgICAgIHsgXFxcImNyZWF0ZS1hY2NvdW50XFxcIjogY3JlYXRlLWFjY291bnRcXG4gICAgICAgICAgICAsIFxcXCJjcmVhdGUtYWNjb3VudC1ndWFyZFxcXCI6IGNyZWF0ZS1hY2NvdW50LWd1YXJkXFxuICAgICAgICAgICAgLCBcXFwicXVhbnRpdHlcXFwiOiBxdWFudGl0eVxcbiAgICAgICAgICAgIH0pKVxcbiAgICAgICAgICAoeWllbGQgcmV0diBjcmVhdGUtY2hhaW4taWQpXFxuICAgICAgICAgICkpKVxcblxcbiAgICAoc3RlcFxcbiAgICAgIChyZXN1bWVcXG4gICAgICAgIHsgXFxcImNyZWF0ZS1hY2NvdW50XFxcIiA6PSBjcmVhdGUtYWNjb3VudFxcbiAgICAgICAgLCBcXFwiY3JlYXRlLWFjY291bnQtZ3VhcmRcXFwiIDo9IGNyZWF0ZS1hY2NvdW50LWd1YXJkXFxuICAgICAgICAsIFxcXCJxdWFudGl0eVxcXCIgOj0gcXVhbnRpdHlcXG4gICAgICAgIH1cXG5cXG4gICAgICAgICh3aXRoLWNhcGFiaWxpdHkgKFRSQU5TRkVSKVxcbiAgICAgICAgICAoY3JlZGl0IGNyZWF0ZS1hY2NvdW50IGNyZWF0ZS1hY2NvdW50LWd1YXJkIHF1YW50aXR5KSlcXG4gICAgICAgICkpXFxuICAgIClcXG4pXFxuXFxuKGNyZWF0ZS10YWJsZSBjb2luLXRhYmxlKVxcblwifX0sXCJzaWduZXJzXCI6W10sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcImdlbmVzaXMtMDFcXFwiXCJ9In0
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IlRhYmxlQ3JlYXRlZCJ9LCJyZXFLZXkiOiJ5R1RqREVxcVA0LTMwSG5jV1g3VTVoUmxpZ0M1TVhCbTM3U3lzTkVkTGZvIiwibG9ncyI6IjdzbHhOb3NpMENLRTYzcnItVmdadzYySkR0UVpsWkNhaHlCQWlfdExRaFkiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoxfQ
- - eyJoYXNoIjoiRW5TZGJjamxYXzNqcHdIMDVUWnRQMUd4NkxBdmJZMDdZMHNzbDFDMUxDcyIsInNpZ3MiOltdLCJjbWQiOiJ7XCJwYXlsb2FkXCI6e1wiZXhlY1wiOntcImRhdGFcIjp7XCJ0b255XCI6W1wiNzI3MzYwYzMyZTA4ODEyZmY1ZjA0Y2IxZTc1Y2Q5YzBiYTZiNzI2ODQwODg2MTYwMTBhZjQxMWQwZjE0YzU0YVwiXSxcImVtaWx5XCI6W1wiNzdhNDk0N2M0M2NkYjRiNGZkZWYwMGIxMGRjODQ0NmMwZTU5MWI3MzM2Njg2MTA0OGMxOTViYjZhNTliZjViOVwiXSxcImNvbGluXCI6W1wiZGI3NzY3OTNiZTBmY2Y4ZTc2Yzc1YmRiMzVhMzZlNjdmMjk4MTExZGM2MTQ1YzY2NjkzYjAxMzMxOTJlMjYxNlwiXSxcIm1vbmljYVwiOltcIjdhYzcxMWM1ZDQ1OTgzMDdmYTZhYjNlNTA1MWU2ZWI3ZGJjN2M4YzA1ZWRlNWJlYTc1YmU4NzZlMzg3OGRmZjhcIl0sXCJtaWd1ZWxcIjpbXCI5NWQwNDI5ZTQ1YmEwNzVhYTZmZGE4MTI2M2RmNTgzOWQ1MjAyMGM0MjEyMjIyMGQ5ZDg0MWE0Y2UyZjQyMmRjXCJdLFwidGF5bG9yXCI6W1wiN2ViNzIyZDEzYTNmMmQ3ODU0ODJhZWYyYmM4YmI0OWQ5Njg0OWJkNWQzOTVhNDBjZWQ4YjA1YmZlMDY4ZjQ0YlwiXSxcIm1hcmtcIjpbXCJlOWRkMzM3NjEzOTc5OTFhMzE3ZTdjZDI0ZTgyZGY0ZDFlMTJhMzAwNjJhMjQyYzllMWM1ZjZhMTkzMDUxNmRjXCJdLFwiYW5hZ2hhXCI6W1wiMGQ4ZGNhZTNiNmZkODA1YzU1MmVhM2JjYTkzZDk3ODc2MjQzMTFmNzg0Zjk5MmJlM2ExZWNkNDQ2MTAyY2NkOVwiXSxcImFuZHJld1wiOltcIjdkN2EwOWI3NDFlNjcyNjIxOTcwOWY3YWI5NzkwYzY5ZjhjZDEyYjEwMjZkMDA5MGFjN2M1MmU5YWEwYWI3NGJcIl0sXCJhbmFzdGFzaWFcIjpbXCIxZWM3NGRlNzI0YjNjNzAwNzM3ZDk5OTA2YWJhNDhkYmVkNmI5MDE0MGJiYzY0MTMzYzU1ODU3MWIxODg4M2MzXCJdLFwiY3JvZXN1c1wiOltcIjI5OTNmNzk1ZDEzM2ZhNWQwZmQ4NzdhNjQxY2FiYzhiMjhjZDM2MTQ3ZjY2Njk4OGNhY2JhYTQzNzlkMWZmOTNcIl0sXCJlbW1hbnVlbFwiOltcImE3ODRhNTI5ODQyMjllZDI4YjcwMzgxMGNkNDUyNTY1NzU5ZDg4NDIwODc1YTVkYjI1N2ZhOGU4MDZhYzlkZTVcIl0sXCJiZW5cIjpbXCJkOGU1MTJiMmQwOGFmYWYyMGM1OWFhZjJhMGRiNTcyNjJjMzE5NjVlNDMxMGUzMzBjMWFkODA3NWVjYWEzNjQ3XCJdLFwiZG91Z1wiOltcImRlYTY0NzAwOTI5NWRjMDE1YmE2ZTYzNTliODViYWZlMDlkMmNlOTM1YTAzYzNiZjgzZjc3NTQ0MmQ1MzkwMjVcIl0sXCJ2aXZcIjpbXCIyM2Q0YjRlOGNiMzAzZmVlYmNhZmE5MzA3MzFkNGI4OTEzNjk1YmQwZDkyYzNiNTM1OTUwNjUxOWNlYmYxNTZhXCJdLFwiamVmZlwiOltcIjk4OTNhYmQzYzg1ODg5ZGZhMzUxYzVlZTg2MTdlNWMxOTBmYTNhODhjZTQ1YTZhZWNjMTQ1MGM2YTY4NzFlN2VcIl0sXCJmcmFuY2VzY29cIjpbXCI0YjBmMjliOWUwYTk5NjU4N2U1YjU1MjQ3MzFjOTFlY2YwMmVjYWE4YjdlNzBlNWY4ZjE4ODFjNWYwYzE4ZmMxXCJdLFwic3R1YXJ0XCI6W1wiMGUzMTgwZGQ0YWU5ZDQzODVhMjFkN2NhOTVjYzcyMjliMGY2YjJjYTllMGY0ODYxZGQ0ZWVkNjg1MDA0ZGY2NlwiXSxcImxlYWhcIjpbXCIyMTY2NDMxMzdmYjVmNmExMjdkYmIxMDYzNzAyY2JiN2MxZjE1MzQ1MWExYWQ0YWZhOWY5MmU3NzQ0N2NjMzMwXCJdLFwid2lsbFwiOltcIjgzMGFkNzczNTEwYWIwZjVhMGQ0NTY0YjdiMzFkMmIwYjFiYTdmZDVhMTE2ZjY2NTk4YTFjNjNjYzIxNDJmZDVcIl0sXCJsaW5kYVwiOltcImUxMDAyZGIwODk0Mjk5YmIzNzIzOGJhYjAyMTcwMTgwYzBhZTU2ZjU5MzIxNjliYjJmY2Y3NTYwNTlmZWExNzVcIl0sXCJoZWVreXVuXCI6W1wiMDkwNGY1OTcyYjJiYzI2M2NhM2M1NmI2YjlmYjg4NDY0YWNiYWM0OTBjMjIxOTdjMDBhNzc4YzliNzBjMjBjZFwiXSxcInJlYmVjY2FcIjpbXCIyZmVhNDNmN2M4MGJhNzVkMjE3M2M3ZDgzMjI4NzA5YjE0NGM1N2M1ZTg2MzQ3YzgyMDczMWUwMjViZDdmMmJjXCJdfSxcImNvZGVcIjpcIihjb2luLmNvaW5iYXNlIFxcXCJjcm9lc3VzXFxcIiAocmVhZC1rZXlzZXQgXFxcImNyb2VzdXNcXFwiKSA5MDAwMDAwMDAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImFuYWdoYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJhbmFnaGFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiYW5hc3Rhc2lhXFxcIiAocmVhZC1rZXlzZXQgXFxcImFuYXN0YXNpYVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJhbmRyZXdcXFwiIChyZWFkLWtleXNldCBcXFwiYW5kcmV3XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImJlblxcXCIgKHJlYWQta2V5c2V0IFxcXCJiZW5cXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiY29saW5cXFwiIChyZWFkLWtleXNldCBcXFwiY29saW5cXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiZG91Z1xcXCIgKHJlYWQta2V5c2V0IFxcXCJkb3VnXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImVtaWx5XFxcIiAocmVhZC1rZXlzZXQgXFxcImVtaWx5XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImVtbWFudWVsXFxcIiAocmVhZC1rZXlzZXQgXFxcImVtbWFudWVsXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImZyYW5jZXNjb1xcXCIgKHJlYWQta2V5c2V0IFxcXCJmcmFuY2VzY29cXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiaGVla3l1blxcXCIgKHJlYWQta2V5c2V0IFxcXCJoZWVreXVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImplZmZcXFwiIChyZWFkLWtleXNldCBcXFwiamVmZlxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJsZWFoXFxcIiAocmVhZC1rZXlzZXQgXFxcImxlYWhcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibGluZGFcXFwiIChyZWFkLWtleXNldCBcXFwibGluZGFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibWFya1xcXCIgKHJlYWQta2V5c2V0IFxcXCJtYXJrXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1pZ3VlbFxcXCIgKHJlYWQta2V5c2V0IFxcXCJtaWd1ZWxcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibW9uaWNhXFxcIiAocmVhZC1rZXlzZXQgXFxcIm1vbmljYVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJyZWJlY2NhXFxcIiAocmVhZC1rZXlzZXQgXFxcInJlYmVjY2FcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwic3R1YXJ0XFxcIiAocmVhZC1rZXlzZXQgXFxcInN0dWFydFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ0YXlsb3JcXFwiIChyZWFkLWtleXNldCBcXFwidGF5bG9yXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInRvbnlcXFwiIChyZWFkLWtleXNldCBcXFwidG9ueVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ2aXZcXFwiIChyZWFkLWtleXNldCBcXFwidml2XFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIndpbGxcXFwiIChyZWFkLWtleXNldCBcXFwid2lsbFxcXCIpIDUwMC4wKVwifX0sXCJzaWduZXJzXCI6W10sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcInByb2RuZXQtZ3JhbnRzXFxcIlwifSJ9
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJFblNkYmNqbFhfM2pwd0gwNVRadFAxR3g2TEF2YlkwN1kwc3NsMUMxTENzIiwibG9ncyI6InNRX0xVYUtQRWdYX1RGR1MzSUhTZ3oweGdGVzNNQ2FrQ0RVd1czS3VJQXciLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoyfQ
minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
transactionsHash: 5yxmUA_scXjL2oqzDP-SUjKj68UFCaeBHKXGdzNx6VA
outputsHash: MNag7Er0ukZc0zAsR3cSsSBNFTTBMqwQKuPL7rZm1Z8
payloadHash: 0S_CFa3_jrwqlUYZaRTV28OKcqRpsYcd4Qbs7CXnsoo
coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5PX0NPSU5CQVNFIn0sInJlcUtleSI6IkRsZFJ3Q2JsUTdMb3F5NndZSm5hb2RIbDMwZDNqM2VILXF0RnpmRXY0NmciLCJsb2dzIjpudWxsLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjpudWxsfQ

|]
