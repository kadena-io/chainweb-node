{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.TestnetPayload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - 
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IlRhYmxlQ3JlYXRlZCJ9LCJyZXFLZXkiOiIwSkkyRUR6UXVydlRTcU1iUHhfckdtOG5XWkFFbnlvN1h6OEpTWmlXMFRFIiwibG9ncyI6Im9ZXzBVV3pRVDFCQXlEQ1JPZXFlYk5iNEpyRkNSaVVMMjRNbmFQRjNZVGMiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjowfQ
- - eyJoYXNoIjoid21wVlVMWG1ORWx4bVlTbkhncWhyUmVCOGd6RFVoWWRFQzJtMnpiMWRvMCIsInNpZ3MiOltdLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1widG9ueVwiOltcIjcyNzM2MGMzMmUwODgxMmZmNWYwNGNiMWU3NWNkOWMwYmE2YjcyNjg0MDg4NjE2MDEwYWY0MTFkMGYxNGM1NGFcIl0sXCJlbWlseVwiOltcIjc3YTQ5NDdjNDNjZGI0YjRmZGVmMDBiMTBkYzg0NDZjMGU1OTFiNzMzNjY4NjEwNDhjMTk1YmI2YTU5YmY1YjlcIl0sXCJjb2xpblwiOltcImRiNzc2NzkzYmUwZmNmOGU3NmM3NWJkYjM1YTM2ZTY3ZjI5ODExMWRjNjE0NWM2NjY5M2IwMTMzMTkyZTI2MTZcIl0sXCJtb25pY2FcIjpbXCI3YWM3MTFjNWQ0NTk4MzA3ZmE2YWIzZTUwNTFlNmViN2RiYzdjOGMwNWVkZTViZWE3NWJlODc2ZTM4NzhkZmY4XCJdLFwibWlndWVsXCI6W1wiOTVkMDQyOWU0NWJhMDc1YWE2ZmRhODEyNjNkZjU4MzlkNTIwMjBjNDIxMjIyMjBkOWQ4NDFhNGNlMmY0MjJkY1wiXSxcInRheWxvclwiOltcIjdlYjcyMmQxM2EzZjJkNzg1NDgyYWVmMmJjOGJiNDlkOTY4NDliZDVkMzk1YTQwY2VkOGIwNWJmZTA2OGY0NGJcIl0sXCJtYXJrXCI6W1wiZTlkZDMzNzYxMzk3OTkxYTMxN2U3Y2QyNGU4MmRmNGQxZTEyYTMwMDYyYTI0MmM5ZTFjNWY2YTE5MzA1MTZkY1wiXSxcImFuYWdoYVwiOltcIjBkOGRjYWUzYjZmZDgwNWM1NTJlYTNiY2E5M2Q5Nzg3NjI0MzExZjc4NGY5OTJiZTNhMWVjZDQ0NjEwMmNjZDlcIl0sXCJhbmRyZXdcIjpbXCI3ZDdhMDliNzQxZTY3MjYyMTk3MDlmN2FiOTc5MGM2OWY4Y2QxMmIxMDI2ZDAwOTBhYzdjNTJlOWFhMGFiNzRiXCJdLFwiYW5hc3Rhc2lhXCI6W1wiMWVjNzRkZTcyNGIzYzcwMDczN2Q5OTkwNmFiYTQ4ZGJlZDZiOTAxNDBiYmM2NDEzM2M1NTg1NzFiMTg4ODNjM1wiXSxcImNyb2VzdXNcIjpbXCIyOTkzZjc5NWQxMzNmYTVkMGZkODc3YTY0MWNhYmM4YjI4Y2QzNjE0N2Y2NjY5ODhjYWNiYWE0Mzc5ZDFmZjkzXCJdLFwiZW1tYW51ZWxcIjpbXCJhNzg0YTUyOTg0MjI5ZWQyOGI3MDM4MTBjZDQ1MjU2NTc1OWQ4ODQyMDg3NWE1ZGIyNTdmYThlODA2YWM5ZGU1XCJdLFwiYmVuXCI6W1wiZDhlNTEyYjJkMDhhZmFmMjBjNTlhYWYyYTBkYjU3MjYyYzMxOTY1ZTQzMTBlMzMwYzFhZDgwNzVlY2FhMzY0N1wiXSxcImRvdWdcIjpbXCJkZWE2NDcwMDkyOTVkYzAxNWJhNmU2MzU5Yjg1YmFmZTA5ZDJjZTkzNWEwM2MzYmY4M2Y3NzU0NDJkNTM5MDI1XCJdLFwidml2XCI6W1wiMjNkNGI0ZThjYjMwM2ZlZWJjYWZhOTMwNzMxZDRiODkxMzY5NWJkMGQ5MmMzYjUzNTk1MDY1MTljZWJmMTU2YVwiXSxcImplZmZcIjpbXCI5ODkzYWJkM2M4NTg4OWRmYTM1MWM1ZWU4NjE3ZTVjMTkwZmEzYTg4Y2U0NWE2YWVjYzE0NTBjNmE2ODcxZTdlXCJdLFwiZnJhbmNlc2NvXCI6W1wiNGIwZjI5YjllMGE5OTY1ODdlNWI1NTI0NzMxYzkxZWNmMDJlY2FhOGI3ZTcwZTVmOGYxODgxYzVmMGMxOGZjMVwiXSxcInN0dWFydFwiOltcIjBlMzE4MGRkNGFlOWQ0Mzg1YTIxZDdjYTk1Y2M3MjI5YjBmNmIyY2E5ZTBmNDg2MWRkNGVlZDY4NTAwNGRmNjZcIl0sXCJsZWFoXCI6W1wiMjE2NjQzMTM3ZmI1ZjZhMTI3ZGJiMTA2MzcwMmNiYjdjMWYxNTM0NTFhMWFkNGFmYTlmOTJlNzc0NDdjYzMzMFwiXSxcIndpbGxcIjpbXCI4MzBhZDc3MzUxMGFiMGY1YTBkNDU2NGI3YjMxZDJiMGIxYmE3ZmQ1YTExNmY2NjU5OGExYzYzY2MyMTQyZmQ1XCJdLFwibGluZGFcIjpbXCJlMTAwMmRiMDg5NDI5OWJiMzcyMzhiYWIwMjE3MDE4MGMwYWU1NmY1OTMyMTY5YmIyZmNmNzU2MDU5ZmVhMTc1XCJdLFwiaGVla3l1blwiOltcIjA5MDRmNTk3MmIyYmMyNjNjYTNjNTZiNmI5ZmI4ODQ2NGFjYmFjNDkwYzIyMTk3YzAwYTc3OGM5YjcwYzIwY2RcIl0sXCJyZWJlY2NhXCI6W1wiMmZlYTQzZjdjODBiYTc1ZDIxNzNjN2Q4MzIyODcwOWIxNDRjNTdjNWU4NjM0N2M4MjA3MzFlMDI1YmQ3ZjJiY1wiXX0sXCJjb2RlXCI6XCIoY29pbi5jb2luYmFzZSBcXFwiY3JvZXN1c1xcXCIgKHJlYWQta2V5c2V0IFxcXCJjcm9lc3VzXFxcIikgOTAwMDAwMDAwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJhbmFnaGFcXFwiIChyZWFkLWtleXNldCBcXFwiYW5hZ2hhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImFuYXN0YXNpYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJhbmFzdGFzaWFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiYW5kcmV3XFxcIiAocmVhZC1rZXlzZXQgXFxcImFuZHJld1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJiZW5cXFwiIChyZWFkLWtleXNldCBcXFwiYmVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImNvbGluXFxcIiAocmVhZC1rZXlzZXQgXFxcImNvbGluXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImRvdWdcXFwiIChyZWFkLWtleXNldCBcXFwiZG91Z1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbWlseVxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbWlseVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbW1hbnVlbFxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbW1hbnVlbFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJmcmFuY2VzY29cXFwiIChyZWFkLWtleXNldCBcXFwiZnJhbmNlc2NvXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImhlZWt5dW5cXFwiIChyZWFkLWtleXNldCBcXFwiaGVla3l1blxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJqZWZmXFxcIiAocmVhZC1rZXlzZXQgXFxcImplZmZcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibGVhaFxcXCIgKHJlYWQta2V5c2V0IFxcXCJsZWFoXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImxpbmRhXFxcIiAocmVhZC1rZXlzZXQgXFxcImxpbmRhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1hcmtcXFwiIChyZWFkLWtleXNldCBcXFwibWFya1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJtaWd1ZWxcXFwiIChyZWFkLWtleXNldCBcXFwibWlndWVsXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1vbmljYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJtb25pY2FcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwicmViZWNjYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJyZWJlY2NhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInN0dWFydFxcXCIgKHJlYWQta2V5c2V0IFxcXCJzdHVhcnRcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwidGF5bG9yXFxcIiAocmVhZC1rZXlzZXQgXFxcInRheWxvclxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ0b255XFxcIiAocmVhZC1rZXlzZXQgXFxcInRvbnlcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwidml2XFxcIiAocmVhZC1rZXlzZXQgXFxcInZpdlxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ3aWxsXFxcIiAocmVhZC1rZXlzZXQgXFxcIndpbGxcXFwiKSA1MDAuMClcXG5cXG47IEdlbmVzaXMgYWxsb2NhdGlvbnNcXG5cXG4oY29pbi5jcmVhdGUtYWxsb2NhdGlvbi1hY2NvdW50IFxcXCJlbWlseVxcXCIgKHRpbWUgXFxcIjIwMjAtMTAtMzFUMDA6MDA6MDBaXFxcIikgXFxcImVtaWx5XFxcIiAyMDAwMDAuMClcIn19LFwic2lnbmVyc1wiOltdLFwibWV0YVwiOntcImNyZWF0aW9uVGltZVwiOjAsXCJ0dGxcIjoxNzI4MDAsXCJnYXNMaW1pdFwiOjAsXCJjaGFpbklkXCI6XCJcIixcImdhc1ByaWNlXCI6MCxcInNlbmRlclwiOlwiXCJ9LFwibm9uY2VcIjpcIlxcXCJwcm9kbmV0LWdyYW50c1xcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJ3bXBWVUxYbU5FbHhtWVNuSGdxaHJSZUI4Z3pEVWhZZEVDMm0yemIxZG8wIiwibG9ncyI6IjhZYm84YWcyTUc0aFNLOVYzZ1hiNXpPcnpaZkNkU3Zpc1F2aHUwaU1XRDAiLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoxfQ
minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
transactionsHash: PXzsKk0d_DRMvk8giV-_kkiX2JW1yxFjnyws-otiPPg
outputsHash: bxfGWbIQhHeMbYXx724Bw18jdHjkjUI9lgrjLjBECKA
payloadHash: 68u5Av-Nt0XmoGG4BkpL0vkKJq7slIf8Q4iiabnqiSg
coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5PX0NPSU5CQVNFIn0sInJlcUtleSI6IkRsZFJ3Q2JsUTdMb3F5NndZSm5hb2RIbDMwZDNqM2VILXF0RnpmRXY0NmciLCJsb2dzIjpudWxsLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjpudWxsfQ

|]
