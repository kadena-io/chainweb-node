{-# LANGUAGE QuasiQuotes #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.BlockHeader.Genesis.TestnetPayload ( payloadBlock ) where

import Data.Text.Encoding (encodeUtf8)
import Data.Yaml (decodeThrow)

import NeatInterpolation (text)

import Chainweb.Payload (PayloadWithOutputs)
import Chainweb.Utils (fromJuste)

payloadBlock :: PayloadWithOutputs
payloadBlock = fromJuste $ decodeThrow $ encodeUtf8 [text|
transactions:
- - 
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IlRhYmxlQ3JlYXRlZCJ9LCJyZXFLZXkiOiJFZlhudzVBV2JlNzB1aldqQ3FyamxITUNIZXRwRDlqaDR3aWtQenRYdnc0IiwibG9ncyI6ImtmLWxtMVZoNG9udlNueEFEeXRHbksxcXZxQkFSWFA0OUtyWGNjdy14cWciLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjowfQ
- - eyJoYXNoIjoiTUx0YUR2bHBDMlFJVVRmcTc5dkNicG92RjMyVnhCYllLXzNnWWd6UWZ2YyIsInNpZ3MiOltdLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1widG9ueVwiOltcIjcyNzM2MGMzMmUwODgxMmZmNWYwNGNiMWU3NWNkOWMwYmE2YjcyNjg0MDg4NjE2MDEwYWY0MTFkMGYxNGM1NGFcIl0sXCJlbWlseVwiOltcIjc3YTQ5NDdjNDNjZGI0YjRmZGVmMDBiMTBkYzg0NDZjMGU1OTFiNzMzNjY4NjEwNDhjMTk1YmI2YTU5YmY1YjlcIl0sXCJjb2xpblwiOltcImRiNzc2NzkzYmUwZmNmOGU3NmM3NWJkYjM1YTM2ZTY3ZjI5ODExMWRjNjE0NWM2NjY5M2IwMTMzMTkyZTI2MTZcIl0sXCJtb25pY2FcIjpbXCI3YWM3MTFjNWQ0NTk4MzA3ZmE2YWIzZTUwNTFlNmViN2RiYzdjOGMwNWVkZTViZWE3NWJlODc2ZTM4NzhkZmY4XCJdLFwibWlndWVsXCI6W1wiOTVkMDQyOWU0NWJhMDc1YWE2ZmRhODEyNjNkZjU4MzlkNTIwMjBjNDIxMjIyMjBkOWQ4NDFhNGNlMmY0MjJkY1wiXSxcInRheWxvclwiOltcIjdlYjcyMmQxM2EzZjJkNzg1NDgyYWVmMmJjOGJiNDlkOTY4NDliZDVkMzk1YTQwY2VkOGIwNWJmZTA2OGY0NGJcIl0sXCJtYXJrXCI6W1wiZTlkZDMzNzYxMzk3OTkxYTMxN2U3Y2QyNGU4MmRmNGQxZTEyYTMwMDYyYTI0MmM5ZTFjNWY2YTE5MzA1MTZkY1wiXSxcImFuYWdoYVwiOltcIjBkOGRjYWUzYjZmZDgwNWM1NTJlYTNiY2E5M2Q5Nzg3NjI0MzExZjc4NGY5OTJiZTNhMWVjZDQ0NjEwMmNjZDlcIl0sXCJhbmRyZXdcIjpbXCI3ZDdhMDliNzQxZTY3MjYyMTk3MDlmN2FiOTc5MGM2OWY4Y2QxMmIxMDI2ZDAwOTBhYzdjNTJlOWFhMGFiNzRiXCJdLFwiYW5hc3Rhc2lhXCI6W1wiMWVjNzRkZTcyNGIzYzcwMDczN2Q5OTkwNmFiYTQ4ZGJlZDZiOTAxNDBiYmM2NDEzM2M1NTg1NzFiMTg4ODNjM1wiXSxcImNyb2VzdXNcIjpbXCIyOTkzZjc5NWQxMzNmYTVkMGZkODc3YTY0MWNhYmM4YjI4Y2QzNjE0N2Y2NjY5ODhjYWNiYWE0Mzc5ZDFmZjkzXCJdLFwiZW1tYW51ZWxcIjpbXCJhNzg0YTUyOTg0MjI5ZWQyOGI3MDM4MTBjZDQ1MjU2NTc1OWQ4ODQyMDg3NWE1ZGIyNTdmYThlODA2YWM5ZGU1XCJdLFwiYmVuXCI6W1wiZDhlNTEyYjJkMDhhZmFmMjBjNTlhYWYyYTBkYjU3MjYyYzMxOTY1ZTQzMTBlMzMwYzFhZDgwNzVlY2FhMzY0N1wiXSxcImRvdWdcIjpbXCJkZWE2NDcwMDkyOTVkYzAxNWJhNmU2MzU5Yjg1YmFmZTA5ZDJjZTkzNWEwM2MzYmY4M2Y3NzU0NDJkNTM5MDI1XCJdLFwidml2XCI6W1wiMjNkNGI0ZThjYjMwM2ZlZWJjYWZhOTMwNzMxZDRiODkxMzY5NWJkMGQ5MmMzYjUzNTk1MDY1MTljZWJmMTU2YVwiXSxcImplZmZcIjpbXCI5ODkzYWJkM2M4NTg4OWRmYTM1MWM1ZWU4NjE3ZTVjMTkwZmEzYTg4Y2U0NWE2YWVjYzE0NTBjNmE2ODcxZTdlXCJdLFwiZnJhbmNlc2NvXCI6W1wiNGIwZjI5YjllMGE5OTY1ODdlNWI1NTI0NzMxYzkxZWNmMDJlY2FhOGI3ZTcwZTVmOGYxODgxYzVmMGMxOGZjMVwiXSxcInN0dWFydFwiOltcIjBlMzE4MGRkNGFlOWQ0Mzg1YTIxZDdjYTk1Y2M3MjI5YjBmNmIyY2E5ZTBmNDg2MWRkNGVlZDY4NTAwNGRmNjZcIl0sXCJsZWFoXCI6W1wiMjE2NjQzMTM3ZmI1ZjZhMTI3ZGJiMTA2MzcwMmNiYjdjMWYxNTM0NTFhMWFkNGFmYTlmOTJlNzc0NDdjYzMzMFwiXSxcIndpbGxcIjpbXCI4MzBhZDc3MzUxMGFiMGY1YTBkNDU2NGI3YjMxZDJiMGIxYmE3ZmQ1YTExNmY2NjU5OGExYzYzY2MyMTQyZmQ1XCJdLFwibGluZGFcIjpbXCJlMTAwMmRiMDg5NDI5OWJiMzcyMzhiYWIwMjE3MDE4MGMwYWU1NmY1OTMyMTY5YmIyZmNmNzU2MDU5ZmVhMTc1XCJdLFwiaGVla3l1blwiOltcIjA5MDRmNTk3MmIyYmMyNjNjYTNjNTZiNmI5ZmI4ODQ2NGFjYmFjNDkwYzIyMTk3YzAwYTc3OGM5YjcwYzIwY2RcIl0sXCJyZWJlY2NhXCI6W1wiMmZlYTQzZjdjODBiYTc1ZDIxNzNjN2Q4MzIyODcwOWIxNDRjNTdjNWU4NjM0N2M4MjA3MzFlMDI1YmQ3ZjJiY1wiXX0sXCJjb2RlXCI6XCIoY29pbi5jb2luYmFzZSBcXFwiY3JvZXN1c1xcXCIgKHJlYWQta2V5c2V0IFxcXCJjcm9lc3VzXFxcIikgOTAwMDAwMDAwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJhbmFnaGFcXFwiIChyZWFkLWtleXNldCBcXFwiYW5hZ2hhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImFuYXN0YXNpYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJhbmFzdGFzaWFcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwiYW5kcmV3XFxcIiAocmVhZC1rZXlzZXQgXFxcImFuZHJld1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJiZW5cXFwiIChyZWFkLWtleXNldCBcXFwiYmVuXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImNvbGluXFxcIiAocmVhZC1rZXlzZXQgXFxcImNvbGluXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImRvdWdcXFwiIChyZWFkLWtleXNldCBcXFwiZG91Z1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbWlseVxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbWlseVxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJlbW1hbnVlbFxcXCIgKHJlYWQta2V5c2V0IFxcXCJlbW1hbnVlbFxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJmcmFuY2VzY29cXFwiIChyZWFkLWtleXNldCBcXFwiZnJhbmNlc2NvXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImhlZWt5dW5cXFwiIChyZWFkLWtleXNldCBcXFwiaGVla3l1blxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJqZWZmXFxcIiAocmVhZC1rZXlzZXQgXFxcImplZmZcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwibGVhaFxcXCIgKHJlYWQta2V5c2V0IFxcXCJsZWFoXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcImxpbmRhXFxcIiAocmVhZC1rZXlzZXQgXFxcImxpbmRhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1hcmtcXFwiIChyZWFkLWtleXNldCBcXFwibWFya1xcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJtaWd1ZWxcXFwiIChyZWFkLWtleXNldCBcXFwibWlndWVsXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcIm1vbmljYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJtb25pY2FcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwicmViZWNjYVxcXCIgKHJlYWQta2V5c2V0IFxcXCJyZWJlY2NhXFxcIikgNTAwLjApXFxuKGNvaW4uY29pbmJhc2UgXFxcInN0dWFydFxcXCIgKHJlYWQta2V5c2V0IFxcXCJzdHVhcnRcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwidGF5bG9yXFxcIiAocmVhZC1rZXlzZXQgXFxcInRheWxvclxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ0b255XFxcIiAocmVhZC1rZXlzZXQgXFxcInRvbnlcXFwiKSA1MDAuMClcXG4oY29pbi5jb2luYmFzZSBcXFwidml2XFxcIiAocmVhZC1rZXlzZXQgXFxcInZpdlxcXCIpIDUwMC4wKVxcbihjb2luLmNvaW5iYXNlIFxcXCJ3aWxsXFxcIiAocmVhZC1rZXlzZXQgXFxcIndpbGxcXFwiKSA1MDAuMClcIn19LFwic2lnbmVyc1wiOltdLFwibWV0YVwiOntcImNyZWF0aW9uVGltZVwiOjAsXCJ0dGxcIjoxNzI4MDAsXCJnYXNMaW1pdFwiOjAsXCJjaGFpbklkXCI6XCJcIixcImdhc1ByaWNlXCI6MCxcInNlbmRlclwiOlwiXCJ9LFwibm9uY2VcIjpcIlxcXCJwcm9kbmV0LWdyYW50c1xcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6IldyaXRlIHN1Y2NlZWRlZCJ9LCJyZXFLZXkiOiJNTHRhRHZscEMyUUlVVGZxNzl2Q2Jwb3ZGMzJWeEJiWUtfM2dZZ3pRZnZjIiwibG9ncyI6InNRX0xVYUtQRWdYX1RGR1MzSUhTZ3oweGdGVzNNQ2FrQ0RVd1czS3VJQXciLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjoxfQ
- - eyJoYXNoIjoiLVJkZzVidlB1bjlvTlYtQ2l2OWNqLUE3YVhfRVhMczlSQVNSdFRPb2djVSIsInNpZ3MiOlt7InNpZyI6Ijc5ZGMwMjg2NzFjOTVlZjQ2NmJkYTQ3ZGVmNmM0OGE2YWJmNWFjMDExZDA2MzM3MzFlYzFjNmFlYTc5NzFiOTZlY2NlZDkyOGQ1NTk2ZTZiNGIzNWI2MDdhZDNkYWQzMzAzZmMyZjg4ZjA3YzRmZDFiNDdiYmVhYzZjYzIzYTA4In1dLCJjbWQiOiJ7XCJuZXR3b3JrSWRcIjpudWxsLFwicGF5bG9hZFwiOntcImV4ZWNcIjp7XCJkYXRhXCI6e1wibnMtYWRtaW4ta2V5c2V0XCI6W1wiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwiXSxcIm5zLW9wZXJhdGUta2V5c2V0XCI6W1wiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwiXX0sXCJjb2RlXCI6XCJcXG4oZGVmaW5lLWtleXNldCAnbnMtYWRtaW4ta2V5c2V0IChyZWFkLWtleXNldCAnbnMtYWRtaW4ta2V5c2V0KSlcXG4oZGVmaW5lLWtleXNldCAnbnMtb3BlcmF0ZS1rZXlzZXQgKHJlYWQta2V5c2V0ICducy1vcGVyYXRlLWtleXNldCkpXFxuXFxuKG1vZHVsZSBucyAnbnMtYWRtaW4ta2V5c2V0XFxuICBcXFwiQWRtaW5pc3RlcnMgZGVmaW5pdGlvbiBvZiBuZXcgbmFtZXNwYWNlcyBpbiBDaGFpbndlYi5cXFwiXFxuXFxuICAoZGVmc2NoZW1hIHJlZy1lbnRyeVxcbiAgICBhZG1pbi1ndWFyZDpndWFyZFxcbiAgICBhY3RpdmU6Ym9vbClcXG5cXG4gIChkZWZ0YWJsZSByZWdpc3RyeTp7cmVnLWVudHJ5fSlcXG5cXG4gIChkZWZjYXAgT1BFUkFURSAoKVxcbiAgICAoZW5mb3JjZS1rZXlzZXQgJ25zLW9wZXJhdGUta2V5c2V0KSlcXG5cXG4gIChkZWZjb25zdCBHVUFSRF9TVUNDRVNTIChjcmVhdGUtdXNlci1ndWFyZCAoc3VjY2VzcykpKVxcbiAgKGRlZmNvbnN0IEdVQVJEX0ZBSUxVUkUgKGNyZWF0ZS11c2VyLWd1YXJkIChmYWlsdXJlKSkpXFxuXFxuICAoZGVmdW4gc3VjY2VzcyAoKVxcbiAgICB0cnVlKVxcbiAgKGRlZnVuIGZhaWx1cmUgKClcXG4gICAgKGVuZm9yY2UgZmFsc2UgXFxcIkRpc2FibGVkXFxcIikpXFxuXFxuICAoZGVmdW4gdmFsaWRhdGUtbmFtZSAobmFtZSlcXG4gICAgKGVuZm9yY2UgKCE9IFxcXCJcXFwiIG5hbWUpIFxcXCJFbXB0eSBuYW1lIG5vdCBhbGxvd2VkXFxcIilcXG4gICAgKGVuZm9yY2UgKDwgKGxlbmd0aCBuYW1lKSA2NCkgXFxcIk5hbWUgbXVzdCBiZSBsZXNzIHRoYW4gNjQgY2hhcmFjdGVycyBsb25nXFxcIilcXG4gICAgKGVuZm9yY2UgKGlzLWNoYXJzZXQgQ0hBUlNFVF9MQVRJTjEgbmFtZSlcXG4gICAgICAgICAgICAgXFxcIk5hbWUgbXVzdCBiZSBpbiBsYXRpbjEgY2hhcnNldFxcXCIpKVxcblxcbiAgKGRlZnVuIHZhbGlkYXRlOmJvb2xcXG4gICAgICAoIG5zLW5hbWU6c3RyaW5nXFxuICAgICAgICBucy1hZG1pbjpndWFyZFxcbiAgICAgICAgKVxcbiAgICBcXFwiIE1hbmFnZXMgbmFtZXNwYWNlIGluc3RhbGwgZm9yIENoYWlud2ViLiBSZXF1aXJlcyBhY3RpdmUgcm93IGluIHJlZ2lzdHJ5IFxcXFxcXG4gICAgXFxcXCBmb3IgTlMtTkFNRSB3aXRoIGd1YXJkIG1hdGNoaW5nIE5TLUFETUlOLlxcXCJcXG5cXG4gICAgKHZhbGlkYXRlLW5hbWUgbnMtbmFtZSlcXG5cXG4gICAgKHdpdGgtZGVmYXVsdC1yZWFkIHJlZ2lzdHJ5IG5zLW5hbWVcXG4gICAgICB7ICdhZG1pbi1ndWFyZCA6IG5zLWFkbWluXFxuICAgICAgLCAnYWN0aXZlIDogZmFsc2UgfVxcbiAgICAgIHsgJ2FkbWluLWd1YXJkIDo9IGFnXFxuICAgICAgLCAnYWN0aXZlIDo9IGlzLWFjdGl2ZSB9XFxuXFxuICAgICAgICAoZW5mb3JjZSBpcy1hY3RpdmUgXFxcIkluYWN0aXZlIG9yIHVucmVnaXN0ZXJlZCBuYW1lc3BhY2VcXFwiKVxcbiAgICAgICAgKGVuZm9yY2UgKD0gbnMtYWRtaW4gYWcpIFxcXCJBZG1pbiBndWFyZCBtdXN0IG1hdGNoIGd1YXJkIGluIHJlZ2lzdHJ5XFxcIilcXG5cXG4gICAgICAgIHRydWUpKVxcblxcbiAgKGRlZnVuIHdyaXRlLXJlZ2lzdHJ5OnN0cmluZ1xcbiAgICAgICggbnMtbmFtZTpzdHJpbmdcXG4gICAgICAgIGd1YXJkOmd1YXJkXFxuICAgICAgICBhY3RpdmU6Ym9vbFxcbiAgICAgICAgKVxcbiAgICBcXFwiIFdyaXRlIGVudHJ5IHdpdGggR1VBUkQgYW5kIEFDVElWRSBpbnRvIHJlZ2lzdHJ5IGZvciBOQU1FLiBcXFxcXFxuICAgIFxcXFwgR3VhcmRlZCBieSBvcGVyYXRlIGtleXNldC4gXFxcIlxcblxcbiAgICAod2l0aC1jYXBhYmlsaXR5IChPUEVSQVRFKVxcblxcbiAgICAgICh2YWxpZGF0ZS1uYW1lIG5zLW5hbWUpXFxuXFxuICAgICAgKHdyaXRlIHJlZ2lzdHJ5IG5zLW5hbWVcXG4gICAgICAgIHsgJ2FkbWluLWd1YXJkOiBndWFyZFxcbiAgICAgICAgLCAnYWN0aXZlOiBhY3RpdmUgfSlcXG5cXG4gICAgICBcXFwiUmVnaXN0ZXIgZW50cnkgd3JpdHRlblxcXCIpKVxcblxcbiAgKGRlZnVuIHF1ZXJ5Om9iamVjdHtyZWctZW50cnl9XFxuICAgICAgKCBucy1uYW1lOnN0cmluZyApXFxuICAgIChyZWFkIHJlZ2lzdHJ5IG5zLW5hbWUpKVxcblxcbiAgKVxcblxcbihjcmVhdGUtdGFibGUgcmVnaXN0cnkpXFxuXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJrYWRlbmFcXFwiXFxuICAoa2V5c2V0LXJlZi1ndWFyZCAnbnMtb3BlcmF0ZS1rZXlzZXQpIHRydWUpXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJ1c2VyXFxcIiBHVUFSRF9GQUlMVVJFIHRydWUpXFxuKHdyaXRlLXJlZ2lzdHJ5IFxcXCJmcmVlXFxcIiBHVUFSRF9GQUlMVVJFIHRydWUpXFxuXFxuKGRlZmluZS1uYW1lc3BhY2UgXFxcImthZGVuYVxcXCJcXG4gIChrZXlzZXQtcmVmLWd1YXJkICducy1vcGVyYXRlLWtleXNldClcXG4gIChrZXlzZXQtcmVmLWd1YXJkICducy1vcGVyYXRlLWtleXNldCkpXFxuXFxuKGRlZmluZS1uYW1lc3BhY2UgXFxcInVzZXJcXFwiIEdVQVJEX1NVQ0NFU1MgR1VBUkRfRkFJTFVSRSlcXG4oZGVmaW5lLW5hbWVzcGFjZSBcXFwiZnJlZVxcXCIgR1VBUkRfU1VDQ0VTUyBHVUFSRF9GQUlMVVJFKVxcblwifX0sXCJzaWduZXJzXCI6W3tcInB1YktleVwiOlwiMzY4ODIwZjgwYzMyNGJiYzdjMmIwNjEwNjg4YTdkYTQzZTM5ZjkxZDExODczMjY3MWNkOWM3NTAwZmY0M2NjYVwifV0sXCJtZXRhXCI6e1wiY3JlYXRpb25UaW1lXCI6MCxcInR0bFwiOjE3MjgwMCxcImdhc0xpbWl0XCI6MCxcImNoYWluSWRcIjpcIlwiLFwiZ2FzUHJpY2VcIjowLFwic2VuZGVyXCI6XCJcIn0sXCJub25jZVwiOlwiXFxcImxvYWQtbnMtcHJvZG5ldC1zZW5kZXIwMFxcXCJcIn0ifQ
  - eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5hbWVzcGFjZSBkZWZpbmVkOiBmcmVlIn0sInJlcUtleSI6Ii1SZGc1YnZQdW45b05WLUNpdjljai1BN2FYX0VYTHM5UkFTUnRUT29nY1UiLCJsb2dzIjoiRHdwc2xkQVhleE1qSXpjYWt3M29XQWxKMkltX1pXVDNqZDkwZ0J0VExXayIsIm1ldGFEYXRhIjpudWxsLCJjb250aW51YXRpb24iOm51bGwsInR4SWQiOjJ9
minerData: eyJhY2NvdW50IjoiTm9NaW5lciIsInByZWRpY2F0ZSI6IjwiLCJwdWJsaWMta2V5cyI6W119
transactionsHash: 6Ab_JD5DbAWGybYG1Xavw0wTWrnjVEkMnikn_uSUZVo
outputsHash: k3cIELBI8F0VebJNFcqfpipxYeXu484yYLPG6d_o9QM
payloadHash: YiIJMihO1zGeDvi2Qa5IEdZgMun5d5EGMYXcvEiLRSk
coinbase: eyJnYXMiOjAsInJlc3VsdCI6eyJzdGF0dXMiOiJzdWNjZXNzIiwiZGF0YSI6Ik5PX0NPSU5CQVNFIn0sInJlcUtleSI6IkRsZFJ3Q2JsUTdMb3F5NndZSm5hb2RIbDMwZDNqM2VILXF0RnpmRXY0NmciLCJsb2dzIjpudWxsLCJtZXRhRGF0YSI6bnVsbCwiY29udGludWF0aW9uIjpudWxsLCJ0eElkIjpudWxsfQ

|]
