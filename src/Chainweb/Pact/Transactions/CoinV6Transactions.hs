{-# LANGUAGE OverloadedStrings #-}

-- This module is auto-generated. DO NOT EDIT IT MANUALLY.

module Chainweb.Pact.Transactions.CoinV6Transactions ( transactions ) where

import Data.Bifunctor (first)
import System.IO.Unsafe

import qualified Chainweb.Pact4.Transaction as Pact4
import Chainweb.Utils

transactions :: [Pact4.Transaction]
transactions =
  let decodeTx t =
        fromEitherM . (first (userError . show)) . codecDecode (Pact4.payloadCodec maxBound) =<< decodeB64UrlNoPaddingText t
  in unsafePerformIO $ mapM decodeTx [
    ""
    ]
