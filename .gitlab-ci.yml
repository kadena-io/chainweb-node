stages:
  - build
  - test
  # - deploy

# This is small check to confirm that the shell's limits for opening file
# descriptors is sufficiently high. This is relevant for our property tests, in
# which some tests rapidly create and destroy HTTP servers.
#
# 2019-03-24 DB: Disabling for now since we know CI has sufficient ulimits and
# this is now slowing down the build meaningfully.
#
# ulimit-linux:
#   tags:
#     - linux
#   script:
#     - ulimit -Hn
#     - ulimit -Sn
#
# ulimit-macos:
#   tags:
#     - macos
#   script:
#     - ulimit -Hn
#     - ulimit -Sn

nix-macos:
  stage: build
  tags:
    - macos
  script:
    - nix-build
    - nix-shell --run "echo Done with shell test"
    - nix-shell --run "result/bin/chainweb-tests --hide-successes"

#    NOTE: If we want artifacts to inclue code coverage reports, we have to pass
#    "--arg runCoverage true" to nix-build, but that means that the
#    chainweb-node binary will also be built with coverage turned on which is
#    probably not what we want.

  #   # - scripts/collectArtifacts.sh
  # artifacts:
  #   paths:
  #     - public/
  #   expire_in: 1 week

nix-linux:
  stage: build
  tags:
    - linux
  script:
    - echo -e "${CI_COMMIT_SHORT_SHA}\n${CI_COMMIT_REF_NAME}\n${CI_COMMIT_TAG}" > .vcs-info
    - cat .vcs-info
    - nix-build
    - nix-shell --run "echo Done with shell test"
    - result/bin/chainweb-node --version
    - nix-shell --run "result/bin/chainweb-tests --hide-successes"
    # - nix-build --option extra-sandbox-paths '/etc/protocols /etc/services' -A ghc.chainweb.doc

#    NOTE: If we want artifacts to inclue code coverage reports, we have to pass
#    "--arg runCoverage true" to nix-build, but that means that the
#    chainweb-node binary will also be built with coverage turned on which is
#    probably not what we want.

    # - scripts/collectArtifacts.sh
  # artifacts:
  #   paths:
  #   - public/
  #   expire_in: 1 week

# 2019 Feb 11 - This is bottlenecking CI quite severely.
# stack:
#   tags:
#     - macos
#   script:
#     - nix-shell --pure -p stack libiconv zlib ncurses gmp git perl darwin.security_tool --run "stack test --fast"

slow-tests:
  stage: test
  only:
    - master
  tags:
    - linux
  script:
    - echo This is a master slow test run.
    - nix-build
    # - nix-build docker.nix
    # - nix-build -A ghc.chainweb.doc
    - nix-shell --run "result/bin/chainweb-tests --hide-successes"
    - result/bin/cwtool slow-tests +RTS -N4
    - result/bin/bench

# pages:
#   stage: deploy
#   script:
#   - echo 'Nothing to do...'
#   artifacts:
#     paths:
#     - public/

##############################################################################
# Nightly jobs
##############################################################################

nightly-nix:
  only:
    - schedules
  script:
    - echo This is a nightly build!

    # It probably makes sense to run coverage nightly
    - nix-build
    - nix-shell --run "result/bin/chainweb-tests --hide-successes"
    - result/bin/cwtool slow-tests +RTS -N4
    - result/bin/bench
